<!--
   Copyright 2011-2012  U.S. Centers for Disease Control and Prevention

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   $Id$
  -->
<channel>
  <id>e51864a0-8c48-434c-a437-8e706e26c92a</id>
  <name>02_ELR_PHIX</name>
  <description></description>
  <enabled>true</enabled>
  <version>2.1.1.5490</version>
  <lastModified>
    <time>1329766188155</time>
    <timezone>America/New_York</timezone>
  </lastModified>
  <revision>2</revision>
  <sourceConnector>
    <name>sourceConnector</name>
    <properties>
      <property name="DataType">Channel Reader</property>
      <property name="responseValue">None</property>
    </properties>
    <transformer>
      <steps>
        <step>
          <sequenceNumber>0</sequenceNumber>
          <name>Set PHIX instance-specific variables</name>
          <script>logger.info(&quot;PHIX VERSION: 1.3.1.0_elr&quot;);
channelMap.put(&apos;phix_version&apos;, &apos;1.3.1.0_elr&apos;);

// PHIX instance-specific variables
logger.info(&quot;PHIX INSTANCE-SPECIFIC CONFIGURATION:&quot;);

logger.info(&quot;hubInstanceName: &quot; + &quot;PHIX 1&quot;);
logger.info(&quot;hubHost: &quot; + &quot;elr_translator_tool&quot;);
logger.info(&quot;hubInstanceEmailFromAddr: &quot; + &quot;unused&quot;);
logger.info(&quot;hubInstanceWebSvcHost: &quot; + &quot;unused:8081&quot;);
logger.info(&quot;enablePHIXPortalConnector: &quot; + &quot;false&quot;);

// &quot;PHIX 1&quot; Configuration
channelMap.put(&apos;hubInstanceName&apos;, &apos;PHIX 1&apos;);
channelMap.put(&apos;hubHost&apos;, &apos;elr_translator_tool&apos;);
channelMap.put(&apos;hubInstanceEmailFromAddr&apos;, &apos;unused&apos;);
channelMap.put(&apos;hubInstanceWebSvcHost&apos;, &apos;unused:8081&apos;)
channelMap.put(&apos;enablePHIXPortalConnector&apos;, &apos;false&apos;);

//Setting HD Datatype Default values for MSH Components
var HDDatatypeDefaultValue_MSH_3_2 = &apos;2.16.840.1.114222.4.3.2.5.2.10&apos;;
var HDDatatypeDefaultValue_MSH_3_3 = &apos;ISO&apos;;
var HDDatatypeDefaultValue_MSH_4_2 = &apos;13D34567&apos;;
var HDDatatypeDefaultValue_MSH_4_3 = &apos;CLIA&apos;;
var HDDatatypeDefaultValue_MSH_5_2 = &apos;2.16.840.1.114222.4.3.2.5.2.50&apos;; 
var HDDatatypeDefaultValue_MSH_5_3 = &apos;ISO&apos;;
var HDDatatypeDefaultValue_MSH_6_2 = &apos;2.16.840.1.114222.4.3.2.5.2.7000&apos;;
var HDDatatypeDefaultValue_MSH_6_3 = &apos;ISO&apos;;

//Setting HD Datatype Default values for MSH Components
var HDDatatypeDefaultValue_PID_3_4_2 = &apos;2.16.840.1.114222.4.3.2.5.2.2&apos;;
var HDDatatypeDefaultValue_PID_3_4_3 = &apos;ISO&apos;;
var HDDatatypeDefaultValue_PID_3_6_2 = &apos;2.16.840.1.114222.4.3.2.5.2.2&apos;;
var HDDatatypeDefaultValue_PID_3_6_3 = &apos;ISO&apos;;

//Setting System variables for all HD Datatype Default values
//MSH
channelMap.put(&apos;HDDatatypeDefaultValue_MSH_3_2&apos;, HDDatatypeDefaultValue_MSH_3_2);
channelMap.put(&apos;HDDatatypeDefaultValue_MSH_3_3&apos;, HDDatatypeDefaultValue_MSH_3_3);
channelMap.put(&apos;HDDatatypeDefaultValue_MSH_4_2&apos;, HDDatatypeDefaultValue_MSH_4_2);
channelMap.put(&apos;HDDatatypeDefaultValue_MSH_4_3&apos;, HDDatatypeDefaultValue_MSH_4_3);
channelMap.put(&apos;HDDatatypeDefaultValue_MSH_5_2&apos;, HDDatatypeDefaultValue_MSH_5_2);
channelMap.put(&apos;HDDatatypeDefaultValue_MSH_5_3&apos;, HDDatatypeDefaultValue_MSH_5_3);
channelMap.put(&apos;HDDatatypeDefaultValue_MSH_6_2&apos;, HDDatatypeDefaultValue_MSH_6_2);
channelMap.put(&apos;HDDatatypeDefaultValue_MSH_6_3&apos;, HDDatatypeDefaultValue_MSH_6_3);

//PID
channelMap.put(&apos;HDDatatypeDefaultValue_PID_3_4_2&apos;, HDDatatypeDefaultValue_PID_3_4_2);
channelMap.put(&apos;HDDatatypeDefaultValue_PID_3_4_3&apos;, HDDatatypeDefaultValue_PID_3_4_3);
channelMap.put(&apos;HDDatatypeDefaultValue_PID_3_6_2&apos;, HDDatatypeDefaultValue_PID_3_6_2);
channelMap.put(&apos;HDDatatypeDefaultValue_PID_3_6_3&apos;, HDDatatypeDefaultValue_PID_3_6_3);</script>
          <type>JavaScript</type>
          <data class="map">
            <entry>
              <string>Script</string>
              <string>logger.info(&quot;PHIX VERSION: 1.3.1.0_elr&quot;);
channelMap.put(&apos;phix_version&apos;, &apos;1.3.1.0_elr&apos;);

// PHIX instance-specific variables
logger.info(&quot;PHIX INSTANCE-SPECIFIC CONFIGURATION:&quot;);

logger.info(&quot;hubInstanceName: &quot; + &quot;PHIX 1&quot;);
logger.info(&quot;hubHost: &quot; + &quot;elr_translator_tool&quot;);
logger.info(&quot;hubInstanceEmailFromAddr: &quot; + &quot;unused&quot;);
logger.info(&quot;hubInstanceWebSvcHost: &quot; + &quot;unused:8081&quot;);
logger.info(&quot;enablePHIXPortalConnector: &quot; + &quot;false&quot;);

// &quot;PHIX 1&quot; Configuration
channelMap.put(&apos;hubInstanceName&apos;, &apos;PHIX 1&apos;);
channelMap.put(&apos;hubHost&apos;, &apos;elr_translator_tool&apos;);
channelMap.put(&apos;hubInstanceEmailFromAddr&apos;, &apos;unused&apos;);
channelMap.put(&apos;hubInstanceWebSvcHost&apos;, &apos;unused:8081&apos;)
channelMap.put(&apos;enablePHIXPortalConnector&apos;, &apos;false&apos;);

//Setting HD Datatype Default values for MSH Components
var HDDatatypeDefaultValue_MSH_3_2 = &apos;2.16.840.1.114222.4.3.2.5.2.10&apos;;
var HDDatatypeDefaultValue_MSH_3_3 = &apos;ISO&apos;;
var HDDatatypeDefaultValue_MSH_4_2 = &apos;13D34567&apos;;
var HDDatatypeDefaultValue_MSH_4_3 = &apos;CLIA&apos;;
var HDDatatypeDefaultValue_MSH_5_2 = &apos;2.16.840.1.114222.4.3.2.5.2.50&apos;; 
var HDDatatypeDefaultValue_MSH_5_3 = &apos;ISO&apos;;
var HDDatatypeDefaultValue_MSH_6_2 = &apos;2.16.840.1.114222.4.3.2.5.2.7000&apos;;
var HDDatatypeDefaultValue_MSH_6_3 = &apos;ISO&apos;;

//Setting HD Datatype Default values for MSH Components
var HDDatatypeDefaultValue_PID_3_4_2 = &apos;2.16.840.1.114222.4.3.2.5.2.2&apos;;
var HDDatatypeDefaultValue_PID_3_4_3 = &apos;ISO&apos;;
var HDDatatypeDefaultValue_PID_3_6_2 = &apos;2.16.840.1.114222.4.3.2.5.2.2&apos;;
var HDDatatypeDefaultValue_PID_3_6_3 = &apos;ISO&apos;;

//Setting System variables for all HD Datatype Default values
//MSH
channelMap.put(&apos;HDDatatypeDefaultValue_MSH_3_2&apos;, HDDatatypeDefaultValue_MSH_3_2);
channelMap.put(&apos;HDDatatypeDefaultValue_MSH_3_3&apos;, HDDatatypeDefaultValue_MSH_3_3);
channelMap.put(&apos;HDDatatypeDefaultValue_MSH_4_2&apos;, HDDatatypeDefaultValue_MSH_4_2);
channelMap.put(&apos;HDDatatypeDefaultValue_MSH_4_3&apos;, HDDatatypeDefaultValue_MSH_4_3);
channelMap.put(&apos;HDDatatypeDefaultValue_MSH_5_2&apos;, HDDatatypeDefaultValue_MSH_5_2);
channelMap.put(&apos;HDDatatypeDefaultValue_MSH_5_3&apos;, HDDatatypeDefaultValue_MSH_5_3);
channelMap.put(&apos;HDDatatypeDefaultValue_MSH_6_2&apos;, HDDatatypeDefaultValue_MSH_6_2);
channelMap.put(&apos;HDDatatypeDefaultValue_MSH_6_3&apos;, HDDatatypeDefaultValue_MSH_6_3);

//PID
channelMap.put(&apos;HDDatatypeDefaultValue_PID_3_4_2&apos;, HDDatatypeDefaultValue_PID_3_4_2);
channelMap.put(&apos;HDDatatypeDefaultValue_PID_3_4_3&apos;, HDDatatypeDefaultValue_PID_3_4_3);
channelMap.put(&apos;HDDatatypeDefaultValue_PID_3_6_2&apos;, HDDatatypeDefaultValue_PID_3_6_2);
channelMap.put(&apos;HDDatatypeDefaultValue_PID_3_6_3&apos;, HDDatatypeDefaultValue_PID_3_6_3);</string>
            </entry>
          </data>
        </step>
      </steps>
      <inboundTemplate encoding="base64"></inboundTemplate>
      <outboundTemplate encoding="base64"></outboundTemplate>
      <inboundProtocol>HL7V2</inboundProtocol>
      <outboundProtocol>HL7V2</outboundProtocol>
      <inboundProperties>
        <property name="convertLFtoCR">true</property>
        <property name="handleRepetitions">true</property>
        <property name="handleSubcomponents">false</property>
        <property name="stripNamespaces">true</property>
        <property name="useStrictParser">false</property>
        <property name="useStrictValidation">false</property>
      </inboundProperties>
      <outboundProperties>
        <property name="convertLFtoCR">true</property>
        <property name="handleRepetitions">true</property>
        <property name="handleSubcomponents">false</property>
        <property name="stripNamespaces">true</property>
        <property name="useStrictParser">false</property>
        <property name="useStrictValidation">false</property>
      </outboundProperties>
    </transformer>
    <filter>
      <rules/>
    </filter>
    <transportName>Channel Reader</transportName>
    <mode>SOURCE</mode>
    <enabled>true</enabled>
    <version>2.1.1.5490</version>
  </sourceConnector>
  <destinationConnectors>
    <connector>
      <name>Archive incoming message</name>
      <properties>
        <property name="DataType">File Writer</property>
        <property name="FTPAnonymous">1</property>
        <property name="binary">0</property>
        <property name="charsetEncoding">DEFAULT_ENCODING</property>
        <property name="host">C:/phixdata/HL7_PROCESSED</property>
        <property name="outputAppend">0</property>
        <property name="outputPattern">${timestamp}_IN.txt</property>
        <property name="passive">1</property>
        <property name="password">anonymous</property>
        <property name="scheme">file</property>
        <property name="secure">1</property>
        <property name="template">${message.rawData}</property>
        <property name="timeout">10000</property>
        <property name="username">anonymous</property>
        <property name="validateConnections">1</property>
      </properties>
      <transformer>
        <steps>
          <step>
            <sequenceNumber>0</sequenceNumber>
            <name>Record timestamp for filename to channel map</name>
            <script>var ts = new java.lang.Long( java.lang.System.currentTimeMillis() );
channelMap.put(&apos;timestamp&apos;, ts.toString() );</script>
            <type>JavaScript</type>
            <data class="map">
              <entry>
                <string>Script</string>
                <string>var ts = new java.lang.Long( java.lang.System.currentTimeMillis() );
channelMap.put(&apos;timestamp&apos;, ts.toString() );</string>
              </entry>
            </data>
          </step>
        </steps>
        <inboundTemplate encoding="base64"></inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundProtocol>HL7V2</inboundProtocol>
        <outboundProtocol>HL7V2</outboundProtocol>
        <inboundProperties>
          <property name="convertLFtoCR">true</property>
          <property name="handleRepetitions">true</property>
          <property name="handleSubcomponents">false</property>
          <property name="stripNamespaces">true</property>
          <property name="useStrictParser">false</property>
          <property name="useStrictValidation">false</property>
        </inboundProperties>
        <outboundProperties>
          <property name="convertLFtoCR">true</property>
          <property name="handleRepetitions">false</property>
          <property name="handleSubcomponents">false</property>
          <property name="stripNamespaces">true</property>
          <property name="useStrictParser">false</property>
          <property name="useStrictValidation">false</property>
        </outboundProperties>
      </transformer>
      <filter>
        <rules/>
      </filter>
      <transportName>File Writer</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <version>2.1.1.5490</version>
    </connector>
    <connector>
      <name>Call ComponentRoutingService</name>
      <properties>
        <property name="DataType">Web Service Sender</property>
        <property name="dispatcherAttachmentContents">&lt;list/&gt;</property>
        <property name="dispatcherAttachmentNames">&lt;list/&gt;</property>
        <property name="dispatcherAttachmentTypes">&lt;list/&gt;</property>
        <property name="dispatcherEnvelope">&lt;soapenv:Envelope  
  xmlns:q0=&quot;http://phlissa.cdc.gov/&quot;  
  xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;  
  xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;  
  xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&gt;  
  &lt;soapenv:Header&gt;  
  &lt;/soapenv:Header&gt;
  &lt;soapenv:Body&gt;  
    &lt;q0:getRoutingData&gt;
      &lt;msgType&gt;${msgType}&lt;/msgType&gt;
      &lt;triggerEvent&gt;${msgTriggerEvent}&lt;/triggerEvent&gt;
      &lt;hl7Version&gt;${msgHL7VersionID}&lt;/hl7Version&gt;
      &lt;sendingFacility&gt;G&lt;/sendingFacility&gt;
      &lt;receivingFacility&gt;G&lt;/receivingFacility&gt;
    &lt;/q0:getRoutingData&gt;
  &lt;/soapenv:Body&gt;  
&lt;/soapenv:Envelope&gt;

</property>
        <property name="dispatcherOneWay">0</property>
        <property name="dispatcherOperation">getRoutingData</property>
        <property name="dispatcherPassword"></property>
        <property name="dispatcherPort">{http://phlissa.cdc.gov/}ComponentRoutingServicePort</property>
        <property name="dispatcherReplyChannelId">sink</property>
        <property name="dispatcherService">{http://phlissa.cdc.gov/}ComponentRoutingService</property>
        <property name="dispatcherSoapAction"></property>
        <property name="dispatcherUseAuthentication">0</property>
        <property name="dispatcherUseMtom">0</property>
        <property name="dispatcherUsername"></property>
        <property name="dispatcherWsdlCacheId"></property>
        <property name="dispatcherWsdlOperations">&lt;list&gt;
  &lt;string&gt;getRoutingData&lt;/string&gt;
&lt;/list&gt;</property>
        <property name="dispatcherWsdlUrl">http://localhost:8080/ComponentRoutingService/ComponentRoutingService?wsdl</property>
        <property name="host">localhost:8080/ComponentRoutingService/ComponentRoutingService?wsdl</property>
        <property name="queuePollInterval">200</property>
        <property name="reconnectMillisecs">10000</property>
        <property name="rotateQueue">0</property>
        <property name="usePersistentQueues">0</property>
      </properties>
      <transformer>
        <steps>
          <step>
            <sequenceNumber>0</sequenceNumber>
            <name>populate MSH sending facility based on RXA-11.4</name>
            <script>/*
try
{
  logger.info(&quot;populate MSH sending facility based on RXA-11.4&quot;);

  // 2.3.1 VXU V04: populate MSH-4 sending facility based on RXA-11.4
  if (msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.1&apos;].toString() == &quot;VXU&quot; &amp;&amp;
      msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.2&apos;].toString() == &quot;V04&quot; &amp;&amp;
      msg[&apos;MSH&apos;][&apos;MSH.12&apos;][&apos;MSH.12.1&apos;].toString() == &quot;2.3.1&quot;)
  {
    logger.info(&quot;2.3.1 VXU V04 message.  Examining RXA-11.4.&quot;);

    if (msg[&apos;RXA&apos;][0] != null &amp;&amp;
        undefined != msg[&apos;RXA&apos;][0][&apos;RXA.11&apos;][&apos;RXA.11.4&apos;])
    { 
      // if 11.4 contains subfields, grab only first subfield (11.4.1)
      var subfields = msg[&apos;RXA&apos;][0][&apos;RXA.11&apos;][&apos;RXA.11.4&apos;].toString().split(&quot;&amp;&quot;);      
      msg[&apos;MSH&apos;][&apos;MSH.4&apos;][&apos;MSH.4.1&apos;] = subfields[0];
      logger.info(&quot;Changing sending facility ID to &quot; + subfields[0] + &quot; based on RXA-11.4&quot;);
      channelMap.put(&apos;dynamicMsgSendingFacStatus&apos;, &apos;SET SENDING FAC TO &apos; + subfields[0] + &apos; BASED ON RXA-11.4&apos;);
    }
  }
}&#xd;catch(e)
{
  logger.error(&quot;Error in Call ComponentRoutingService MSH sending facility Transformer: &quot; + e.message);
  channelMap.put(&apos;componentErrors&apos;,  $(&apos;componentErrors&apos;) + &quot;Call ComponentRoutingService MSH sending facility Transformer:\n&quot; + e.message + &quot; |\n&quot;);
}
*/</script>
            <type>JavaScript</type>
            <data class="map">
              <entry>
                <string>Script</string>
                <string>/*
try
{
  logger.info(&quot;populate MSH sending facility based on RXA-11.4&quot;);

  // 2.3.1 VXU V04: populate MSH-4 sending facility based on RXA-11.4
  if (msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.1&apos;].toString() == &quot;VXU&quot; &amp;&amp;
      msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.2&apos;].toString() == &quot;V04&quot; &amp;&amp;
      msg[&apos;MSH&apos;][&apos;MSH.12&apos;][&apos;MSH.12.1&apos;].toString() == &quot;2.3.1&quot;)
  {
    logger.info(&quot;2.3.1 VXU V04 message.  Examining RXA-11.4.&quot;);

    if (msg[&apos;RXA&apos;][0] != null &amp;&amp;
        undefined != msg[&apos;RXA&apos;][0][&apos;RXA.11&apos;][&apos;RXA.11.4&apos;])
    { 
      // if 11.4 contains subfields, grab only first subfield (11.4.1)
      var subfields = msg[&apos;RXA&apos;][0][&apos;RXA.11&apos;][&apos;RXA.11.4&apos;].toString().split(&quot;&amp;&quot;);      
      msg[&apos;MSH&apos;][&apos;MSH.4&apos;][&apos;MSH.4.1&apos;] = subfields[0];
      logger.info(&quot;Changing sending facility ID to &quot; + subfields[0] + &quot; based on RXA-11.4&quot;);
      channelMap.put(&apos;dynamicMsgSendingFacStatus&apos;, &apos;SET SENDING FAC TO &apos; + subfields[0] + &apos; BASED ON RXA-11.4&apos;);
    }
  }
}&#xd;catch(e)
{
  logger.error(&quot;Error in Call ComponentRoutingService MSH sending facility Transformer: &quot; + e.message);
  channelMap.put(&apos;componentErrors&apos;,  $(&apos;componentErrors&apos;) + &quot;Call ComponentRoutingService MSH sending facility Transformer:\n&quot; + e.message + &quot; |\n&quot;);
}
*/</string>
              </entry>
            </data>
          </step>
          <step>
            <sequenceNumber>1</sequenceNumber>
            <name>dynamic routing of msg  based on PID-11.5 zip code</name>
            <script>/*
try
{
  logger.info(&quot;Dynamic routing of msg based on PID-11.5 zip code&quot;);

  // 2.3.1 VXU V04: route to Indiana Immunization Registry: 46001 to 47999
  if (msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.1&apos;].toString() == &quot;VXU&quot; &amp;&amp;
      msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.2&apos;].toString() == &quot;V04&quot; &amp;&amp;
      msg[&apos;MSH&apos;][&apos;MSH.12&apos;][&apos;MSH.12.1&apos;].toString() == &quot;2.3.1&quot;)
  {
    logger.info(&quot;2.3.1 VXU V04 message.  Examining zip code in PID-11.5&quot;);

    if (undefined != msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.5&apos;])
    { 
      logger.info(&quot;PID-11.5: ZIP: &quot; + msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.5&apos;].toString());
      var zip = parseInt(msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.5&apos;].toString() );
     
      if (zip &gt;= 46001 &amp;&amp; zip &lt;= 47999)
      {
        logger.info(&quot;Changing receiving facility ID to Indiana Immunization Registry (IND_IMM_REG) based on zip&quot;);
        msg[&apos;MSH&apos;][&apos;MSH.6&apos;][&apos;MSH.6.1&apos;] = &quot;IND_IMM_REG&quot;;
        channelMap.put(&apos;dynamicMsgReceivingFacStatus&apos;, &apos;RE-ROUTED ZIP &apos; + msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.5&apos;].toString() + &apos; TO INDIANA IMMUNIZATION REPOSITORY&apos;);
      }
      // TODO: else if ... insert new zip code range here for additional destinations
      else
      {
        logger.error(&quot;Error in Call ComponentRoutingService ZIP Transformer: No routing rule for 2.3.1 VXU V04 PID-11.5 zip code &quot; + msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.5&apos;].toString() );
        channelMap.put(&apos;componentErrors&apos;,  $(&apos;componentErrors&apos;) + &quot;Error in Call ComponentRoutingService ZIP Transformer: No routing rule for 2.3.1 VXU V04 PID-11.5 zip code &quot; + msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.5&apos;].toString() + &quot; |\n&quot;);
      }  
    }
  }
}&#xd;catch(e)
{
  logger.error(&quot;Error in Call ComponentRoutingService ZIP Transformer: &quot; + e.message);
  channelMap.put(&apos;componentErrors&apos;,  $(&apos;componentErrors&apos;) + &quot;Call ComponentRoutingService ZIP Transformer:\n&quot; + e.message + &quot; |\n&quot;);
}
*/</script>
            <type>JavaScript</type>
            <data class="map">
              <entry>
                <string>Script</string>
                <string>/*
try
{
  logger.info(&quot;Dynamic routing of msg based on PID-11.5 zip code&quot;);

  // 2.3.1 VXU V04: route to Indiana Immunization Registry: 46001 to 47999
  if (msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.1&apos;].toString() == &quot;VXU&quot; &amp;&amp;
      msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.2&apos;].toString() == &quot;V04&quot; &amp;&amp;
      msg[&apos;MSH&apos;][&apos;MSH.12&apos;][&apos;MSH.12.1&apos;].toString() == &quot;2.3.1&quot;)
  {
    logger.info(&quot;2.3.1 VXU V04 message.  Examining zip code in PID-11.5&quot;);

    if (undefined != msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.5&apos;])
    { 
      logger.info(&quot;PID-11.5: ZIP: &quot; + msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.5&apos;].toString());
      var zip = parseInt(msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.5&apos;].toString() );
     
      if (zip &gt;= 46001 &amp;&amp; zip &lt;= 47999)
      {
        logger.info(&quot;Changing receiving facility ID to Indiana Immunization Registry (IND_IMM_REG) based on zip&quot;);
        msg[&apos;MSH&apos;][&apos;MSH.6&apos;][&apos;MSH.6.1&apos;] = &quot;IND_IMM_REG&quot;;
        channelMap.put(&apos;dynamicMsgReceivingFacStatus&apos;, &apos;RE-ROUTED ZIP &apos; + msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.5&apos;].toString() + &apos; TO INDIANA IMMUNIZATION REPOSITORY&apos;);
      }
      // TODO: else if ... insert new zip code range here for additional destinations
      else
      {
        logger.error(&quot;Error in Call ComponentRoutingService ZIP Transformer: No routing rule for 2.3.1 VXU V04 PID-11.5 zip code &quot; + msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.5&apos;].toString() );
        channelMap.put(&apos;componentErrors&apos;,  $(&apos;componentErrors&apos;) + &quot;Error in Call ComponentRoutingService ZIP Transformer: No routing rule for 2.3.1 VXU V04 PID-11.5 zip code &quot; + msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.5&apos;].toString() + &quot; |\n&quot;);
      }  
    }
  }
}&#xd;catch(e)
{
  logger.error(&quot;Error in Call ComponentRoutingService ZIP Transformer: &quot; + e.message);
  channelMap.put(&apos;componentErrors&apos;,  $(&apos;componentErrors&apos;) + &quot;Call ComponentRoutingService ZIP Transformer:\n&quot; + e.message + &quot; |\n&quot;);
}
*/</string>
              </entry>
            </data>
          </step>
          <step>
            <sequenceNumber>2</sequenceNumber>
            <name>create variables for incoming MSH values</name>
            <script>try
{
  logger.info(&quot;Initializing component error log&quot;);
  channelMap.put(&apos;componentErrors&apos;, &quot;&quot;);

  channelMap.put(&apos;subscriptionName&apos;, &quot;&quot;);

  // extract msg type, trigger event, HL7 version, sending facility, and receiving facility from MSH
  SerializerFactory.getHL7Serializer().toXML(message);

  logger.info(&quot;Setting msgType=&quot; + msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.1&apos;].toString() );
  channelMap.put(&apos;msgType&apos;, msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.1&apos;].toString() );

  logger.info(&quot;Setting msgTriggerEvent=&quot; + msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.2&apos;].toString() );
  channelMap.put(&apos;msgTriggerEvent&apos;, msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.2&apos;].toString() );

  logger.info(&quot;Setting msgHL7VersionID=&quot; + msg[&apos;MSH&apos;][&apos;MSH.12&apos;][&apos;MSH.12.1&apos;].toString() );
  channelMap.put(&apos;msgHL7VersionID&apos;, msg[&apos;MSH&apos;][&apos;MSH.12&apos;][&apos;MSH.12.1&apos;].toString() );

  logger.info(&quot;Setting msgSendingFacilityID=&quot; + msg[&apos;MSH&apos;][&apos;MSH.4&apos;][&apos;MSH.4.1&apos;].toString() );
  channelMap.put(&apos;msgSendingFacilityID&apos;, msg[&apos;MSH&apos;][&apos;MSH.4&apos;][&apos;MSH.4.1&apos;].toString() );

  logger.info(&quot;Setting msgReceivingFacilityID=&quot; + msg[&apos;MSH&apos;][&apos;MSH.6&apos;][&apos;MSH.6.1&apos;].toString() );
  channelMap.put(&apos;msgReceivingFacilityID&apos;, msg[&apos;MSH&apos;][&apos;MSH.6&apos;][&apos;MSH.6.1&apos;].toString() );

  logger.info(&quot;Setting msgDateTime=&quot; + msg[&apos;MSH&apos;][&apos;MSH.7&apos;][&apos;MSH.7.1&apos;].toString() );
  channelMap.put(&apos;msgDateTime&apos;, msg[&apos;MSH&apos;][&apos;MSH.7&apos;][&apos;MSH.7.1&apos;].toString() );

  logger.info(&quot;Setting msgCtrlID=&quot; +  msg[&apos;MSH&apos;][&apos;MSH.10&apos;][&apos;MSH.10.1&apos;].toString() );
  channelMap.put(&apos;msgCtrlID&apos;, msg[&apos;MSH&apos;][&apos;MSH.10&apos;][&apos;MSH.10.1&apos;].toString() );

  if (&quot;&quot; == $(&apos;dynamicMsgSendingFacStatus&apos;))
  {
    channelMap.put(&apos;dynamicMsgSendingFacStatus&apos;, &apos;BYPASSED&apos;);
  }

  if (&quot;&quot; == $(&apos;dynamicMsgReceivingFacStatus&apos;))
  {
    channelMap.put(&apos;dynamicMsgReceivingFacStatus&apos;, &apos;BYPASSED&apos;);
  }

}&#xd;catch(e)
{
  logger.error(&quot;Error in Call ComponentRoutingService MSH Transformer: &quot; + e.message);
  channelMap.put(&apos;componentErrors&apos;,  $(&apos;componentErrors&apos;) + &quot;Call ComponentRoutingService MSH Transformer:\n&quot; + e.message + &quot; |\n&quot;);
}</script>
            <type>JavaScript</type>
            <data class="map">
              <entry>
                <string>Script</string>
                <string>try
{
  logger.info(&quot;Initializing component error log&quot;);
  channelMap.put(&apos;componentErrors&apos;, &quot;&quot;);

  channelMap.put(&apos;subscriptionName&apos;, &quot;&quot;);

  // extract msg type, trigger event, HL7 version, sending facility, and receiving facility from MSH
  SerializerFactory.getHL7Serializer().toXML(message);

  logger.info(&quot;Setting msgType=&quot; + msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.1&apos;].toString() );
  channelMap.put(&apos;msgType&apos;, msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.1&apos;].toString() );

  logger.info(&quot;Setting msgTriggerEvent=&quot; + msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.2&apos;].toString() );
  channelMap.put(&apos;msgTriggerEvent&apos;, msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.2&apos;].toString() );

  logger.info(&quot;Setting msgHL7VersionID=&quot; + msg[&apos;MSH&apos;][&apos;MSH.12&apos;][&apos;MSH.12.1&apos;].toString() );
  channelMap.put(&apos;msgHL7VersionID&apos;, msg[&apos;MSH&apos;][&apos;MSH.12&apos;][&apos;MSH.12.1&apos;].toString() );

  logger.info(&quot;Setting msgSendingFacilityID=&quot; + msg[&apos;MSH&apos;][&apos;MSH.4&apos;][&apos;MSH.4.1&apos;].toString() );
  channelMap.put(&apos;msgSendingFacilityID&apos;, msg[&apos;MSH&apos;][&apos;MSH.4&apos;][&apos;MSH.4.1&apos;].toString() );

  logger.info(&quot;Setting msgReceivingFacilityID=&quot; + msg[&apos;MSH&apos;][&apos;MSH.6&apos;][&apos;MSH.6.1&apos;].toString() );
  channelMap.put(&apos;msgReceivingFacilityID&apos;, msg[&apos;MSH&apos;][&apos;MSH.6&apos;][&apos;MSH.6.1&apos;].toString() );

  logger.info(&quot;Setting msgDateTime=&quot; + msg[&apos;MSH&apos;][&apos;MSH.7&apos;][&apos;MSH.7.1&apos;].toString() );
  channelMap.put(&apos;msgDateTime&apos;, msg[&apos;MSH&apos;][&apos;MSH.7&apos;][&apos;MSH.7.1&apos;].toString() );

  logger.info(&quot;Setting msgCtrlID=&quot; +  msg[&apos;MSH&apos;][&apos;MSH.10&apos;][&apos;MSH.10.1&apos;].toString() );
  channelMap.put(&apos;msgCtrlID&apos;, msg[&apos;MSH&apos;][&apos;MSH.10&apos;][&apos;MSH.10.1&apos;].toString() );

  if (&quot;&quot; == $(&apos;dynamicMsgSendingFacStatus&apos;))
  {
    channelMap.put(&apos;dynamicMsgSendingFacStatus&apos;, &apos;BYPASSED&apos;);
  }

  if (&quot;&quot; == $(&apos;dynamicMsgReceivingFacStatus&apos;))
  {
    channelMap.put(&apos;dynamicMsgReceivingFacStatus&apos;, &apos;BYPASSED&apos;);
  }

}&#xd;catch(e)
{
  logger.error(&quot;Error in Call ComponentRoutingService MSH Transformer: &quot; + e.message);
  channelMap.put(&apos;componentErrors&apos;,  $(&apos;componentErrors&apos;) + &quot;Call ComponentRoutingService MSH Transformer:\n&quot; + e.message + &quot; |\n&quot;);
}</string>
              </entry>
            </data>
          </step>
        </steps>
        <inboundTemplate encoding="base64"></inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundProtocol>HL7V2</inboundProtocol>
        <outboundProtocol>HL7V2</outboundProtocol>
        <inboundProperties>
          <property name="convertLFtoCR">true</property>
          <property name="handleRepetitions">true</property>
          <property name="handleSubcomponents">false</property>
          <property name="stripNamespaces">true</property>
          <property name="useStrictParser">false</property>
          <property name="useStrictValidation">false</property>
        </inboundProperties>
        <outboundProperties>
          <property name="convertLFtoCR">true</property>
          <property name="handleRepetitions">false</property>
          <property name="handleSubcomponents">false</property>
          <property name="stripNamespaces">true</property>
          <property name="useStrictParser">false</property>
          <property name="useStrictValidation">false</property>
        </outboundProperties>
      </transformer>
      <filter>
        <rules/>
      </filter>
      <transportName>Web Service Sender</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <version>2.1.1.5490</version>
    </connector>
    <connector>
      <name>Process ComponentRoutingService Response</name>
      <properties>
        <property name="DataType">Channel Writer</property>
        <property name="host">sink</property>
        <property name="synchronised">0</property>
        <property name="template">${message.encodedData}</property>
      </properties>
      <transformer>
        <steps>
          <step>
            <sequenceNumber>0</sequenceNumber>
            <name>process web service response</name>
            <script>try
{
  // process the response to the ComponentRoutingService invocation, storing data to the channelMap
  var resp = new XML(responseMap.get(&apos;Call ComponentRoutingService&apos;).getMessage());

  logger.info(&quot;Processing ComponentRoutingService web svc response&quot;);
  logger.info(resp);

  // If routingData is not present in response XML, a SOAP fault was likely returned from service call.  Record the 
  // response to the componentErrors variable and don&apos;t attempt to process component configuration items.
  if (undefined == resp..*::Body.*::getRoutingDataResponse.*::[&apos;routingData&apos;])
  {
    logger.error(&quot;No routingData element found in ComponentRoutingService response. Recording response to componentErrors variable: &quot; + resp);
    channelMap.put(&apos;componentErrors&apos;,  $(&apos;componentErrors&apos;) + &quot;ComponentRoutingService:\n&quot; + resp + &quot; |\n&quot;);
  }
  else
  {
    var xml = new XML(resp..*::Body.*::getRoutingDataResponse.*::[&apos;routingData&apos;].toString());

    logger.info(&quot;structural validation=&quot; + xml[&apos;structuralValidation&apos;]);
    logger.info(&quot;structuralValidationRegexpFilters=&quot; + xml[&apos;structuralValidationRegexpFilters&apos;]);
    logger.info(&quot;vocabTranslation=&quot; + xml[&apos;vocabTranslation&apos;]);
    logger.info(&quot;codeValidation=&quot; + xml[&apos;codeValidation&apos;]);
    logger.info(&quot;subscription=&quot; + xml[&apos;subscription&apos;]);
    logger.info(&quot;anonymization=&quot; + xml[&apos;anonymization&apos;]);
    logger.info(&quot;addSFTSegment=&quot; + xml[&apos;addSFTSegment&apos;]);
    logger.info(&quot;addSPMSegment=&quot; + xml[&apos;addSPMSegment&apos;]);
    logger.info(&quot;translateToVersion=&quot; + xml[&apos;translateToVersion&apos;]);
    logger.info(&quot;vocabTranslationMSSProfile=&quot; + xml[&apos;vocabTranslationMSSProfile&apos;]);
    logger.info(&quot;codeValidationMSSProfile=&quot; + xml[&apos;codeValidationMSSProfile&apos;]);
    logger.info(&quot;customProfileName=&quot; + xml[&apos;customProfileName&apos;]);
    logger.info(&quot;sendingFacilityDirectEmailAddress=&quot; + xml[&apos;sendingFacilityDirectEmailAddress&apos;]);
    logger.info(&quot;sendingFacilityNotificationEmail=&quot; + xml[&apos;sendingFacilityNotificationEmail&apos;]);
    logger.info(&quot;sendingFacilityErrorNotificationEmail=&quot; + xml[&apos;sendingFacilityErrorNotificationEmail&apos;]);
    logger.info(&quot;sendingFacilityWebSvcHost=&quot; + xml[&apos;sendingFacilityWebSvcHost&apos;]);
    logger.info(&quot;sendingFacilityXportType=&quot; + xml[&apos;sendingFacilityXportType&apos;]);
    logger.info(&quot;sendingFacilityHubHost=&quot; + xml[&apos;sendingFacilityHubHost&apos;]);
    logger.info(&quot;receivingFacilityDirectEmailAddress=&quot; + xml[&apos;receivingFacilityDirectEmailAddress&apos;]);
    logger.info(&quot;receivingFacilityWebSvcHost=&quot; + xml[&apos;receivingFacilityWebSvcHost&apos;]);
    logger.info(&quot;receivingFacilityXportType=&quot; + xml[&apos;receivingFacilityXportType&apos;]);
    logger.info(&quot;receivingFacilityHubHost=&quot; + xml[&apos;receivingFacilityHubHost&apos;]);

    channelMap.put(&apos;structuralValidation&apos;, xml[&apos;structuralValidation&apos;]);
    channelMap.put(&apos;structuralValidationRegexpFilters&apos;, xml[&apos;structuralValidationRegexpFilters&apos;]);
    channelMap.put(&apos;vocabTranslation&apos;, xml[&apos;vocabTranslation&apos;]);
    channelMap.put(&apos;codeValidation&apos;, xml[&apos;codeValidation&apos;]);
    channelMap.put(&apos;subscription&apos;, xml[&apos;subscription&apos;]);
    channelMap.put(&apos;anonymization&apos;, xml[&apos;anonymization&apos;]);
    channelMap.put(&apos;addSFTSegment&apos;, xml[&apos;addSFTSegment&apos;]);
    channelMap.put(&apos;addSPMSegment&apos;, xml[&apos;addSPMSegment&apos;]);
    channelMap.put(&apos;translateToVersion&apos;, xml[&apos;translateToVersion&apos;]);
    channelMap.put(&apos;vocabTranslationMSSProfile&apos;, xml[&apos;vocabTranslationMSSProfile&apos;]);
    channelMap.put(&apos;codeValidationMSSProfile&apos;, xml[&apos;codeValidationMSSProfile&apos;]);
    channelMap.put(&apos;customProfileName&apos;, xml[&apos;customProfileName&apos;]);
    channelMap.put(&apos;sendingFacilityDirectEmailAddress&apos;, xml[&apos;sendingFacilityDirectEmailAddress&apos;]);
    channelMap.put(&apos;sendingFacilityNotificationEmail&apos;, xml[&apos;sendingFacilityNotificationEmail&apos;]);

    if (&quot;&quot; == xml[&apos;sendingFacilityErrorNotificationEmail&apos;] )
    {
      channelMap.put(&apos;sendingFacilityErrorNotificationEmail&apos;, &apos;NONE&apos;);
    }
    else
    {
      channelMap.put(&apos;sendingFacilityErrorNotificationEmail&apos;, xml[&apos;sendingFacilityErrorNotificationEmail&apos;]);
    }
    
    channelMap.put(&apos;sendingFacilityWebSvcHost&apos;, xml[&apos;sendingFacilityWebSvcHost&apos;]);
    channelMap.put(&apos;sendingFacilityXportType&apos;, xml[&apos;sendingFacilityXportType&apos;]);
    channelMap.put(&apos;sendingFacilityHubHost&apos;, xml[&apos;sendingFacilityHubHost&apos;]);
    channelMap.put(&apos;receivingFacilityDirectEmailAddress&apos;, xml[&apos;receivingFacilityDirectEmailAddress&apos;]);
    channelMap.put(&apos;receivingFacilityWebSvcHost&apos;, xml[&apos;receivingFacilityWebSvcHost&apos;]);
    channelMap.put(&apos;receivingFacilityXportType&apos;, xml[&apos;receivingFacilityXportType&apos;]);
    channelMap.put(&apos;receivingFacilityHubHost&apos;, xml[&apos;receivingFacilityHubHost&apos;]);
  }
}
catch(e)
{
  logger.error(&quot;Error in Process ComponentRoutingService Response Transformer: &quot; + e.message);
  channelMap.put(&apos;componentErrors&apos;,  $(&apos;componentErrors&apos;) + &quot;Process ComponentRoutingService Response Transformer:\n&quot; + e.message + &quot; |\n&quot;);
}</script>
            <type>JavaScript</type>
            <data class="map">
              <entry>
                <string>Script</string>
                <string>try
{
  // process the response to the ComponentRoutingService invocation, storing data to the channelMap
  var resp = new XML(responseMap.get(&apos;Call ComponentRoutingService&apos;).getMessage());

  logger.info(&quot;Processing ComponentRoutingService web svc response&quot;);
  logger.info(resp);

  // If routingData is not present in response XML, a SOAP fault was likely returned from service call.  Record the 
  // response to the componentErrors variable and don&apos;t attempt to process component configuration items.
  if (undefined == resp..*::Body.*::getRoutingDataResponse.*::[&apos;routingData&apos;])
  {
    logger.error(&quot;No routingData element found in ComponentRoutingService response. Recording response to componentErrors variable: &quot; + resp);
    channelMap.put(&apos;componentErrors&apos;,  $(&apos;componentErrors&apos;) + &quot;ComponentRoutingService:\n&quot; + resp + &quot; |\n&quot;);
  }
  else
  {
    var xml = new XML(resp..*::Body.*::getRoutingDataResponse.*::[&apos;routingData&apos;].toString());

    logger.info(&quot;structural validation=&quot; + xml[&apos;structuralValidation&apos;]);
    logger.info(&quot;structuralValidationRegexpFilters=&quot; + xml[&apos;structuralValidationRegexpFilters&apos;]);
    logger.info(&quot;vocabTranslation=&quot; + xml[&apos;vocabTranslation&apos;]);
    logger.info(&quot;codeValidation=&quot; + xml[&apos;codeValidation&apos;]);
    logger.info(&quot;subscription=&quot; + xml[&apos;subscription&apos;]);
    logger.info(&quot;anonymization=&quot; + xml[&apos;anonymization&apos;]);
    logger.info(&quot;addSFTSegment=&quot; + xml[&apos;addSFTSegment&apos;]);
    logger.info(&quot;addSPMSegment=&quot; + xml[&apos;addSPMSegment&apos;]);
    logger.info(&quot;translateToVersion=&quot; + xml[&apos;translateToVersion&apos;]);
    logger.info(&quot;vocabTranslationMSSProfile=&quot; + xml[&apos;vocabTranslationMSSProfile&apos;]);
    logger.info(&quot;codeValidationMSSProfile=&quot; + xml[&apos;codeValidationMSSProfile&apos;]);
    logger.info(&quot;customProfileName=&quot; + xml[&apos;customProfileName&apos;]);
    logger.info(&quot;sendingFacilityDirectEmailAddress=&quot; + xml[&apos;sendingFacilityDirectEmailAddress&apos;]);
    logger.info(&quot;sendingFacilityNotificationEmail=&quot; + xml[&apos;sendingFacilityNotificationEmail&apos;]);
    logger.info(&quot;sendingFacilityErrorNotificationEmail=&quot; + xml[&apos;sendingFacilityErrorNotificationEmail&apos;]);
    logger.info(&quot;sendingFacilityWebSvcHost=&quot; + xml[&apos;sendingFacilityWebSvcHost&apos;]);
    logger.info(&quot;sendingFacilityXportType=&quot; + xml[&apos;sendingFacilityXportType&apos;]);
    logger.info(&quot;sendingFacilityHubHost=&quot; + xml[&apos;sendingFacilityHubHost&apos;]);
    logger.info(&quot;receivingFacilityDirectEmailAddress=&quot; + xml[&apos;receivingFacilityDirectEmailAddress&apos;]);
    logger.info(&quot;receivingFacilityWebSvcHost=&quot; + xml[&apos;receivingFacilityWebSvcHost&apos;]);
    logger.info(&quot;receivingFacilityXportType=&quot; + xml[&apos;receivingFacilityXportType&apos;]);
    logger.info(&quot;receivingFacilityHubHost=&quot; + xml[&apos;receivingFacilityHubHost&apos;]);

    channelMap.put(&apos;structuralValidation&apos;, xml[&apos;structuralValidation&apos;]);
    channelMap.put(&apos;structuralValidationRegexpFilters&apos;, xml[&apos;structuralValidationRegexpFilters&apos;]);
    channelMap.put(&apos;vocabTranslation&apos;, xml[&apos;vocabTranslation&apos;]);
    channelMap.put(&apos;codeValidation&apos;, xml[&apos;codeValidation&apos;]);
    channelMap.put(&apos;subscription&apos;, xml[&apos;subscription&apos;]);
    channelMap.put(&apos;anonymization&apos;, xml[&apos;anonymization&apos;]);
    channelMap.put(&apos;addSFTSegment&apos;, xml[&apos;addSFTSegment&apos;]);
    channelMap.put(&apos;addSPMSegment&apos;, xml[&apos;addSPMSegment&apos;]);
    channelMap.put(&apos;translateToVersion&apos;, xml[&apos;translateToVersion&apos;]);
    channelMap.put(&apos;vocabTranslationMSSProfile&apos;, xml[&apos;vocabTranslationMSSProfile&apos;]);
    channelMap.put(&apos;codeValidationMSSProfile&apos;, xml[&apos;codeValidationMSSProfile&apos;]);
    channelMap.put(&apos;customProfileName&apos;, xml[&apos;customProfileName&apos;]);
    channelMap.put(&apos;sendingFacilityDirectEmailAddress&apos;, xml[&apos;sendingFacilityDirectEmailAddress&apos;]);
    channelMap.put(&apos;sendingFacilityNotificationEmail&apos;, xml[&apos;sendingFacilityNotificationEmail&apos;]);

    if (&quot;&quot; == xml[&apos;sendingFacilityErrorNotificationEmail&apos;] )
    {
      channelMap.put(&apos;sendingFacilityErrorNotificationEmail&apos;, &apos;NONE&apos;);
    }
    else
    {
      channelMap.put(&apos;sendingFacilityErrorNotificationEmail&apos;, xml[&apos;sendingFacilityErrorNotificationEmail&apos;]);
    }
    
    channelMap.put(&apos;sendingFacilityWebSvcHost&apos;, xml[&apos;sendingFacilityWebSvcHost&apos;]);
    channelMap.put(&apos;sendingFacilityXportType&apos;, xml[&apos;sendingFacilityXportType&apos;]);
    channelMap.put(&apos;sendingFacilityHubHost&apos;, xml[&apos;sendingFacilityHubHost&apos;]);
    channelMap.put(&apos;receivingFacilityDirectEmailAddress&apos;, xml[&apos;receivingFacilityDirectEmailAddress&apos;]);
    channelMap.put(&apos;receivingFacilityWebSvcHost&apos;, xml[&apos;receivingFacilityWebSvcHost&apos;]);
    channelMap.put(&apos;receivingFacilityXportType&apos;, xml[&apos;receivingFacilityXportType&apos;]);
    channelMap.put(&apos;receivingFacilityHubHost&apos;, xml[&apos;receivingFacilityHubHost&apos;]);
  }
}
catch(e)
{
  logger.error(&quot;Error in Process ComponentRoutingService Response Transformer: &quot; + e.message);
  channelMap.put(&apos;componentErrors&apos;,  $(&apos;componentErrors&apos;) + &quot;Process ComponentRoutingService Response Transformer:\n&quot; + e.message + &quot; |\n&quot;);
}</string>
              </entry>
            </data>
          </step>
        </steps>
        <inboundTemplate encoding="base64"></inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundProtocol>HL7V2</inboundProtocol>
        <outboundProtocol>HL7V2</outboundProtocol>
        <inboundProperties>
          <property name="convertLFtoCR">true</property>
          <property name="handleRepetitions">true</property>
          <property name="handleSubcomponents">false</property>
          <property name="stripNamespaces">true</property>
          <property name="useStrictParser">false</property>
          <property name="useStrictValidation">false</property>
        </inboundProperties>
        <outboundProperties>
          <property name="convertLFtoCR">true</property>
          <property name="handleRepetitions">false</property>
          <property name="handleSubcomponents">false</property>
          <property name="stripNamespaces">true</property>
          <property name="useStrictParser">false</property>
          <property name="useStrictValidation">false</property>
        </outboundProperties>
      </transformer>
      <filter>
        <rules/>
      </filter>
      <transportName>Channel Writer</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <version>2.1.1.5490</version>
    </connector>
    <connector>
      <name>Call StructuralValidationService</name>
      <properties>
        <property name="DataType">Web Service Sender</property>
        <property name="dispatcherAttachmentContents">&lt;list/&gt;</property>
        <property name="dispatcherAttachmentNames">&lt;list/&gt;</property>
        <property name="dispatcherAttachmentTypes">&lt;list/&gt;</property>
        <property name="dispatcherEnvelope">&lt;soapenv:Envelope xmlns:q0=&quot;http://phlissa.cdc.gov/&quot; xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;  
  xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;  
  xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&gt;  
  &lt;soapenv:Header /&gt;
  &lt;soapenv:Body&gt;  
    &lt;q0:validateWithFiltering&gt;
      &lt;hl7Message&gt;&lt;![CDATA[${message.encodedData}]]&gt;&lt;/hl7Message&gt;
      &lt;regexpFilters&gt;&lt;![CDATA[${structuralValidationRegexpFilters}]]&gt;&lt;/regexpFilters&gt;
      &lt;customProfileName&gt;&lt;![CDATA[${customProfileName}]]&gt;&lt;/customProfileName&gt;
    &lt;/q0:validateWithFiltering&gt;
  &lt;/soapenv:Body&gt;  
&lt;/soapenv:Envelope&gt; 
</property>
        <property name="dispatcherOneWay">0</property>
        <property name="dispatcherOperation">validateWithFiltering</property>
        <property name="dispatcherPassword"></property>
        <property name="dispatcherPort">{http://phlissa.cdc.gov/}StructuralValidationServicePort</property>
        <property name="dispatcherReplyChannelId">sink</property>
        <property name="dispatcherService">{http://phlissa.cdc.gov/}StructuralValidationService</property>
        <property name="dispatcherSoapAction"></property>
        <property name="dispatcherUseAuthentication">0</property>
        <property name="dispatcherUseMtom">0</property>
        <property name="dispatcherUsername"></property>
        <property name="dispatcherWsdlCacheId"></property>
        <property name="dispatcherWsdlOperations">&lt;list&gt;
  &lt;string&gt;validate&lt;/string&gt;
  &lt;string&gt;validateErrorArray&lt;/string&gt;
  &lt;string&gt;validateErrorArrayWithFiltering&lt;/string&gt;
  &lt;string&gt;validateWithFiltering&lt;/string&gt;
&lt;/list&gt;</property>
        <property name="dispatcherWsdlUrl">http://localhost:8080/StructuralValidationService/StructuralValidationService?wsdl</property>
        <property name="host">localhost:8080/StructuralValidationService/StructuralValidationService?wsdl</property>
        <property name="queuePollInterval">200</property>
        <property name="reconnectMillisecs">10000</property>
        <property name="rotateQueue">0</property>
        <property name="usePersistentQueues">0</property>
      </properties>
      <transformer>
        <steps>
          <step>
            <sequenceNumber>0</sequenceNumber>
            <name>Add msg structure if missing</name>
            <script>// If MSH.9.3/message structure is missing, generate it based on MSH.9.1 and MSH.9.2 to avoid HAPI validation error.

try
{
  if ( ((undefined == msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.3&apos;]) || (msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.3&apos;] == &apos;&apos;)) &amp;&amp;
       undefined != msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.1&apos;] &amp;&amp;
       msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.1&apos;].toString().length &gt; 0 &amp;&amp;
       undefined != msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.2&apos;] &amp;&amp;
       msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.2&apos;].toString().length &gt; 0 )
  {
    logger.info(&quot;MSH-9.3 (msg structure) field not present. Generating new value from MSH-9.2 and MSH-9.3.&quot;);
    msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.3&apos;] = msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.1&apos;].toString() + &quot;_&quot; + msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.2&apos;].toString();
    logger.info(&quot;MSH-9.3 is now: &quot; + msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.3&apos;].toString() );
  }

}&#xd;catch(e)
{
  logger.error(&quot;Error in Call StructuralValidationService Transformer: &quot; + e.message);
  channelMap.put(&apos;componentErrors&apos;,  $(&apos;componentErrors&apos;) + &quot;Call StructuralValidationService Transformer:\n&quot; + e.message + &quot; |\n&quot;);
}</script>
            <type>JavaScript</type>
            <data class="map">
              <entry>
                <string>Script</string>
                <string>// If MSH.9.3/message structure is missing, generate it based on MSH.9.1 and MSH.9.2 to avoid HAPI validation error.

try
{
  if ( ((undefined == msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.3&apos;]) || (msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.3&apos;] == &apos;&apos;)) &amp;&amp;
       undefined != msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.1&apos;] &amp;&amp;
       msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.1&apos;].toString().length &gt; 0 &amp;&amp;
       undefined != msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.2&apos;] &amp;&amp;
       msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.2&apos;].toString().length &gt; 0 )
  {
    logger.info(&quot;MSH-9.3 (msg structure) field not present. Generating new value from MSH-9.2 and MSH-9.3.&quot;);
    msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.3&apos;] = msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.1&apos;].toString() + &quot;_&quot; + msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.2&apos;].toString();
    logger.info(&quot;MSH-9.3 is now: &quot; + msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.3&apos;].toString() );
  }

}&#xd;catch(e)
{
  logger.error(&quot;Error in Call StructuralValidationService Transformer: &quot; + e.message);
  channelMap.put(&apos;componentErrors&apos;,  $(&apos;componentErrors&apos;) + &quot;Call StructuralValidationService Transformer:\n&quot; + e.message + &quot; |\n&quot;);
}</string>
              </entry>
            </data>
          </step>
        </steps>
        <inboundTemplate encoding="base64"></inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundProtocol>HL7V2</inboundProtocol>
        <outboundProtocol>HL7V2</outboundProtocol>
        <inboundProperties>
          <property name="convertLFtoCR">true</property>
          <property name="handleRepetitions">true</property>
          <property name="handleSubcomponents">false</property>
          <property name="stripNamespaces">true</property>
          <property name="useStrictParser">false</property>
          <property name="useStrictValidation">false</property>
        </inboundProperties>
        <outboundProperties>
          <property name="convertLFtoCR">true</property>
          <property name="handleRepetitions">false</property>
          <property name="handleSubcomponents">false</property>
          <property name="stripNamespaces">true</property>
          <property name="useStrictParser">false</property>
          <property name="useStrictValidation">false</property>
        </outboundProperties>
      </transformer>
      <filter>
        <rules>
          <rule>
            <sequenceNumber>0</sequenceNumber>
            <name>Filter call to StructuralValidationService based on ComponentRoutingService configuration</name>
            <data class="map">
              <entry>
                <string>Script</string>
                <string>var retval = false;


if ($(&apos;structuralValidation&apos;) != &apos;true&apos;)
{
  logger.info(&quot;Bypassing StructuralValidationService call based on component routing configuration&quot;);
}
else if ($(&apos;componentErrors&apos;).length() &gt; 0)
{
  logger.info(&quot;Bypassing StructuralValidationService call because of prior errors: &quot; + $(&apos;componentErrors&apos;));
}
else
{
  logger.info(&quot;Calling StructuralValidationService&quot;);
  retval = true;
}

if (retval)
{
  channelMap.put(&apos;strucutralValidationCallStatus&apos;, &apos;CALLED&apos;);
}
else
{
  channelMap.put(&apos;strucutralValidationCallStatus&apos;, &apos;BYPASSED&apos;);
}

return retval;</string>
              </entry>
            </data>
            <type>JavaScript</type>
            <script>var retval = false;


if ($(&apos;structuralValidation&apos;) != &apos;true&apos;)
{
  logger.info(&quot;Bypassing StructuralValidationService call based on component routing configuration&quot;);
}
else if ($(&apos;componentErrors&apos;).length() &gt; 0)
{
  logger.info(&quot;Bypassing StructuralValidationService call because of prior errors: &quot; + $(&apos;componentErrors&apos;));
}
else
{
  logger.info(&quot;Calling StructuralValidationService&quot;);
  retval = true;
}

if (retval)
{
  channelMap.put(&apos;strucutralValidationCallStatus&apos;, &apos;CALLED&apos;);
}
else
{
  channelMap.put(&apos;strucutralValidationCallStatus&apos;, &apos;BYPASSED&apos;);
}

return retval;</script>
            <operator>NONE</operator>
          </rule>
        </rules>
      </filter>
      <transportName>Web Service Sender</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <version>2.1.1.5490</version>
    </connector>
    <connector>
      <name>Process StructuralValidationService Response</name>
      <properties>
        <property name="DataType">Channel Writer</property>
        <property name="host">sink</property>
        <property name="synchronised">0</property>
        <property name="template">${message.encodedData}</property>
      </properties>
      <transformer>
        <steps>
          <step>
            <sequenceNumber>0</sequenceNumber>
            <name>process StructuralValidationService web service response</name>
            <script>try
{
  logger.info(&quot;Processing StructuralValidationService web svc response&quot;);

  var resp = new XML(responseMap.get(&apos;Call StructuralValidationService&apos;).getMessage());
  logger.info(resp);


  // If validationErrors is not present in response XML, a SOAP fault was likely returned from service call.  Record the 
  // response to the componentErrors variable and don&apos;t attempt to parse the validation errors.
  if (undefined == resp..*::Body..*::validateWithFilteringResponse.*::[&apos;validationErrors&apos;])
  {
    logger.error(&quot;No validationErrors element found in StructuralValidationService response. Recording response to componentErrors variable: &quot; + resp);
    channelMap.put(&apos;componentErrors&apos;,  $(&apos;componentErrors&apos;) + &quot;StructuralValidationService:\n&quot; + resp + &quot; |\n&quot;);
  }
  else
  {
    var xml = new XML(resp..*::Body..*::[&apos;validateWithFilteringResponse&apos;].toString() );
    var validationErrors = xml[&apos;validationErrors&apos;].toString();

    if (validationErrors.length &gt; 0)
    {
      logger.error(&quot;StructuralValidationService validation errors: &quot; + validationErrors);
      channelMap.put(&apos;componentErrors&apos;,  $(&apos;componentErrors&apos;) + &quot;StructuralValidationService: Validation errors:\n&quot; + validationErrors + &quot; |\n&quot;);
    }
  }

}
catch(e)
{
  logger.error(&quot;Error in Process StructuralValidationService Response Transformer: &quot; + e.message);
  channelMap.put(&apos;componentErrors&apos;,  $(&apos;componentErrors&apos;) + &quot;Process StructuralValidationService Response Transformer:\n&quot; + e.message + &quot; |\n&quot;);
}</script>
            <type>JavaScript</type>
            <data class="map">
              <entry>
                <string>Script</string>
                <string>try
{
  logger.info(&quot;Processing StructuralValidationService web svc response&quot;);

  var resp = new XML(responseMap.get(&apos;Call StructuralValidationService&apos;).getMessage());
  logger.info(resp);


  // If validationErrors is not present in response XML, a SOAP fault was likely returned from service call.  Record the 
  // response to the componentErrors variable and don&apos;t attempt to parse the validation errors.
  if (undefined == resp..*::Body..*::validateWithFilteringResponse.*::[&apos;validationErrors&apos;])
  {
    logger.error(&quot;No validationErrors element found in StructuralValidationService response. Recording response to componentErrors variable: &quot; + resp);
    channelMap.put(&apos;componentErrors&apos;,  $(&apos;componentErrors&apos;) + &quot;StructuralValidationService:\n&quot; + resp + &quot; |\n&quot;);
  }
  else
  {
    var xml = new XML(resp..*::Body..*::[&apos;validateWithFilteringResponse&apos;].toString() );
    var validationErrors = xml[&apos;validationErrors&apos;].toString();

    if (validationErrors.length &gt; 0)
    {
      logger.error(&quot;StructuralValidationService validation errors: &quot; + validationErrors);
      channelMap.put(&apos;componentErrors&apos;,  $(&apos;componentErrors&apos;) + &quot;StructuralValidationService: Validation errors:\n&quot; + validationErrors + &quot; |\n&quot;);
    }
  }

}
catch(e)
{
  logger.error(&quot;Error in Process StructuralValidationService Response Transformer: &quot; + e.message);
  channelMap.put(&apos;componentErrors&apos;,  $(&apos;componentErrors&apos;) + &quot;Process StructuralValidationService Response Transformer:\n&quot; + e.message + &quot; |\n&quot;);
}</string>
              </entry>
            </data>
          </step>
        </steps>
        <inboundTemplate encoding="base64"></inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundProtocol>HL7V2</inboundProtocol>
        <outboundProtocol>HL7V2</outboundProtocol>
        <inboundProperties>
          <property name="convertLFtoCR">true</property>
          <property name="handleRepetitions">true</property>
          <property name="handleSubcomponents">false</property>
          <property name="stripNamespaces">true</property>
          <property name="useStrictParser">false</property>
          <property name="useStrictValidation">false</property>
        </inboundProperties>
        <outboundProperties>
          <property name="convertLFtoCR">true</property>
          <property name="handleRepetitions">false</property>
          <property name="handleSubcomponents">false</property>
          <property name="stripNamespaces">true</property>
          <property name="useStrictParser">false</property>
          <property name="useStrictValidation">false</property>
        </outboundProperties>
      </transformer>
      <filter>
        <rules>
          <rule>
            <sequenceNumber>0</sequenceNumber>
            <name>Filter destination based on component configuration and prior errors</name>
            <data class="map">
              <entry>
                <string>Script</string>
                <string>return ($(&apos;structuralValidation&apos;) == &apos;true&apos; &amp;&amp; $(&apos;componentErrors&apos;).length() == 0);</string>
              </entry>
            </data>
            <type>JavaScript</type>
            <script>return ($(&apos;structuralValidation&apos;) == &apos;true&apos; &amp;&amp; $(&apos;componentErrors&apos;).length() == 0);</script>
            <operator>NONE</operator>
          </rule>
        </rules>
      </filter>
      <transportName>Channel Writer</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <version>2.1.1.5490</version>
    </connector>
    <connector>
      <name>Call VocabTranslationService</name>
      <properties>
        <property name="DataType">Web Service Sender</property>
        <property name="dispatcherAttachmentContents">&lt;list/&gt;</property>
        <property name="dispatcherAttachmentNames">&lt;list/&gt;</property>
        <property name="dispatcherAttachmentTypes">&lt;list/&gt;</property>
        <property name="dispatcherEnvelope">&lt;soapenv:Envelope xmlns:ns=&quot;http://ws.soap.mss.cdc.gov/&quot; xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&#xd;
  &lt;soapenv:Header/&gt;&#xd;
  &lt;soapenv:Body&gt;&#xd;
    &lt;ns:translate&gt;&#xd;
      &lt;arg0&gt;&lt;![CDATA[${message.rawData}]]&gt;&lt;/arg0&gt;&#xd;
      &lt;arg1&gt;${vocabTranslationMSSProfile}&lt;/arg1&gt;&#xd;
    &lt;/ns:translate&gt;&#xd;
  &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;&#xd;</property>
        <property name="dispatcherOneWay">0</property>
        <property name="dispatcherOperation">processConfig</property>
        <property name="dispatcherPassword"></property>
        <property name="dispatcherPort">{http://ws.soap.mss.cdc.gov/}VocabTranslationServiceImpPort</property>
        <property name="dispatcherReplyChannelId">sink</property>
        <property name="dispatcherService">{http://ws.soap.mss.cdc.gov/}VocabTranslationServiceImpService</property>
        <property name="dispatcherSoapAction"></property>
        <property name="dispatcherUseAuthentication">0</property>
        <property name="dispatcherUseMtom">0</property>
        <property name="dispatcherUsername"></property>
        <property name="dispatcherWsdlCacheId"></property>
        <property name="dispatcherWsdlOperations">&lt;list&gt;
  &lt;string&gt;loadCache&lt;/string&gt;
  &lt;string&gt;processConfig&lt;/string&gt;
  &lt;string&gt;translate&lt;/string&gt;
&lt;/list&gt;</property>
        <property name="dispatcherWsdlUrl">http://localhost:8080/mss-services/TranslationService?wsdl</property>
        <property name="host">localhost:8080/mss-services/TranslationService?wsdl</property>
        <property name="queuePollInterval">200</property>
        <property name="reconnectMillisecs">10000</property>
        <property name="rotateQueue">0</property>
        <property name="usePersistentQueues">0</property>
      </properties>
      <transformer>
        <steps/>
        <inboundTemplate encoding="base64"></inboundTemplate>
        <inboundProtocol>HL7V2</inboundProtocol>
        <outboundProtocol>HL7V2</outboundProtocol>
        <inboundProperties>
          <property name="convertLFtoCR">true</property>
          <property name="handleRepetitions">true</property>
          <property name="handleSubcomponents">false</property>
          <property name="stripNamespaces">true</property>
          <property name="useStrictParser">false</property>
          <property name="useStrictValidation">false</property>
        </inboundProperties>
        <outboundProperties>
          <property name="convertLFtoCR">true</property>
          <property name="handleRepetitions">false</property>
          <property name="handleSubcomponents">false</property>
          <property name="stripNamespaces">true</property>
          <property name="useStrictParser">false</property>
          <property name="useStrictValidation">false</property>
        </outboundProperties>
      </transformer>
      <filter>
        <rules>
          <rule>
            <sequenceNumber>0</sequenceNumber>
            <name>Filter call to VocabTranslationService based on ComponentRoutingService configuration</name>
            <data class="map">
              <entry>
                <string>Script</string>
                <string>var retval = false;

if ($(&apos;vocabTranslation&apos;) != &apos;true&apos;)
{
  logger.info(&quot;Bypassing VocabTranslationService call based on component routing configuration&quot;);
}
else if ($(&apos;hubHost&apos;) != $(&apos;receivingFacilityHubHost&apos;))
{
  logger.info(&quot;Bypassing VocabTranslationService since msg is not yet at Destination Facility&quot;);
}
else if ($(&apos;componentErrors&apos;).length() &gt; 0)
{&#xd;  logger.info(&quot;Bypassing VocabTranslationService call because of prior errors: &quot; + $(&apos;componentErrors&apos;));
}
else
{
  logger.info(&quot;Calling VocabTranslationService&quot;);
  retval = true;
}

if (retval)
{
  channelMap.put(&apos;vocabTranslationCallStatus&apos;, &apos;CALLED&apos;);
}
else
{
  channelMap.put(&apos;vocabTranslationCallStatus&apos;, &apos;BYPASSED&apos;);
}

return retval;</string>
              </entry>
            </data>
            <type>JavaScript</type>
            <script>var retval = false;

if ($(&apos;vocabTranslation&apos;) != &apos;true&apos;)
{
  logger.info(&quot;Bypassing VocabTranslationService call based on component routing configuration&quot;);
}
else if ($(&apos;hubHost&apos;) != $(&apos;receivingFacilityHubHost&apos;))
{
  logger.info(&quot;Bypassing VocabTranslationService since msg is not yet at Destination Facility&quot;);
}
else if ($(&apos;componentErrors&apos;).length() &gt; 0)
{&#xd;  logger.info(&quot;Bypassing VocabTranslationService call because of prior errors: &quot; + $(&apos;componentErrors&apos;));
}
else
{
  logger.info(&quot;Calling VocabTranslationService&quot;);
  retval = true;
}

if (retval)
{
  channelMap.put(&apos;vocabTranslationCallStatus&apos;, &apos;CALLED&apos;);
}
else
{
  channelMap.put(&apos;vocabTranslationCallStatus&apos;, &apos;BYPASSED&apos;);
}

return retval;</script>
            <operator>NONE</operator>
          </rule>
        </rules>
      </filter>
      <transportName>Web Service Sender</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <version>2.1.1.5490</version>
    </connector>
    <connector>
      <name>Process VocabTranslationService Response</name>
      <properties>
        <property name="DataType">Channel Writer</property>
        <property name="host">sink</property>
        <property name="synchronised">0</property>
        <property name="template">${message.encodedData}</property>
      </properties>
      <transformer>
        <steps>
          <step>
            <sequenceNumber>0</sequenceNumber>
            <name>process VocabTranslationService web service response</name>
            <script>try
{
  logger.info(&quot;Processing VocabTranslationService web svc response&quot;);

  var resp = new XML(responseMap.get(&apos;Call VocabTranslationService&apos;).getMessage());
  logger.info(resp);

  // If translateResponse/return is not present in response XML, a SOAP fault was likely returned from service call.
  // Record the response to the componentErrors variable and don&apos;t attempt to parse results.
  if (undefined == resp..*::Body..*::translateResponse..*::[&apos;return&apos;])
  {
    logger.error(&quot;No translateResponse/return element found in VocabTranslationService response. Recording response to componentErrors variable: &quot; + resp);
    channelMap.put(&apos;componentErrors&apos;,  $(&apos;componentErrors&apos;) + &quot;VocabTranslationService:\n&quot; + resp + &quot; |\n&quot;);
  }
  else
  {
    var translatedMsg = new XML(resp..*::Body..*::translateResponse..*::[&apos;return&apos;].toString());
    logger.info(&quot;translatedMsg: --&gt;&quot; + translatedMsg + &quot;&lt;--&quot;);

    var translatedXML = SerializerFactory.getHL7Serializer().toXML(translatedMsg.toString() );
    logger.info(&quot;translatedXML:&quot; + translatedXML.toString() );

    var translatedXMLObj = new XML(translatedXML);

    if (msg[&apos;OBX&apos;].length() &gt; 0)
    {
      logger.info(&quot;Found OBX segment, setting std vocab in channel map&quot;);

      channelMap.put(&apos;stdObx31&apos;, translatedXMLObj..*::OBX.*::[&apos;OBX.3&apos;].*::[&apos;OBX.3.1&apos;].toString() );
      channelMap.put(&apos;stdObx32&apos;, translatedXMLObj..*::OBX.*::[&apos;OBX.3&apos;].*::[&apos;OBX.3.2&apos;].toString() );
      channelMap.put(&apos;stdObx33&apos;, translatedXMLObj..*::OBX.*::[&apos;OBX.3&apos;].*::[&apos;OBX.3.3&apos;].toString() );

      logger.info(&quot;stdObx31: &quot; + channelMap.get(&apos;stdObx31&apos;) );
      logger.info(&quot;stdObx32: &quot; + channelMap.get(&apos;stdObx32&apos;) );
      logger.info(&quot;stdObx33: &quot; + channelMap.get(&apos;stdObx33&apos;) );
    }

    if (msg[&apos;RXA&apos;].length() &gt; 0)
    {
      logger.info(&quot;Found RXA segment, setting std vocab in channel map&quot;);

      channelMap.put(&apos;stdRxa51&apos;, translatedXMLObj..*::RXA.*::[&apos;RXA.5&apos;].*::[&apos;RXA.5.1&apos;].toString() );
      channelMap.put(&apos;stdRxa52&apos;, translatedXMLObj..*::RXA.*::[&apos;RXA.5&apos;].*::[&apos;RXA.5.2&apos;].toString() );
      channelMap.put(&apos;stdRxa53&apos;, translatedXMLObj..*::RXA.*::[&apos;RXA.5&apos;].*::[&apos;RXA.5.3&apos;].toString() );

      logger.info(&quot;stdRxa51: &quot; + channelMap.get(&apos;stdRxa51&apos;) );
      logger.info(&quot;stdRxa52: &quot; + channelMap.get(&apos;stdRxa52&apos;) );
      logger.info(&quot;stdRxa53: &quot; + channelMap.get(&apos;stdRxa53&apos;) );
    }
  }

}
catch(e)
{
  logger.error(&quot;Error in Process VocabTranslationService Response Transformer: &quot; + e.message);
  channelMap.put(&apos;componentErrors&apos;,  $(&apos;componentErrors&apos;) + &quot;Process VocabTranslationService Response Transformer:\n&quot; + e.message + &quot; |\n&quot;);
}</script>
            <type>JavaScript</type>
            <data class="map">
              <entry>
                <string>Script</string>
                <string>try
{
  logger.info(&quot;Processing VocabTranslationService web svc response&quot;);

  var resp = new XML(responseMap.get(&apos;Call VocabTranslationService&apos;).getMessage());
  logger.info(resp);

  // If translateResponse/return is not present in response XML, a SOAP fault was likely returned from service call.
  // Record the response to the componentErrors variable and don&apos;t attempt to parse results.
  if (undefined == resp..*::Body..*::translateResponse..*::[&apos;return&apos;])
  {
    logger.error(&quot;No translateResponse/return element found in VocabTranslationService response. Recording response to componentErrors variable: &quot; + resp);
    channelMap.put(&apos;componentErrors&apos;,  $(&apos;componentErrors&apos;) + &quot;VocabTranslationService:\n&quot; + resp + &quot; |\n&quot;);
  }
  else
  {
    var translatedMsg = new XML(resp..*::Body..*::translateResponse..*::[&apos;return&apos;].toString());
    logger.info(&quot;translatedMsg: --&gt;&quot; + translatedMsg + &quot;&lt;--&quot;);

    var translatedXML = SerializerFactory.getHL7Serializer().toXML(translatedMsg.toString() );
    logger.info(&quot;translatedXML:&quot; + translatedXML.toString() );

    var translatedXMLObj = new XML(translatedXML);

    if (msg[&apos;OBX&apos;].length() &gt; 0)
    {
      logger.info(&quot;Found OBX segment, setting std vocab in channel map&quot;);

      channelMap.put(&apos;stdObx31&apos;, translatedXMLObj..*::OBX.*::[&apos;OBX.3&apos;].*::[&apos;OBX.3.1&apos;].toString() );
      channelMap.put(&apos;stdObx32&apos;, translatedXMLObj..*::OBX.*::[&apos;OBX.3&apos;].*::[&apos;OBX.3.2&apos;].toString() );
      channelMap.put(&apos;stdObx33&apos;, translatedXMLObj..*::OBX.*::[&apos;OBX.3&apos;].*::[&apos;OBX.3.3&apos;].toString() );

      logger.info(&quot;stdObx31: &quot; + channelMap.get(&apos;stdObx31&apos;) );
      logger.info(&quot;stdObx32: &quot; + channelMap.get(&apos;stdObx32&apos;) );
      logger.info(&quot;stdObx33: &quot; + channelMap.get(&apos;stdObx33&apos;) );
    }

    if (msg[&apos;RXA&apos;].length() &gt; 0)
    {
      logger.info(&quot;Found RXA segment, setting std vocab in channel map&quot;);

      channelMap.put(&apos;stdRxa51&apos;, translatedXMLObj..*::RXA.*::[&apos;RXA.5&apos;].*::[&apos;RXA.5.1&apos;].toString() );
      channelMap.put(&apos;stdRxa52&apos;, translatedXMLObj..*::RXA.*::[&apos;RXA.5&apos;].*::[&apos;RXA.5.2&apos;].toString() );
      channelMap.put(&apos;stdRxa53&apos;, translatedXMLObj..*::RXA.*::[&apos;RXA.5&apos;].*::[&apos;RXA.5.3&apos;].toString() );

      logger.info(&quot;stdRxa51: &quot; + channelMap.get(&apos;stdRxa51&apos;) );
      logger.info(&quot;stdRxa52: &quot; + channelMap.get(&apos;stdRxa52&apos;) );
      logger.info(&quot;stdRxa53: &quot; + channelMap.get(&apos;stdRxa53&apos;) );
    }
  }

}
catch(e)
{
  logger.error(&quot;Error in Process VocabTranslationService Response Transformer: &quot; + e.message);
  channelMap.put(&apos;componentErrors&apos;,  $(&apos;componentErrors&apos;) + &quot;Process VocabTranslationService Response Transformer:\n&quot; + e.message + &quot; |\n&quot;);
}</string>
              </entry>
            </data>
          </step>
        </steps>
        <inboundTemplate encoding="base64"></inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundProtocol>HL7V2</inboundProtocol>
        <outboundProtocol>HL7V2</outboundProtocol>
        <inboundProperties>
          <property name="convertLFtoCR">true</property>
          <property name="handleRepetitions">true</property>
          <property name="handleSubcomponents">false</property>
          <property name="stripNamespaces">true</property>
          <property name="useStrictParser">false</property>
          <property name="useStrictValidation">false</property>
        </inboundProperties>
        <outboundProperties>
          <property name="convertLFtoCR">true</property>
          <property name="handleRepetitions">false</property>
          <property name="handleSubcomponents">false</property>
          <property name="stripNamespaces">true</property>
          <property name="useStrictParser">false</property>
          <property name="useStrictValidation">false</property>
        </outboundProperties>
      </transformer>
      <filter>
        <rules>
          <rule>
            <sequenceNumber>0</sequenceNumber>
            <name>Filter destination based on component configuration and prior errors</name>
            <data class="map">
              <entry>
                <string>Script</string>
                <string>return ($(&apos;vocabTranslation&apos;) == &apos;true&apos; &amp;&amp; 
        $(&apos;componentErrors&apos;).length() == 0 &amp;&amp;
        $(&apos;hubHost&apos;) == $(&apos;receivingFacilityHubHost&apos;));</string>
              </entry>
            </data>
            <type>JavaScript</type>
            <script>return ($(&apos;vocabTranslation&apos;) == &apos;true&apos; &amp;&amp; 
        $(&apos;componentErrors&apos;).length() == 0 &amp;&amp;
        $(&apos;hubHost&apos;) == $(&apos;receivingFacilityHubHost&apos;));</script>
            <operator>NONE</operator>
          </rule>
        </rules>
      </filter>
      <transportName>Channel Writer</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <version>2.1.1.5490</version>
    </connector>
    <connector>
      <name>Call CodeValidationService</name>
      <properties>
        <property name="DataType">Web Service Sender</property>
        <property name="dispatcherAttachmentContents">&lt;list/&gt;</property>
        <property name="dispatcherAttachmentNames">&lt;list/&gt;</property>
        <property name="dispatcherAttachmentTypes">&lt;list/&gt;</property>
        <property name="dispatcherEnvelope">&lt;soapenv:Envelope xmlns:ns=&quot;http://validator.vocabulary.mss.cdc.gov/&quot; xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&#xd;
  &lt;soapenv:Header/&gt;&#xd;
  &lt;soapenv:Body&gt;&#xd;
    &lt;ns:processMessage&gt;&#xd;
      &lt;arg0&gt;&lt;![CDATA[${message.rawData}]]&gt;&lt;/arg0&gt;
      &lt;arg1&gt;${codeValidationMSSProfile}&lt;/arg1&gt;
      &lt;arg2&gt;HL7 ${msgHL7VersionID}&lt;/arg2&gt;
    &lt;/ns:processMessage&gt;&#xd;
  &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;&#xd;</property>
        <property name="dispatcherOneWay">0</property>
        <property name="dispatcherOperation">processMessage</property>
        <property name="dispatcherPassword"></property>
        <property name="dispatcherPort">{http://validator.vocabulary.mss.cdc.gov/}CodeValidationServicePort</property>
        <property name="dispatcherReplyChannelId">sink</property>
        <property name="dispatcherService">{http://validator.vocabulary.mss.cdc.gov/}CodeValidationServiceService</property>
        <property name="dispatcherSoapAction"></property>
        <property name="dispatcherUseAuthentication">0</property>
        <property name="dispatcherUseMtom">0</property>
        <property name="dispatcherUsername"></property>
        <property name="dispatcherWsdlOperations">&lt;list&gt;
  &lt;string&gt;getFields&lt;/string&gt;
  &lt;string&gt;loadCache&lt;/string&gt;
  &lt;string&gt;processMessage&lt;/string&gt;
  &lt;string&gt;updateCodeSet&lt;/string&gt;
  &lt;string&gt;updateCsXpath&lt;/string&gt;
  &lt;string&gt;updateFields&lt;/string&gt;
  &lt;string&gt;updateProfile&lt;/string&gt;
  &lt;string&gt;updateValueSet&lt;/string&gt;
&lt;/list&gt;</property>
        <property name="dispatcherWsdlUrl">http://localhost:8080/mss-services/CodeValidationService?wsdl</property>
        <property name="host">localhost:8080/mss-services/CodeValidationService?wsdl</property>
        <property name="queuePollInterval">200</property>
        <property name="reconnectMillisecs">10000</property>
        <property name="rotateQueue">0</property>
        <property name="usePersistentQueues">0</property>
      </properties>
      <transformer>
        <steps/>
        <inboundTemplate encoding="base64"></inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundProtocol>HL7V2</inboundProtocol>
        <outboundProtocol>HL7V2</outboundProtocol>
        <inboundProperties>
          <property name="convertLFtoCR">true</property>
          <property name="handleRepetitions">true</property>
          <property name="handleSubcomponents">false</property>
          <property name="stripNamespaces">true</property>
          <property name="useStrictParser">false</property>
          <property name="useStrictValidation">false</property>
        </inboundProperties>
        <outboundProperties>
          <property name="convertLFtoCR">true</property>
          <property name="handleRepetitions">false</property>
          <property name="handleSubcomponents">false</property>
          <property name="stripNamespaces">true</property>
          <property name="useStrictParser">false</property>
          <property name="useStrictValidation">false</property>
        </outboundProperties>
      </transformer>
      <filter>
        <rules>
          <rule>
            <sequenceNumber>0</sequenceNumber>
            <name>Filter call to CodeValidationService based on ComponentRoutingService configuration</name>
            <data class="map">
              <entry>
                <string>Script</string>
                <string>var retval = false;

if ($(&apos;codeValidation&apos;) != &apos;true&apos;)
{
  logger.info(&quot;Bypassing CodeValidationService call based on component routing configuration&quot;);
}
else if ($(&apos;hubHost&apos;) != $(&apos;receivingFacilityHubHost&apos;))
{
  logger.info(&quot;Bypassing CodeValidationService since msg is not yet at Destination Facility&quot;);
}
else if ($(&apos;componentErrors&apos;).length() &gt; 0)
{
  logger.info(&quot;Bypassing CodeValidationService call because of prior errors: &quot; + $(&apos;componentErrors&apos;));
}
else
{
  logger.info(&quot;Calling CodeValidationService&quot;);
  retval = true;
}

if (retval)
{
  channelMap.put(&apos;codeValidationCallStatus&apos;, &apos;CALLED&apos;);
}
else
{
  channelMap.put(&apos;codeValidationCallStatus&apos;, &apos;BYPASSED&apos;);
}

return retval;</string>
              </entry>
            </data>
            <type>JavaScript</type>
            <script>var retval = false;

if ($(&apos;codeValidation&apos;) != &apos;true&apos;)
{
  logger.info(&quot;Bypassing CodeValidationService call based on component routing configuration&quot;);
}
else if ($(&apos;hubHost&apos;) != $(&apos;receivingFacilityHubHost&apos;))
{
  logger.info(&quot;Bypassing CodeValidationService since msg is not yet at Destination Facility&quot;);
}
else if ($(&apos;componentErrors&apos;).length() &gt; 0)
{
  logger.info(&quot;Bypassing CodeValidationService call because of prior errors: &quot; + $(&apos;componentErrors&apos;));
}
else
{
  logger.info(&quot;Calling CodeValidationService&quot;);
  retval = true;
}

if (retval)
{
  channelMap.put(&apos;codeValidationCallStatus&apos;, &apos;CALLED&apos;);
}
else
{
  channelMap.put(&apos;codeValidationCallStatus&apos;, &apos;BYPASSED&apos;);
}

return retval;</script>
            <operator>NONE</operator>
          </rule>
        </rules>
      </filter>
      <transportName>Web Service Sender</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <version>2.1.1.5490</version>
    </connector>
    <connector>
      <name>Process CodeValidationService Response</name>
      <properties>
        <property name="DataType">Channel Writer</property>
        <property name="host">sink</property>
        <property name="synchronised">0</property>
        <property name="template">${message.encodedData}</property>
      </properties>
      <transformer>
        <steps>
          <step>
            <sequenceNumber>0</sequenceNumber>
            <name>process CodeValidationService web service response</name>
            <script>try
{
  logger.info(&quot;Processing CodeValidationService web svc response&quot;);

  var resp = new XML(responseMap.get(&apos;Call CodeValidationService&apos;).getMessage());
  logger.info(resp);

  // If processMessageResponse/return is not present in response XML, a SOAP fault was likely returned from service call.
  // Record the response to the componentErrors variable and don&apos;t attempt to parse results.
  if (undefined == resp..*::Body..*::processMessageResponse..*::[&apos;return&apos;])
  {
    logger.error(&quot;No processMessageResponse/return element found in CodeValidationService response. Recording response to componentErrors variable: &quot; + resp);
    channelMap.put(&apos;componentErrors&apos;,  $(&apos;componentErrors&apos;) + &quot;CodeValidationService:\n&quot; + resp + &quot; |\n&quot;);
  }
  else
  {
    var xml = new XML(resp..*::Body..*::processMessageResponse..*::[&apos;return&apos;].toString());
    logger.info(&quot;XML: &quot; + xml.toString() );

    var errors = xml.field.(status == &quot;INVALID&quot;).errormessage.toString();

    if (errors.length &gt; 0)
    {
      logger.error(&quot;CodeValidationService validation error: &quot; + errors);
      channelMap.put(&apos;componentErrors&apos;,  $(&apos;componentErrors&apos;) + &quot;CodeValidationService:\n&quot; + errors + &quot; |\n&quot;);
    }
  }

}
catch(e)
{
  logger.error(&quot;Error in Process CodeValidationService Response Transformer: &quot; + e.message);
  channelMap.put(&apos;componentErrors&apos;,  $(&apos;componentErrors&apos;) + &quot;Process CodeValidationService Response Transformer:\n&quot; + e.message + &quot; |\n&quot;);
}</script>
            <type>JavaScript</type>
            <data class="map">
              <entry>
                <string>Script</string>
                <string>try
{
  logger.info(&quot;Processing CodeValidationService web svc response&quot;);

  var resp = new XML(responseMap.get(&apos;Call CodeValidationService&apos;).getMessage());
  logger.info(resp);

  // If processMessageResponse/return is not present in response XML, a SOAP fault was likely returned from service call.
  // Record the response to the componentErrors variable and don&apos;t attempt to parse results.
  if (undefined == resp..*::Body..*::processMessageResponse..*::[&apos;return&apos;])
  {
    logger.error(&quot;No processMessageResponse/return element found in CodeValidationService response. Recording response to componentErrors variable: &quot; + resp);
    channelMap.put(&apos;componentErrors&apos;,  $(&apos;componentErrors&apos;) + &quot;CodeValidationService:\n&quot; + resp + &quot; |\n&quot;);
  }
  else
  {
    var xml = new XML(resp..*::Body..*::processMessageResponse..*::[&apos;return&apos;].toString());
    logger.info(&quot;XML: &quot; + xml.toString() );

    var errors = xml.field.(status == &quot;INVALID&quot;).errormessage.toString();

    if (errors.length &gt; 0)
    {
      logger.error(&quot;CodeValidationService validation error: &quot; + errors);
      channelMap.put(&apos;componentErrors&apos;,  $(&apos;componentErrors&apos;) + &quot;CodeValidationService:\n&quot; + errors + &quot; |\n&quot;);
    }
  }

}
catch(e)
{
  logger.error(&quot;Error in Process CodeValidationService Response Transformer: &quot; + e.message);
  channelMap.put(&apos;componentErrors&apos;,  $(&apos;componentErrors&apos;) + &quot;Process CodeValidationService Response Transformer:\n&quot; + e.message + &quot; |\n&quot;);
}</string>
              </entry>
            </data>
          </step>
        </steps>
        <inboundTemplate encoding="base64"></inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundProtocol>HL7V2</inboundProtocol>
        <outboundProtocol>HL7V2</outboundProtocol>
        <inboundProperties>
          <property name="convertLFtoCR">true</property>
          <property name="handleRepetitions">true</property>
          <property name="handleSubcomponents">false</property>
          <property name="stripNamespaces">true</property>
          <property name="useStrictParser">false</property>
          <property name="useStrictValidation">false</property>
        </inboundProperties>
        <outboundProperties>
          <property name="convertLFtoCR">true</property>
          <property name="handleRepetitions">false</property>
          <property name="handleSubcomponents">false</property>
          <property name="stripNamespaces">true</property>
          <property name="useStrictParser">false</property>
          <property name="useStrictValidation">false</property>
        </outboundProperties>
      </transformer>
      <filter>
        <rules>
          <rule>
            <sequenceNumber>0</sequenceNumber>
            <name>Filter destination based on component configuration and prior errors</name>
            <data class="map">
              <entry>
                <string>Script</string>
                <string>return ($(&apos;codeValidation&apos;) == &apos;true&apos; &amp;&amp; 
        $(&apos;componentErrors&apos;).length() == 0 &amp;&amp;
        $(&apos;hubHost&apos;) == $(&apos;receivingFacilityHubHost&apos;));</string>
              </entry>
            </data>
            <type>JavaScript</type>
            <script>return ($(&apos;codeValidation&apos;) == &apos;true&apos; &amp;&amp; 
        $(&apos;componentErrors&apos;).length() == 0 &amp;&amp;
        $(&apos;hubHost&apos;) == $(&apos;receivingFacilityHubHost&apos;));</script>
            <operator>NONE</operator>
          </rule>
        </rules>
      </filter>
      <transportName>Channel Writer</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <version>2.1.1.5490</version>
    </connector>
    <connector>
      <name>Call SubscriptionService</name>
      <properties>
        <property name="DataType">Web Service Sender</property>
        <property name="dispatcherAttachmentContents">&lt;list/&gt;</property>
        <property name="dispatcherAttachmentNames">&lt;list/&gt;</property>
        <property name="dispatcherAttachmentTypes">&lt;list/&gt;</property>
        <property name="dispatcherEnvelope">&lt;soapenv:Envelope xmlns:ns=&quot;http://subscription.mss.cdc.gov/&quot; xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&#xd;
  &lt;soapenv:Header/&gt;&#xd;
  &lt;soapenv:Body&gt;&#xd;
    &lt;ns:processMessage&gt;&#xd;
      &lt;!-- arg0: hl7 message to evaluate for subscriptions --&gt;&#xd;
      &lt;arg0&gt;&lt;![CDATA[${message.encodedData}]]&gt;&lt;/arg0&gt;
    &lt;/ns:processMessage&gt;&#xd;
  &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;&#xd;
</property>
        <property name="dispatcherOneWay">0</property>
        <property name="dispatcherOperation">processMessage</property>
        <property name="dispatcherPassword"></property>
        <property name="dispatcherPort">{http://subscription.mss.cdc.gov/}SubscriptionServicePort</property>
        <property name="dispatcherReplyChannelId">sink</property>
        <property name="dispatcherService">{http://subscription.mss.cdc.gov/}SubscriptionServiceService</property>
        <property name="dispatcherSoapAction"></property>
        <property name="dispatcherUseAuthentication">0</property>
        <property name="dispatcherUseMtom">0</property>
        <property name="dispatcherUsername"></property>
        <property name="dispatcherWsdlOperations">&lt;list&gt;
  &lt;string&gt;processMessage&lt;/string&gt;
&lt;/list&gt;</property>
        <property name="dispatcherWsdlUrl">http://localhost:8080/mss-services/SubscriptionService?wsdl</property>
        <property name="host">localhost:8080/mss-services/SubscriptionService?wsdl</property>
        <property name="queuePollInterval">200</property>
        <property name="reconnectMillisecs">10000</property>
        <property name="rotateQueue">0</property>
        <property name="usePersistentQueues">0</property>
      </properties>
      <transformer>
        <steps>
          <step>
            <sequenceNumber>0</sequenceNumber>
            <name>Apply Vocab Transformation</name>
            <script>// vocab transformation must be applied before subscription svc invoked, since
// subscription svc requires standardized vocabulary

// -- vocab translation --
if ( $(&apos;stdObx31&apos;) != &apos;&apos; )
{
  logger.info(&quot;Applying OBX.3 vocab translation to msg prior to subscription svc call...&quot;);
  msg[&apos;OBX&apos;][&apos;OBX.3&apos;][&apos;OBX.3.1&apos;] = $(&apos;stdObx31&apos;);
  msg[&apos;OBX&apos;][&apos;OBX.3&apos;][&apos;OBX.3.2&apos;] = $(&apos;stdObx32&apos;);
  msg[&apos;OBX&apos;][&apos;OBX.3&apos;][&apos;OBX.3.3&apos;] = $(&apos;stdObx33&apos;);
}

if ( $(&apos;stdRxa51&apos;) != &apos;&apos; )
{
  logger.info(&quot;Applying RXA.5 vocab translation to msg prior to subscription svc call...&quot;);
  msg[&apos;RXA&apos;][&apos;RXA.5&apos;][&apos;RXA.5.1&apos;] = $(&apos;stdRxa51&apos;);
  msg[&apos;RXA&apos;][&apos;RXA.5&apos;][&apos;RXA.5.2&apos;] = $(&apos;stdRxa52&apos;);
  msg[&apos;RXA&apos;][&apos;RXA.5&apos;][&apos;RXA.5.3&apos;] = $(&apos;stdRxa53&apos;);
}</script>
            <type>JavaScript</type>
            <data class="map">
              <entry>
                <string>Script</string>
                <string>// vocab transformation must be applied before subscription svc invoked, since
// subscription svc requires standardized vocabulary

// -- vocab translation --
if ( $(&apos;stdObx31&apos;) != &apos;&apos; )
{
  logger.info(&quot;Applying OBX.3 vocab translation to msg prior to subscription svc call...&quot;);
  msg[&apos;OBX&apos;][&apos;OBX.3&apos;][&apos;OBX.3.1&apos;] = $(&apos;stdObx31&apos;);
  msg[&apos;OBX&apos;][&apos;OBX.3&apos;][&apos;OBX.3.2&apos;] = $(&apos;stdObx32&apos;);
  msg[&apos;OBX&apos;][&apos;OBX.3&apos;][&apos;OBX.3.3&apos;] = $(&apos;stdObx33&apos;);
}

if ( $(&apos;stdRxa51&apos;) != &apos;&apos; )
{
  logger.info(&quot;Applying RXA.5 vocab translation to msg prior to subscription svc call...&quot;);
  msg[&apos;RXA&apos;][&apos;RXA.5&apos;][&apos;RXA.5.1&apos;] = $(&apos;stdRxa51&apos;);
  msg[&apos;RXA&apos;][&apos;RXA.5&apos;][&apos;RXA.5.2&apos;] = $(&apos;stdRxa52&apos;);
  msg[&apos;RXA&apos;][&apos;RXA.5&apos;][&apos;RXA.5.3&apos;] = $(&apos;stdRxa53&apos;);
}</string>
              </entry>
            </data>
          </step>
        </steps>
        <inboundTemplate encoding="base64"></inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundProtocol>HL7V2</inboundProtocol>
        <outboundProtocol>HL7V2</outboundProtocol>
        <inboundProperties>
          <property name="convertLFtoCR">true</property>
          <property name="handleRepetitions">true</property>
          <property name="handleSubcomponents">false</property>
          <property name="stripNamespaces">true</property>
          <property name="useStrictParser">false</property>
          <property name="useStrictValidation">false</property>
        </inboundProperties>
        <outboundProperties>
          <property name="convertLFtoCR">true</property>
          <property name="handleRepetitions">false</property>
          <property name="handleSubcomponents">false</property>
          <property name="stripNamespaces">true</property>
          <property name="useStrictParser">false</property>
          <property name="useStrictValidation">false</property>
        </outboundProperties>
      </transformer>
      <filter>
        <rules>
          <rule>
            <sequenceNumber>0</sequenceNumber>
            <name>Filter call to SubscriptionService based on ComponentRoutingService configuration</name>
            <data class="map">
              <entry>
                <string>Script</string>
                <string>var retval = false;

if ($(&apos;subscription&apos;) != &apos;true&apos;)
{
  logger.info(&quot;Bypassing SubscriptionService call based on component routing configuration&quot;);
}
else if ($(&apos;hubHost&apos;) != $(&apos;receivingFacilityHubHost&apos;))
{
  logger.info(&quot;Bypassing SubscriptionService since msg is not yet at Destination Facility&quot;);
}
else if ($(&apos;componentErrors&apos;).length() &gt; 0)
{
  logger.info(&quot;Bypassing SubscriptionService call because of prior errors: &quot; + $(&apos;componentErrors&apos;));
}
else
{
  logger.info(&quot;Calling SubscriptionService&quot;);
  retval = true;
}

if (retval)
{
  channelMap.put(&apos;subscriptionCallStatus&apos;, &apos;CALLED&apos;);
}
else
{
  channelMap.put(&apos;subscriptionCallStatus&apos;, &apos;BYPASSED&apos;);
}

return retval;</string>
              </entry>
            </data>
            <type>JavaScript</type>
            <script>var retval = false;

if ($(&apos;subscription&apos;) != &apos;true&apos;)
{
  logger.info(&quot;Bypassing SubscriptionService call based on component routing configuration&quot;);
}
else if ($(&apos;hubHost&apos;) != $(&apos;receivingFacilityHubHost&apos;))
{
  logger.info(&quot;Bypassing SubscriptionService since msg is not yet at Destination Facility&quot;);
}
else if ($(&apos;componentErrors&apos;).length() &gt; 0)
{
  logger.info(&quot;Bypassing SubscriptionService call because of prior errors: &quot; + $(&apos;componentErrors&apos;));
}
else
{
  logger.info(&quot;Calling SubscriptionService&quot;);
  retval = true;
}

if (retval)
{
  channelMap.put(&apos;subscriptionCallStatus&apos;, &apos;CALLED&apos;);
}
else
{
  channelMap.put(&apos;subscriptionCallStatus&apos;, &apos;BYPASSED&apos;);
}

return retval;</script>
            <operator>NONE</operator>
          </rule>
        </rules>
      </filter>
      <transportName>Web Service Sender</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <version>2.1.1.5490</version>
    </connector>
    <connector>
      <name>Process SubscriptionService Response</name>
      <properties>
        <property name="DataType">Channel Writer</property>
        <property name="host">sink</property>
        <property name="synchronised">0</property>
        <property name="template">${message.encodedData}</property>
      </properties>
      <transformer>
        <steps>
          <step>
            <sequenceNumber>0</sequenceNumber>
            <name>process SubscriptionService web service response</name>
            <script>try
{
  logger.info(&quot;Processing SubscriptionService web svc response&quot;);

  var resp = new XML(responseMap.get(&apos;Call SubscriptionService&apos;).getMessage());
  logger.info(resp);

  // If processMessageResponse/return is not present in response XML, a SOAP fault was likely returned from service call.
  // Record the response to the componentErrors variable and don&apos;t attempt to parse results.
  if (undefined == resp..*::Body..*::processMessageResponse..*::[&apos;return&apos;])
  {
    logger.error(&quot;No processMessageResponse/return element found in SubscriptionService response. Recording response to componentErrors variable: &quot; + resp);
    channelMap.put(&apos;componentErrors&apos;,  $(&apos;componentErrors&apos;) + &quot;SubscriptionService:\n&quot; + resp + &quot; |\n&quot;);
  }
  else
  {
    var xml = new XML(resp..*::Body..*::processMessageResponse..*::[&apos;return&apos;].toString());
    logger.info(&quot;XML: &quot; + xml.toString() );

    var subName = xml.rules.destinationaddress.toString();

    if (subName.length &gt; 0)
    {
      logger.info(&quot;Subscription criteria met for subscription: &quot; + subName);
      channelMap.put(&apos;subscriptionName&apos;, subName );

      var subRuleName = xml.rules.rulename.toString();
      logger.info(&quot;Rule name: &quot; + subRuleName);

      channelMap.put(&apos;subscriptionRuleName&apos;, subRuleName );

      // Determine subscription descriptive name based on short name.  This is used
      // in email alert.
      var subscriptionDesc;
      if (subName == &quot;SAL&quot;) 
      {
        subscriptionDesc = &quot;Salmonellosis&quot;;
      }
      else if (subName == &quot;HEP&quot;)
      {
        subscriptionDesc = &quot;Hepatitis C&quot;;
      }
      else if (subName == &quot;FLU&quot;)
      {
        subscriptionDesc = &quot;Influenza&quot;;
      }  
      else if (subName == &quot;ADT&quot;)
      {
        subscriptionDesc = &quot;ADT&quot;;
      }
      else if (subName == &quot;IMM&quot;)
      {
        subscriptionDesc = &quot;Immunization&quot;;
      }
      else if (subName == &quot;DOH1&quot;)
      {
        subscriptionDesc = &quot;Electronic Test Order &amp; Result (ETOR)&quot;;
      }
      else 
      {
        subscriptionDesc = &quot;Unkonwn subscription: &quot; + subName;
      }
    
      channelMap.put(&apos;subscriptionDesc&apos;, subscriptionDesc );

      channelMap.put(&apos;obx51&apos;, msg[&apos;OBX&apos;][&apos;OBX.5&apos;][&apos;OBX.5.1&apos;].toString() );
      channelMap.put(&apos;obx52&apos;, msg[&apos;OBX&apos;][&apos;OBX.5&apos;][&apos;OBX.5.2&apos;].toString() );

      channelMap.put(&apos;placerOrderNumberEntityID&apos;, msg[&apos;OBR&apos;][&apos;OBR.2&apos;][&apos;OBR.2.1&apos;].toString() );                                  

      logger.info(&quot;Rule name: &quot; + subRuleName);
    }
    else
    {
      logger.info(&quot;No subscriptions for msg.&quot;);
    }
  }

}
catch(e)
{
  logger.error(&quot;Error in Process SubscriptionService Response Transformer: &quot; + e.message);
  channelMap.put(&apos;componentErrors&apos;,  $(&apos;componentErrors&apos;) + &quot;Process SubscriptionService Response Transformer:\n&quot; + e.message + &quot; |\n&quot;);
}</script>
            <type>JavaScript</type>
            <data class="map">
              <entry>
                <string>Script</string>
                <string>try
{
  logger.info(&quot;Processing SubscriptionService web svc response&quot;);

  var resp = new XML(responseMap.get(&apos;Call SubscriptionService&apos;).getMessage());
  logger.info(resp);

  // If processMessageResponse/return is not present in response XML, a SOAP fault was likely returned from service call.
  // Record the response to the componentErrors variable and don&apos;t attempt to parse results.
  if (undefined == resp..*::Body..*::processMessageResponse..*::[&apos;return&apos;])
  {
    logger.error(&quot;No processMessageResponse/return element found in SubscriptionService response. Recording response to componentErrors variable: &quot; + resp);
    channelMap.put(&apos;componentErrors&apos;,  $(&apos;componentErrors&apos;) + &quot;SubscriptionService:\n&quot; + resp + &quot; |\n&quot;);
  }
  else
  {
    var xml = new XML(resp..*::Body..*::processMessageResponse..*::[&apos;return&apos;].toString());
    logger.info(&quot;XML: &quot; + xml.toString() );

    var subName = xml.rules.destinationaddress.toString();

    if (subName.length &gt; 0)
    {
      logger.info(&quot;Subscription criteria met for subscription: &quot; + subName);
      channelMap.put(&apos;subscriptionName&apos;, subName );

      var subRuleName = xml.rules.rulename.toString();
      logger.info(&quot;Rule name: &quot; + subRuleName);

      channelMap.put(&apos;subscriptionRuleName&apos;, subRuleName );

      // Determine subscription descriptive name based on short name.  This is used
      // in email alert.
      var subscriptionDesc;
      if (subName == &quot;SAL&quot;) 
      {
        subscriptionDesc = &quot;Salmonellosis&quot;;
      }
      else if (subName == &quot;HEP&quot;)
      {
        subscriptionDesc = &quot;Hepatitis C&quot;;
      }
      else if (subName == &quot;FLU&quot;)
      {
        subscriptionDesc = &quot;Influenza&quot;;
      }  
      else if (subName == &quot;ADT&quot;)
      {
        subscriptionDesc = &quot;ADT&quot;;
      }
      else if (subName == &quot;IMM&quot;)
      {
        subscriptionDesc = &quot;Immunization&quot;;
      }
      else if (subName == &quot;DOH1&quot;)
      {
        subscriptionDesc = &quot;Electronic Test Order &amp; Result (ETOR)&quot;;
      }
      else 
      {
        subscriptionDesc = &quot;Unkonwn subscription: &quot; + subName;
      }
    
      channelMap.put(&apos;subscriptionDesc&apos;, subscriptionDesc );

      channelMap.put(&apos;obx51&apos;, msg[&apos;OBX&apos;][&apos;OBX.5&apos;][&apos;OBX.5.1&apos;].toString() );
      channelMap.put(&apos;obx52&apos;, msg[&apos;OBX&apos;][&apos;OBX.5&apos;][&apos;OBX.5.2&apos;].toString() );

      channelMap.put(&apos;placerOrderNumberEntityID&apos;, msg[&apos;OBR&apos;][&apos;OBR.2&apos;][&apos;OBR.2.1&apos;].toString() );                                  

      logger.info(&quot;Rule name: &quot; + subRuleName);
    }
    else
    {
      logger.info(&quot;No subscriptions for msg.&quot;);
    }
  }

}
catch(e)
{
  logger.error(&quot;Error in Process SubscriptionService Response Transformer: &quot; + e.message);
  channelMap.put(&apos;componentErrors&apos;,  $(&apos;componentErrors&apos;) + &quot;Process SubscriptionService Response Transformer:\n&quot; + e.message + &quot; |\n&quot;);
}</string>
              </entry>
            </data>
          </step>
        </steps>
        <inboundTemplate encoding="base64"></inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundProtocol>HL7V2</inboundProtocol>
        <outboundProtocol>HL7V2</outboundProtocol>
        <inboundProperties>
          <property name="convertLFtoCR">true</property>
          <property name="handleRepetitions">true</property>
          <property name="handleSubcomponents">false</property>
          <property name="stripNamespaces">true</property>
          <property name="useStrictParser">false</property>
          <property name="useStrictValidation">false</property>
        </inboundProperties>
        <outboundProperties>
          <property name="convertLFtoCR">true</property>
          <property name="handleRepetitions">false</property>
          <property name="handleSubcomponents">false</property>
          <property name="stripNamespaces">true</property>
          <property name="useStrictParser">false</property>
          <property name="useStrictValidation">false</property>
        </outboundProperties>
      </transformer>
      <filter>
        <rules>
          <rule>
            <sequenceNumber>0</sequenceNumber>
            <name>Filter destination based on component configuration and prior errors</name>
            <data class="map">
              <entry>
                <string>Script</string>
                <string>return ($(&apos;subscription&apos;) == &apos;true&apos; &amp;&amp; 
        $(&apos;componentErrors&apos;).length() == 0 &amp;&amp;
        $(&apos;hubHost&apos;) == $(&apos;receivingFacilityHubHost&apos;));</string>
              </entry>
            </data>
            <type>JavaScript</type>
            <script>return ($(&apos;subscription&apos;) == &apos;true&apos; &amp;&amp; 
        $(&apos;componentErrors&apos;).length() == 0 &amp;&amp;
        $(&apos;hubHost&apos;) == $(&apos;receivingFacilityHubHost&apos;));</script>
            <operator>NONE</operator>
          </rule>
        </rules>
      </filter>
      <transportName>Channel Writer</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <version>2.1.1.5490</version>
    </connector>
    <connector>
      <name>Call BioSenseLinker</name>
      <properties>
        <property name="DataType">HTTP Sender</property>
        <property name="dispatcherAuthenticationType">Basic</property>
        <property name="dispatcherCharset">UTF-8</property>
        <property name="dispatcherContent"></property>
        <property name="dispatcherContentType">text/plain</property>
        <property name="dispatcherHeaders">&lt;properties/&gt;</property>
        <property name="dispatcherIncludeHeadersInResponse">0</property>
        <property name="dispatcherMethod">get</property>
        <property name="dispatcherMultipart">0</property>
        <property name="dispatcherParameters">&lt;properties&gt;
  &lt;property name=&quot;dsPatientAssigningAuthority&quot;&gt;${patientAssigningAuthority}&lt;/property&gt;
  &lt;property name=&quot;dsPatientId&quot;&gt;${patientID}&lt;/property&gt;
  &lt;property name=&quot;dsPatientIdType&quot;&gt;${patientIDType}&lt;/property&gt;
  &lt;property name=&quot;dsVisitAssigningAuthority&quot;&gt;${visitAssigningAuthority}&lt;/property&gt;
  &lt;property name=&quot;dsVisitId&quot;&gt;${visitID}&lt;/property&gt;
  &lt;property name=&quot;dsVisitIdType&quot;&gt;${visitIDType}&lt;/property&gt;
  &lt;property name=&quot;firstName&quot;&gt;${patientFName}&lt;/property&gt;
  &lt;property name=&quot;lastName&quot;&gt;${patientLName}&lt;/property&gt;
  &lt;property name=&quot;messageType&quot;&gt;${msgTriggerEvent}&lt;/property&gt;
  &lt;property name=&quot;middleName&quot;&gt;${patientMiddle}&lt;/property&gt;
&lt;/properties&gt;</property>
        <property name="dispatcherPassword">Admin</property>
        <property name="dispatcherReplyChannelId">sink</property>
        <property name="dispatcherSocketTimeout">30000</property>
        <property name="dispatcherUseAuthentication">1</property>
        <property name="dispatcherUsername">Admin</property>
        <property name="host">http://localhost:8500/bioSense/Identifiers</property>
        <property name="queuePollInterval">200</property>
        <property name="reconnectMillisecs">10000</property>
        <property name="rotateQueue">0</property>
        <property name="usePersistentQueues">0</property>
      </properties>
      <transformer>
        <steps>
          <step>
            <sequenceNumber>0</sequenceNumber>
            <name>Extract BioSenseLinker input parameters from message</name>
            <script>try
{
  SerializerFactory.getHL7Serializer().toXML(message);

  logger.info(&quot;BioSenseLinker&quot;);

  // &quot;messageType&quot; input parameter is actually MSH.9.2: $(&apos;msgTriggerEvent&apos;)
  logger.info(&quot;Setting patientFName=&quot; + msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.2&apos;].toString() );
  channelMap.put(&apos;patientFName&apos;, msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.2&apos;].toString() );

  logger.info(&quot;Setting patientLName=&quot; + msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.1&apos;].toString() );
  channelMap.put(&apos;patientLName&apos;, msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.1&apos;].toString() );

  logger.info(&quot;Setting patientMiddle=&quot; + msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.3&apos;].toString() );
  channelMap.put(&apos;patientMiddle&apos;, msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.3&apos;].toString() );

  logger.info(&quot;Setting patientID=&quot; + msg[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.1&apos;].toString() );
  channelMap.put(&apos;patientID&apos;, msg[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.1&apos;].toString() );

  logger.info(&quot;Setting patientIDType=MRN&quot;);
  channelMap.put(&apos;patientIDType&apos;, &quot;MRN&quot;);

  logger.info(&quot;Setting patientAssigningAuthority=&quot; + msg[&apos;MSH&apos;][&apos;MSH.4&apos;][&apos;MSH.4.2&apos;].toString() );
  channelMap.put(&apos;patientAssigningAuthority&apos;, msg[&apos;MSH&apos;][&apos;MSH.4&apos;][&apos;MSH.4.2&apos;].toString() );

  logger.info(&quot;Setting visitID=&quot; + msg[&apos;PV1&apos;][&apos;PV1.19&apos;][&apos;PV1.19.1&apos;].toString() );
  channelMap.put(&apos;visitID&apos;, msg[&apos;PV1&apos;][&apos;PV1.19&apos;][&apos;PV1.19.1&apos;].toString() );

  logger.info(&quot;Setting visitIDType=AN&quot;);
  channelMap.put(&apos;visitIDType&apos;, &quot;AN&quot;);

  logger.info(&quot;Setting visitAssigningAuthority=&quot; + msg[&apos;MSH&apos;][&apos;MSH.4&apos;][&apos;MSH.4.2&apos;].toString() );
  channelMap.put(&apos;visitAssigningAuthority&apos;, msg[&apos;MSH&apos;][&apos;MSH.4&apos;][&apos;MSH.4.2&apos;].toString() );
}
catch(e)
{
  logger.error(&quot;Error in Call BioSenseLinker Transformer: &quot; + e.message);
  channelMap.put(&apos;componentErrors&apos;,  $(&apos;componentErrors&apos;) + &quot;Call BioSenseLinker Transformer:\n&quot; + e.message + &quot; |\n&quot;);
}</script>
            <type>JavaScript</type>
            <data class="map">
              <entry>
                <string>Script</string>
                <string>try
{
  SerializerFactory.getHL7Serializer().toXML(message);

  logger.info(&quot;BioSenseLinker&quot;);

  // &quot;messageType&quot; input parameter is actually MSH.9.2: $(&apos;msgTriggerEvent&apos;)
  logger.info(&quot;Setting patientFName=&quot; + msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.2&apos;].toString() );
  channelMap.put(&apos;patientFName&apos;, msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.2&apos;].toString() );

  logger.info(&quot;Setting patientLName=&quot; + msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.1&apos;].toString() );
  channelMap.put(&apos;patientLName&apos;, msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.1&apos;].toString() );

  logger.info(&quot;Setting patientMiddle=&quot; + msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.3&apos;].toString() );
  channelMap.put(&apos;patientMiddle&apos;, msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.3&apos;].toString() );

  logger.info(&quot;Setting patientID=&quot; + msg[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.1&apos;].toString() );
  channelMap.put(&apos;patientID&apos;, msg[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.1&apos;].toString() );

  logger.info(&quot;Setting patientIDType=MRN&quot;);
  channelMap.put(&apos;patientIDType&apos;, &quot;MRN&quot;);

  logger.info(&quot;Setting patientAssigningAuthority=&quot; + msg[&apos;MSH&apos;][&apos;MSH.4&apos;][&apos;MSH.4.2&apos;].toString() );
  channelMap.put(&apos;patientAssigningAuthority&apos;, msg[&apos;MSH&apos;][&apos;MSH.4&apos;][&apos;MSH.4.2&apos;].toString() );

  logger.info(&quot;Setting visitID=&quot; + msg[&apos;PV1&apos;][&apos;PV1.19&apos;][&apos;PV1.19.1&apos;].toString() );
  channelMap.put(&apos;visitID&apos;, msg[&apos;PV1&apos;][&apos;PV1.19&apos;][&apos;PV1.19.1&apos;].toString() );

  logger.info(&quot;Setting visitIDType=AN&quot;);
  channelMap.put(&apos;visitIDType&apos;, &quot;AN&quot;);

  logger.info(&quot;Setting visitAssigningAuthority=&quot; + msg[&apos;MSH&apos;][&apos;MSH.4&apos;][&apos;MSH.4.2&apos;].toString() );
  channelMap.put(&apos;visitAssigningAuthority&apos;, msg[&apos;MSH&apos;][&apos;MSH.4&apos;][&apos;MSH.4.2&apos;].toString() );
}
catch(e)
{
  logger.error(&quot;Error in Call BioSenseLinker Transformer: &quot; + e.message);
  channelMap.put(&apos;componentErrors&apos;,  $(&apos;componentErrors&apos;) + &quot;Call BioSenseLinker Transformer:\n&quot; + e.message + &quot; |\n&quot;);
}</string>
              </entry>
            </data>
          </step>
        </steps>
        <inboundTemplate encoding="base64"></inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundProtocol>HL7V2</inboundProtocol>
        <outboundProtocol>HL7V2</outboundProtocol>
        <inboundProperties>
          <property name="convertLFtoCR">true</property>
          <property name="handleRepetitions">true</property>
          <property name="handleSubcomponents">false</property>
          <property name="stripNamespaces">true</property>
          <property name="useStrictParser">false</property>
          <property name="useStrictValidation">false</property>
        </inboundProperties>
        <outboundProperties>
          <property name="convertLFtoCR">true</property>
          <property name="handleRepetitions">false</property>
          <property name="handleSubcomponents">false</property>
          <property name="stripNamespaces">true</property>
          <property name="useStrictParser">false</property>
          <property name="useStrictValidation">false</property>
        </outboundProperties>
      </transformer>
      <filter>
        <rules>
          <rule>
            <sequenceNumber>0</sequenceNumber>
            <name>Filter call to BioSenseLinker based on ComponentRoutingService configuration</name>
            <data class="map">
              <entry>
                <string>Script</string>
                <string>var retval = false;

if ($(&apos;anonymization&apos;) != &apos;true&apos;)
{
  logger.info(&quot;Bypassing BioSenseLinker call based on component routing configuration&quot;);
}
// unlike prior components, Linker anonymization takes place at sending facility
else if ($(&apos;hubHost&apos;) != $(&apos;sendingFacilityHubHost&apos;))
{
  logger.info(&quot;Bypassing BioSenseLinker since msg is not at Sending Facility&quot;);
}
else if ($(&apos;componentErrors&apos;).length() &gt; 0)
{
  logger.info(&quot;Bypassing BioSenseLinker call because of prior errors: &quot; + $(&apos;componentErrors&apos;));
}
else
{
  logger.info(&quot;Calling BioSenseLinker to perform anonymization&quot;);
  retval = true;
}

if (retval)
{
  channelMap.put(&apos;anonymizationCallStatus&apos;, &apos;CALLED&apos;);
}
else
{
  channelMap.put(&apos;anonymizationCallStatus&apos;, &apos;BYPASSED&apos;);
}

return retval;</string>
              </entry>
            </data>
            <type>JavaScript</type>
            <script>var retval = false;

if ($(&apos;anonymization&apos;) != &apos;true&apos;)
{
  logger.info(&quot;Bypassing BioSenseLinker call based on component routing configuration&quot;);
}
// unlike prior components, Linker anonymization takes place at sending facility
else if ($(&apos;hubHost&apos;) != $(&apos;sendingFacilityHubHost&apos;))
{
  logger.info(&quot;Bypassing BioSenseLinker since msg is not at Sending Facility&quot;);
}
else if ($(&apos;componentErrors&apos;).length() &gt; 0)
{
  logger.info(&quot;Bypassing BioSenseLinker call because of prior errors: &quot; + $(&apos;componentErrors&apos;));
}
else
{
  logger.info(&quot;Calling BioSenseLinker to perform anonymization&quot;);
  retval = true;
}

if (retval)
{
  channelMap.put(&apos;anonymizationCallStatus&apos;, &apos;CALLED&apos;);
}
else
{
  channelMap.put(&apos;anonymizationCallStatus&apos;, &apos;BYPASSED&apos;);
}

return retval;</script>
            <operator>NONE</operator>
          </rule>
        </rules>
      </filter>
      <transportName>HTTP Sender</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <version>2.1.1.5490</version>
    </connector>
    <connector>
      <name>Process BioSenseLinker Response</name>
      <properties>
        <property name="DataType">Channel Writer</property>
        <property name="host">sink</property>
        <property name="synchronised">0</property>
        <property name="template">${message.encodedData}</property>
      </properties>
      <transformer>
        <steps>
          <step>
            <sequenceNumber>0</sequenceNumber>
            <name>process BioSenseLinker HTTP response</name>
            <script>try
{
  var resp = new XML(responseMap.get(&apos;Call BioSenseLinker&apos;).getMessage());

  // If resp..*::sBioSensePatientId is not present in response XML, an error likely occurred during the service call.
  // Record the response to the componentErrors variable and don&apos;t attempt to parse results.
  if (undefined == resp..*::[&apos;sBioSensePatientId&apos;])
  {
    logger.error(&quot;No sBioSensePatientId element found in BioSenseLinker response. Recording response to componentErrors variable: &quot; + resp);
    channelMap.put(&apos;componentErrors&apos;,  $(&apos;componentErrors&apos;) + &quot;BioSenseLinker:\n&quot; + resp + &quot; |\n&quot;);
  }
  else
  {
    logger.info(&quot;Processing BioSenseLinker response&quot;);
    logger.info(resp);

    var xml = new XML(resp);

    logger.info(&quot;bioSensePatientId=&quot; + xml[&apos;sBioSensePatientId&apos;]);
    logger.info(&quot;bioSenseVisitId=&quot; + xml[&apos;sBioSenseVisitId&apos;]);

    channelMap.put(&apos;bioSensePatientId&apos;, xml[&apos;sBioSensePatientId&apos;]);
    channelMap.put(&apos;bioSenseVisitId&apos;, xml[&apos;sBioSenseVisitId&apos;]);
  }
}
catch(e)
{
  logger.error(&quot;Error in Process BioSenseLinker Response Transformer: &quot; + e.message);
  channelMap.put(&apos;componentErrors&apos;,  $(&apos;componentErrors&apos;) + &quot;Process BioSenseLinker Response Transformer:\n&quot; + e.message + &quot; |\n&quot;);
}</script>
            <type>JavaScript</type>
            <data class="map">
              <entry>
                <string>Script</string>
                <string>try
{
  var resp = new XML(responseMap.get(&apos;Call BioSenseLinker&apos;).getMessage());

  // If resp..*::sBioSensePatientId is not present in response XML, an error likely occurred during the service call.
  // Record the response to the componentErrors variable and don&apos;t attempt to parse results.
  if (undefined == resp..*::[&apos;sBioSensePatientId&apos;])
  {
    logger.error(&quot;No sBioSensePatientId element found in BioSenseLinker response. Recording response to componentErrors variable: &quot; + resp);
    channelMap.put(&apos;componentErrors&apos;,  $(&apos;componentErrors&apos;) + &quot;BioSenseLinker:\n&quot; + resp + &quot; |\n&quot;);
  }
  else
  {
    logger.info(&quot;Processing BioSenseLinker response&quot;);
    logger.info(resp);

    var xml = new XML(resp);

    logger.info(&quot;bioSensePatientId=&quot; + xml[&apos;sBioSensePatientId&apos;]);
    logger.info(&quot;bioSenseVisitId=&quot; + xml[&apos;sBioSenseVisitId&apos;]);

    channelMap.put(&apos;bioSensePatientId&apos;, xml[&apos;sBioSensePatientId&apos;]);
    channelMap.put(&apos;bioSenseVisitId&apos;, xml[&apos;sBioSenseVisitId&apos;]);
  }
}
catch(e)
{
  logger.error(&quot;Error in Process BioSenseLinker Response Transformer: &quot; + e.message);
  channelMap.put(&apos;componentErrors&apos;,  $(&apos;componentErrors&apos;) + &quot;Process BioSenseLinker Response Transformer:\n&quot; + e.message + &quot; |\n&quot;);
}</string>
              </entry>
            </data>
          </step>
        </steps>
        <inboundTemplate encoding="base64"></inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundProtocol>HL7V2</inboundProtocol>
        <outboundProtocol>HL7V2</outboundProtocol>
        <inboundProperties>
          <property name="convertLFtoCR">true</property>
          <property name="handleRepetitions">true</property>
          <property name="handleSubcomponents">false</property>
          <property name="stripNamespaces">true</property>
          <property name="useStrictParser">false</property>
          <property name="useStrictValidation">false</property>
        </inboundProperties>
        <outboundProperties>
          <property name="convertLFtoCR">true</property>
          <property name="handleRepetitions">false</property>
          <property name="handleSubcomponents">false</property>
          <property name="stripNamespaces">true</property>
          <property name="useStrictParser">false</property>
          <property name="useStrictValidation">false</property>
        </outboundProperties>
      </transformer>
      <filter>
        <rules>
          <rule>
            <sequenceNumber>0</sequenceNumber>
            <name>filter processing of BioSenseLinker response</name>
            <data class="map">
              <entry>
                <string>Script</string>
                <string>return ($(&apos;anonymization&apos;) == &apos;true&apos; &amp;&amp; 
        $(&apos;componentErrors&apos;).length() == 0 &amp;&amp;
        $(&apos;hubHost&apos;) == $(&apos;sendingFacilityHubHost&apos;));</string>
              </entry>
            </data>
            <type>JavaScript</type>
            <script>return ($(&apos;anonymization&apos;) == &apos;true&apos; &amp;&amp; 
        $(&apos;componentErrors&apos;).length() == 0 &amp;&amp;
        $(&apos;hubHost&apos;) == $(&apos;sendingFacilityHubHost&apos;));</script>
            <operator>NONE</operator>
          </rule>
        </rules>
      </filter>
      <transportName>Channel Writer</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <version>2.1.1.5490</version>
    </connector>
    <connector>
      <name>Send ACK msg (to PHIX1)</name>
      <properties>
        <property name="DataType">Web Service Sender</property>
        <property name="dispatcherAttachmentContents">&lt;list/&gt;</property>
        <property name="dispatcherAttachmentNames">&lt;list/&gt;</property>
        <property name="dispatcherAttachmentTypes">&lt;list/&gt;</property>
        <property name="dispatcherEnvelope">&lt;soapenv:Envelope xmlns:ns=&quot;http://ws.connectors.connect.mirth.com/&quot; xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&#xd;
  &lt;soapenv:Header/&gt;&#xd;
  &lt;soapenv:Body&gt;&#xd;
    &lt;ns:acceptMessage&gt;&#xd;
      &lt;arg0&gt;&lt;![CDATA[${message.encodedData}]]&gt;&lt;/arg0&gt;
    &lt;/ns:acceptMessage&gt;&#xd;
  &lt;/soapenv:Body&gt;
&lt;/soapenv:Envelope&gt;&#xd;
</property>
        <property name="dispatcherOneWay">0</property>
        <property name="dispatcherOperation">acceptMessage</property>
        <property name="dispatcherPassword"></property>
        <property name="dispatcherPort">{http://ws.connectors.connect.mirth.com/}DefaultAcceptMessagePort</property>
        <property name="dispatcherReplyChannelId">sink</property>
        <property name="dispatcherService">{http://ws.connectors.connect.mirth.com/}DefaultAcceptMessageService</property>
        <property name="dispatcherSoapAction"></property>
        <property name="dispatcherUseAuthentication">0</property>
        <property name="dispatcherUseMtom">0</property>
        <property name="dispatcherUsername"></property>
        <property name="dispatcherWsdlOperations">&lt;list&gt;
  &lt;string&gt;acceptMessage&lt;/string&gt;
&lt;/list&gt;</property>
        <property name="dispatcherWsdlUrl">http://phix1.phiresearchlab.org:8081/services/Mirth?wsdl</property>
        <property name="host">phix1.phiresearchlab.org:8081/services/Mirth?wsdl</property>
        <property name="queuePollInterval">200</property>
        <property name="reconnectMillisecs">10000</property>
        <property name="rotateQueue">0</property>
        <property name="usePersistentQueues">0</property>
      </properties>
      <transformer>
        <steps>
          <step>
            <sequenceNumber>0</sequenceNumber>
            <name>transform OML msg into ACK msg</name>
            <script>try
{
  // build new ACK msg out of incoming OML msg

  // delete non-MSH OML segments
  for each (seg in msg.children() )
  {
    //logger.info(&quot;DEBUG: SEG &quot; + seg.name().toString() );
    if (seg.name().toString() != &apos;MSH&apos;)
    {
      //logger.info(&quot;DEBUG: Deleting SEG &quot; + seg.name().toString() );
      delete msg[seg.name().toString()];
    }
  }

  // Obtain orig sender &amp; receiver values from OML header. 
  var omlSendingAppNSID = msg[&apos;MSH&apos;][&apos;MSH.3&apos;][&apos;MSH.3.1&apos;];
  var omlSendingAppUID = msg[&apos;MSH&apos;][&apos;MSH.3&apos;][&apos;MSH.3.2&apos;];
  var omlSendingAppUIDType = msg[&apos;MSH&apos;][&apos;MSH.3&apos;][&apos;MSH.3.3&apos;];

  var omlSendingFacNSID = msg[&apos;MSH&apos;][&apos;MSH.4&apos;][&apos;MSH.4.1&apos;];
  var omlSendingFacUID = msg[&apos;MSH&apos;][&apos;MSH.4&apos;][&apos;MSH.4.2&apos;];
  var omlSendingFacUIDType = msg[&apos;MSH&apos;][&apos;MSH.4&apos;][&apos;MSH.4.3&apos;];

  var omlRecvAppNSID = msg[&apos;MSH&apos;][&apos;MSH.5&apos;][&apos;MSH.5.1&apos;];
  var omlRecvAppUID = msg[&apos;MSH&apos;][&apos;MSH.5&apos;][&apos;MSH.5.2&apos;];
  var omlRecvAppUIDType = msg[&apos;MSH&apos;][&apos;MSH.5&apos;][&apos;MSH.5.3&apos;];

  var omlRecvFacNSID = msg[&apos;MSH&apos;][&apos;MSH.6&apos;][&apos;MSH.6.1&apos;];
  var omlRecvFacUID = msg[&apos;MSH&apos;][&apos;MSH.6&apos;][&apos;MSH.6.2&apos;];
  var omlRecvFacUIDType = msg[&apos;MSH&apos;][&apos;MSH.6&apos;][&apos;MSH.6.3&apos;];

  var omlCtrlID = msg[&apos;MSH&apos;][&apos;MSH.10&apos;][&apos;MSH.10.1&apos;];

  // Alter MSH contents with ACK-specific contents: Reverse sender and receiver.
  msg[&apos;MSH&apos;][&apos;MSH.3&apos;][&apos;MSH.3.1&apos;] = omlRecvAppNSID;
  msg[&apos;MSH&apos;][&apos;MSH.3&apos;][&apos;MSH.3.2&apos;] = omlRecvAppUID;
  msg[&apos;MSH&apos;][&apos;MSH.3&apos;][&apos;MSH.3.3&apos;] = omlRecvAppUIDType;

  msg[&apos;MSH&apos;][&apos;MSH.4&apos;][&apos;MSH.4.1&apos;] = omlRecvFacNSID;
  msg[&apos;MSH&apos;][&apos;MSH.4&apos;][&apos;MSH.4.2&apos;] = omlRecvFacUID;
  msg[&apos;MSH&apos;][&apos;MSH.4&apos;][&apos;MSH.4.3&apos;] = omlRecvFacUIDType;

  msg[&apos;MSH&apos;][&apos;MSH.5&apos;][&apos;MSH.5.1&apos;] = omlSendingAppNSID;
  msg[&apos;MSH&apos;][&apos;MSH.5&apos;][&apos;MSH.5.2&apos;] = omlSendingAppUID;
  msg[&apos;MSH&apos;][&apos;MSH.5&apos;][&apos;MSH.5.3&apos;] = omlSendingAppUIDType;

  msg[&apos;MSH&apos;][&apos;MSH.6&apos;][&apos;MSH.6.1&apos;] = omlSendingFacNSID;
  msg[&apos;MSH&apos;][&apos;MSH.6&apos;][&apos;MSH.6.2&apos;] = omlSendingFacUID;
  msg[&apos;MSH&apos;][&apos;MSH.6&apos;][&apos;MSH.6.3&apos;] = omlSendingFacUIDType;

  var curDateStamp = DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;); //e.g, 20110623093000
  msg[&apos;MSH&apos;][&apos;MSH.7&apos;] = curDateStamp;
  msg[&apos;MSH&apos;][&apos;MSH.9&apos;] = &quot;ACK^O33^ACK&quot;;
  msg[&apos;MSH&apos;][&apos;MSH.10&apos;] = &quot;2.16.840.1.114222.4.3.2.5.2.7001.&quot; + curDateStamp + &quot;.0000&quot;;

  // add MSA segment
  createSegmentAfter(&apos;MSA&apos;, msg[&apos;MSH&apos;]);
  msg[&apos;MSA&apos;][&apos;MSA.1&apos;] = &quot;AA&quot;;
  msg[&apos;MSA&apos;][&apos;MSA.2&apos;] = omlCtrlID;

}
catch(e)
{
  logger.error(&quot;Error in Send ACK msg Transformer: &quot; + e.message);
  channelMap.put(&apos;componentErrors&apos;,  $(&apos;componentErrors&apos;) + &quot;Send ACK msg Transformer:\n&quot; + e.message + &quot; |\n&quot;);
}</script>
            <type>JavaScript</type>
            <data class="map">
              <entry>
                <string>Script</string>
                <string>try
{
  // build new ACK msg out of incoming OML msg

  // delete non-MSH OML segments
  for each (seg in msg.children() )
  {
    //logger.info(&quot;DEBUG: SEG &quot; + seg.name().toString() );
    if (seg.name().toString() != &apos;MSH&apos;)
    {
      //logger.info(&quot;DEBUG: Deleting SEG &quot; + seg.name().toString() );
      delete msg[seg.name().toString()];
    }
  }

  // Obtain orig sender &amp; receiver values from OML header. 
  var omlSendingAppNSID = msg[&apos;MSH&apos;][&apos;MSH.3&apos;][&apos;MSH.3.1&apos;];
  var omlSendingAppUID = msg[&apos;MSH&apos;][&apos;MSH.3&apos;][&apos;MSH.3.2&apos;];
  var omlSendingAppUIDType = msg[&apos;MSH&apos;][&apos;MSH.3&apos;][&apos;MSH.3.3&apos;];

  var omlSendingFacNSID = msg[&apos;MSH&apos;][&apos;MSH.4&apos;][&apos;MSH.4.1&apos;];
  var omlSendingFacUID = msg[&apos;MSH&apos;][&apos;MSH.4&apos;][&apos;MSH.4.2&apos;];
  var omlSendingFacUIDType = msg[&apos;MSH&apos;][&apos;MSH.4&apos;][&apos;MSH.4.3&apos;];

  var omlRecvAppNSID = msg[&apos;MSH&apos;][&apos;MSH.5&apos;][&apos;MSH.5.1&apos;];
  var omlRecvAppUID = msg[&apos;MSH&apos;][&apos;MSH.5&apos;][&apos;MSH.5.2&apos;];
  var omlRecvAppUIDType = msg[&apos;MSH&apos;][&apos;MSH.5&apos;][&apos;MSH.5.3&apos;];

  var omlRecvFacNSID = msg[&apos;MSH&apos;][&apos;MSH.6&apos;][&apos;MSH.6.1&apos;];
  var omlRecvFacUID = msg[&apos;MSH&apos;][&apos;MSH.6&apos;][&apos;MSH.6.2&apos;];
  var omlRecvFacUIDType = msg[&apos;MSH&apos;][&apos;MSH.6&apos;][&apos;MSH.6.3&apos;];

  var omlCtrlID = msg[&apos;MSH&apos;][&apos;MSH.10&apos;][&apos;MSH.10.1&apos;];

  // Alter MSH contents with ACK-specific contents: Reverse sender and receiver.
  msg[&apos;MSH&apos;][&apos;MSH.3&apos;][&apos;MSH.3.1&apos;] = omlRecvAppNSID;
  msg[&apos;MSH&apos;][&apos;MSH.3&apos;][&apos;MSH.3.2&apos;] = omlRecvAppUID;
  msg[&apos;MSH&apos;][&apos;MSH.3&apos;][&apos;MSH.3.3&apos;] = omlRecvAppUIDType;

  msg[&apos;MSH&apos;][&apos;MSH.4&apos;][&apos;MSH.4.1&apos;] = omlRecvFacNSID;
  msg[&apos;MSH&apos;][&apos;MSH.4&apos;][&apos;MSH.4.2&apos;] = omlRecvFacUID;
  msg[&apos;MSH&apos;][&apos;MSH.4&apos;][&apos;MSH.4.3&apos;] = omlRecvFacUIDType;

  msg[&apos;MSH&apos;][&apos;MSH.5&apos;][&apos;MSH.5.1&apos;] = omlSendingAppNSID;
  msg[&apos;MSH&apos;][&apos;MSH.5&apos;][&apos;MSH.5.2&apos;] = omlSendingAppUID;
  msg[&apos;MSH&apos;][&apos;MSH.5&apos;][&apos;MSH.5.3&apos;] = omlSendingAppUIDType;

  msg[&apos;MSH&apos;][&apos;MSH.6&apos;][&apos;MSH.6.1&apos;] = omlSendingFacNSID;
  msg[&apos;MSH&apos;][&apos;MSH.6&apos;][&apos;MSH.6.2&apos;] = omlSendingFacUID;
  msg[&apos;MSH&apos;][&apos;MSH.6&apos;][&apos;MSH.6.3&apos;] = omlSendingFacUIDType;

  var curDateStamp = DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;); //e.g, 20110623093000
  msg[&apos;MSH&apos;][&apos;MSH.7&apos;] = curDateStamp;
  msg[&apos;MSH&apos;][&apos;MSH.9&apos;] = &quot;ACK^O33^ACK&quot;;
  msg[&apos;MSH&apos;][&apos;MSH.10&apos;] = &quot;2.16.840.1.114222.4.3.2.5.2.7001.&quot; + curDateStamp + &quot;.0000&quot;;

  // add MSA segment
  createSegmentAfter(&apos;MSA&apos;, msg[&apos;MSH&apos;]);
  msg[&apos;MSA&apos;][&apos;MSA.1&apos;] = &quot;AA&quot;;
  msg[&apos;MSA&apos;][&apos;MSA.2&apos;] = omlCtrlID;

}
catch(e)
{
  logger.error(&quot;Error in Send ACK msg Transformer: &quot; + e.message);
  channelMap.put(&apos;componentErrors&apos;,  $(&apos;componentErrors&apos;) + &quot;Send ACK msg Transformer:\n&quot; + e.message + &quot; |\n&quot;);
}</string>
              </entry>
            </data>
          </step>
        </steps>
        <inboundTemplate encoding="base64"></inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundProtocol>HL7V2</inboundProtocol>
        <outboundProtocol>HL7V2</outboundProtocol>
        <inboundProperties>
          <property name="convertLFtoCR">true</property>
          <property name="handleRepetitions">true</property>
          <property name="handleSubcomponents">false</property>
          <property name="stripNamespaces">true</property>
          <property name="useStrictParser">false</property>
          <property name="useStrictValidation">false</property>
        </inboundProperties>
        <outboundProperties>
          <property name="convertLFtoCR">true</property>
          <property name="handleRepetitions">false</property>
          <property name="handleSubcomponents">false</property>
          <property name="stripNamespaces">true</property>
          <property name="useStrictParser">false</property>
          <property name="useStrictValidation">false</property>
        </outboundProperties>
      </transformer>
      <filter>
        <rules>
          <rule>
            <sequenceNumber>0</sequenceNumber>
            <name>filter for 2.6 OML_O33 and MIRTH_WS xport</name>
            <data class="map">
              <entry>
                <string>Script</string>
                <string>var retval = false;

// Unfortunately, this version of Mirth does not seem to support variables inside web service endpoint URLs.
// This outermost conditional filters for phix1.phiresearchlab.org:8081 (PHIX 1) specifically (shouldn&apos;t be necessary).
if ($(&apos;sendingFacilityWebSvcHost&apos;) == &apos;phix1.phiresearchlab.org:8081&apos;)
{

  if ($(&apos;sendingFacilityXportType&apos;) == &apos;MIRTH_WS&apos; &amp;&amp;
      $(&apos;msgType&apos;) == &apos;OML&apos; &amp;&amp;
      $(&apos;msgTriggerEvent&apos;) == &apos;O33&apos; &amp;&amp;
      $(&apos;msgHL7VersionID&apos;) == &apos;2.6&apos; &amp;&amp;
      $(&apos;hubHost&apos;) == $(&apos;receivingFacilityHubHost&apos;))
  {
    if ($(&apos;componentErrors&apos;).length() &gt; 0)
    {
      logger.info(&quot;Bypassing Send ACK because of prior errors: &quot; + $(&apos;componentErrors&apos;));
    }
    else
    {
      logger.info(&quot;Received an 2.6 OML O33 msg. Sending ACK back to original Sending Facility over Mirth WS.&quot;);
      retval = true;
    }
  }

}

if (retval)
{
  channelMap.put(&apos;ackSentStatus&apos;, &apos;SENT VIA WS&apos;);
}
else
{
  channelMap.put(&apos;ackSentStatus&apos;, &apos;BYPASSED&apos;);
}


return retval;</string>
              </entry>
            </data>
            <type>JavaScript</type>
            <script>var retval = false;

// Unfortunately, this version of Mirth does not seem to support variables inside web service endpoint URLs.
// This outermost conditional filters for phix1.phiresearchlab.org:8081 (PHIX 1) specifically (shouldn&apos;t be necessary).
if ($(&apos;sendingFacilityWebSvcHost&apos;) == &apos;phix1.phiresearchlab.org:8081&apos;)
{

  if ($(&apos;sendingFacilityXportType&apos;) == &apos;MIRTH_WS&apos; &amp;&amp;
      $(&apos;msgType&apos;) == &apos;OML&apos; &amp;&amp;
      $(&apos;msgTriggerEvent&apos;) == &apos;O33&apos; &amp;&amp;
      $(&apos;msgHL7VersionID&apos;) == &apos;2.6&apos; &amp;&amp;
      $(&apos;hubHost&apos;) == $(&apos;receivingFacilityHubHost&apos;))
  {
    if ($(&apos;componentErrors&apos;).length() &gt; 0)
    {
      logger.info(&quot;Bypassing Send ACK because of prior errors: &quot; + $(&apos;componentErrors&apos;));
    }
    else
    {
      logger.info(&quot;Received an 2.6 OML O33 msg. Sending ACK back to original Sending Facility over Mirth WS.&quot;);
      retval = true;
    }
  }

}

if (retval)
{
  channelMap.put(&apos;ackSentStatus&apos;, &apos;SENT VIA WS&apos;);
}
else
{
  channelMap.put(&apos;ackSentStatus&apos;, &apos;BYPASSED&apos;);
}


return retval;</script>
            <operator>NONE</operator>
          </rule>
        </rules>
      </filter>
      <transportName>Web Service Sender</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <version>2.1.1.5490</version>
    </connector>
    <connector>
      <name>Send ACK msg (to PHIX2)</name>
      <properties>
        <property name="DataType">Web Service Sender</property>
        <property name="dispatcherAttachmentContents">&lt;list/&gt;</property>
        <property name="dispatcherAttachmentNames">&lt;list/&gt;</property>
        <property name="dispatcherAttachmentTypes">&lt;list/&gt;</property>
        <property name="dispatcherEnvelope">&lt;soapenv:Envelope xmlns:ns=&quot;http://ws.connectors.connect.mirth.com/&quot; xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&#xd;
  &lt;soapenv:Header/&gt;&#xd;
  &lt;soapenv:Body&gt;&#xd;
    &lt;ns:acceptMessage&gt;&#xd;
      &lt;arg0&gt;&lt;![CDATA[${message.encodedData}]]&gt;&lt;/arg0&gt;
    &lt;/ns:acceptMessage&gt;&#xd;
  &lt;/soapenv:Body&gt;
&lt;/soapenv:Envelope&gt;&#xd;
</property>
        <property name="dispatcherOneWay">0</property>
        <property name="dispatcherOperation">acceptMessage</property>
        <property name="dispatcherPassword"></property>
        <property name="dispatcherPort">{http://ws.connectors.connect.mirth.com/}DefaultAcceptMessagePort</property>
        <property name="dispatcherReplyChannelId">sink</property>
        <property name="dispatcherService">{http://ws.connectors.connect.mirth.com/}DefaultAcceptMessageService</property>
        <property name="dispatcherSoapAction"></property>
        <property name="dispatcherUseAuthentication">0</property>
        <property name="dispatcherUseMtom">0</property>
        <property name="dispatcherUsername"></property>
        <property name="dispatcherWsdlOperations">&lt;list&gt;
  &lt;string&gt;acceptMessage&lt;/string&gt;
&lt;/list&gt;</property>
        <property name="dispatcherWsdlUrl">http://phix2.phiresearchlab.org:8081/services/Mirth?wsdl</property>
        <property name="host">phix2.phiresearchlab.org:8081/services/Mirth?wsdl</property>
        <property name="queuePollInterval">200</property>
        <property name="reconnectMillisecs">10000</property>
        <property name="rotateQueue">0</property>
        <property name="usePersistentQueues">0</property>
      </properties>
      <transformer>
        <steps>
          <step>
            <sequenceNumber>0</sequenceNumber>
            <name>transform OML msg into ACK msg</name>
            <script>try
{
  // build new ACK msg out of incoming OML msg

  // delete non-MSH OML segments
  for each (seg in msg.children() )
  {
    //logger.info(&quot;DEBUG: SEG &quot; + seg.name().toString() );
    if (seg.name().toString() != &apos;MSH&apos;)
    {
      //logger.info(&quot;DEBUG: Deleting SEG &quot; + seg.name().toString() );
      delete msg[seg.name().toString()];
    }
  }

  // Obtain orig sender &amp; receiver values from OML header. 
  var omlSendingAppNSID = msg[&apos;MSH&apos;][&apos;MSH.3&apos;][&apos;MSH.3.1&apos;];
  var omlSendingAppUID = msg[&apos;MSH&apos;][&apos;MSH.3&apos;][&apos;MSH.3.2&apos;];
  var omlSendingAppUIDType = msg[&apos;MSH&apos;][&apos;MSH.3&apos;][&apos;MSH.3.3&apos;];

  var omlSendingFacNSID = msg[&apos;MSH&apos;][&apos;MSH.4&apos;][&apos;MSH.4.1&apos;];
  var omlSendingFacUID = msg[&apos;MSH&apos;][&apos;MSH.4&apos;][&apos;MSH.4.2&apos;];
  var omlSendingFacUIDType = msg[&apos;MSH&apos;][&apos;MSH.4&apos;][&apos;MSH.4.3&apos;];

  var omlRecvAppNSID = msg[&apos;MSH&apos;][&apos;MSH.5&apos;][&apos;MSH.5.1&apos;];
  var omlRecvAppUID = msg[&apos;MSH&apos;][&apos;MSH.5&apos;][&apos;MSH.5.2&apos;];
  var omlRecvAppUIDType = msg[&apos;MSH&apos;][&apos;MSH.5&apos;][&apos;MSH.5.3&apos;];

  var omlRecvFacNSID = msg[&apos;MSH&apos;][&apos;MSH.6&apos;][&apos;MSH.6.1&apos;];
  var omlRecvFacUID = msg[&apos;MSH&apos;][&apos;MSH.6&apos;][&apos;MSH.6.2&apos;];
  var omlRecvFacUIDType = msg[&apos;MSH&apos;][&apos;MSH.6&apos;][&apos;MSH.6.3&apos;];

  var omlCtrlID = msg[&apos;MSH&apos;][&apos;MSH.10&apos;][&apos;MSH.10.1&apos;];

  // Alter MSH contents with ACK-specific contents: Reverse sender and receiver.
  msg[&apos;MSH&apos;][&apos;MSH.3&apos;][&apos;MSH.3.1&apos;] = omlRecvAppNSID;
  msg[&apos;MSH&apos;][&apos;MSH.3&apos;][&apos;MSH.3.2&apos;] = omlRecvAppUID;
  msg[&apos;MSH&apos;][&apos;MSH.3&apos;][&apos;MSH.3.3&apos;] = omlRecvAppUIDType;

  msg[&apos;MSH&apos;][&apos;MSH.4&apos;][&apos;MSH.4.1&apos;] = omlRecvFacNSID;
  msg[&apos;MSH&apos;][&apos;MSH.4&apos;][&apos;MSH.4.2&apos;] = omlRecvFacUID;
  msg[&apos;MSH&apos;][&apos;MSH.4&apos;][&apos;MSH.4.3&apos;] = omlRecvFacUIDType;

  msg[&apos;MSH&apos;][&apos;MSH.5&apos;][&apos;MSH.5.1&apos;] = omlSendingAppNSID;
  msg[&apos;MSH&apos;][&apos;MSH.5&apos;][&apos;MSH.5.2&apos;] = omlSendingAppUID;
  msg[&apos;MSH&apos;][&apos;MSH.5&apos;][&apos;MSH.5.3&apos;] = omlSendingAppUIDType;

  msg[&apos;MSH&apos;][&apos;MSH.6&apos;][&apos;MSH.6.1&apos;] = omlSendingFacNSID;
  msg[&apos;MSH&apos;][&apos;MSH.6&apos;][&apos;MSH.6.2&apos;] = omlSendingFacUID;
  msg[&apos;MSH&apos;][&apos;MSH.6&apos;][&apos;MSH.6.3&apos;] = omlSendingFacUIDType;

  var curDateStamp = DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;); //e.g, 20110623093000
  msg[&apos;MSH&apos;][&apos;MSH.7&apos;] = curDateStamp;
  msg[&apos;MSH&apos;][&apos;MSH.9&apos;] = &quot;ACK^O33^ACK&quot;;
  msg[&apos;MSH&apos;][&apos;MSH.10&apos;] = &quot;2.16.840.1.114222.4.3.2.5.2.7001.&quot; + curDateStamp + &quot;.0000&quot;;

  // add MSA segment
  createSegmentAfter(&apos;MSA&apos;, msg[&apos;MSH&apos;]);
  msg[&apos;MSA&apos;][&apos;MSA.1&apos;] = &quot;AA&quot;;
  msg[&apos;MSA&apos;][&apos;MSA.2&apos;] = omlCtrlID;

}
catch(e)
{
  logger.error(&quot;Error in Send ACK msg Transformer: &quot; + e.message);
  channelMap.put(&apos;componentErrors&apos;,  $(&apos;componentErrors&apos;) + &quot;Send ACK msg Transformer:\n&quot; + e.message + &quot; |\n&quot;);
}</script>
            <type>JavaScript</type>
            <data class="map">
              <entry>
                <string>Script</string>
                <string>try
{
  // build new ACK msg out of incoming OML msg

  // delete non-MSH OML segments
  for each (seg in msg.children() )
  {
    //logger.info(&quot;DEBUG: SEG &quot; + seg.name().toString() );
    if (seg.name().toString() != &apos;MSH&apos;)
    {
      //logger.info(&quot;DEBUG: Deleting SEG &quot; + seg.name().toString() );
      delete msg[seg.name().toString()];
    }
  }

  // Obtain orig sender &amp; receiver values from OML header. 
  var omlSendingAppNSID = msg[&apos;MSH&apos;][&apos;MSH.3&apos;][&apos;MSH.3.1&apos;];
  var omlSendingAppUID = msg[&apos;MSH&apos;][&apos;MSH.3&apos;][&apos;MSH.3.2&apos;];
  var omlSendingAppUIDType = msg[&apos;MSH&apos;][&apos;MSH.3&apos;][&apos;MSH.3.3&apos;];

  var omlSendingFacNSID = msg[&apos;MSH&apos;][&apos;MSH.4&apos;][&apos;MSH.4.1&apos;];
  var omlSendingFacUID = msg[&apos;MSH&apos;][&apos;MSH.4&apos;][&apos;MSH.4.2&apos;];
  var omlSendingFacUIDType = msg[&apos;MSH&apos;][&apos;MSH.4&apos;][&apos;MSH.4.3&apos;];

  var omlRecvAppNSID = msg[&apos;MSH&apos;][&apos;MSH.5&apos;][&apos;MSH.5.1&apos;];
  var omlRecvAppUID = msg[&apos;MSH&apos;][&apos;MSH.5&apos;][&apos;MSH.5.2&apos;];
  var omlRecvAppUIDType = msg[&apos;MSH&apos;][&apos;MSH.5&apos;][&apos;MSH.5.3&apos;];

  var omlRecvFacNSID = msg[&apos;MSH&apos;][&apos;MSH.6&apos;][&apos;MSH.6.1&apos;];
  var omlRecvFacUID = msg[&apos;MSH&apos;][&apos;MSH.6&apos;][&apos;MSH.6.2&apos;];
  var omlRecvFacUIDType = msg[&apos;MSH&apos;][&apos;MSH.6&apos;][&apos;MSH.6.3&apos;];

  var omlCtrlID = msg[&apos;MSH&apos;][&apos;MSH.10&apos;][&apos;MSH.10.1&apos;];

  // Alter MSH contents with ACK-specific contents: Reverse sender and receiver.
  msg[&apos;MSH&apos;][&apos;MSH.3&apos;][&apos;MSH.3.1&apos;] = omlRecvAppNSID;
  msg[&apos;MSH&apos;][&apos;MSH.3&apos;][&apos;MSH.3.2&apos;] = omlRecvAppUID;
  msg[&apos;MSH&apos;][&apos;MSH.3&apos;][&apos;MSH.3.3&apos;] = omlRecvAppUIDType;

  msg[&apos;MSH&apos;][&apos;MSH.4&apos;][&apos;MSH.4.1&apos;] = omlRecvFacNSID;
  msg[&apos;MSH&apos;][&apos;MSH.4&apos;][&apos;MSH.4.2&apos;] = omlRecvFacUID;
  msg[&apos;MSH&apos;][&apos;MSH.4&apos;][&apos;MSH.4.3&apos;] = omlRecvFacUIDType;

  msg[&apos;MSH&apos;][&apos;MSH.5&apos;][&apos;MSH.5.1&apos;] = omlSendingAppNSID;
  msg[&apos;MSH&apos;][&apos;MSH.5&apos;][&apos;MSH.5.2&apos;] = omlSendingAppUID;
  msg[&apos;MSH&apos;][&apos;MSH.5&apos;][&apos;MSH.5.3&apos;] = omlSendingAppUIDType;

  msg[&apos;MSH&apos;][&apos;MSH.6&apos;][&apos;MSH.6.1&apos;] = omlSendingFacNSID;
  msg[&apos;MSH&apos;][&apos;MSH.6&apos;][&apos;MSH.6.2&apos;] = omlSendingFacUID;
  msg[&apos;MSH&apos;][&apos;MSH.6&apos;][&apos;MSH.6.3&apos;] = omlSendingFacUIDType;

  var curDateStamp = DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;); //e.g, 20110623093000
  msg[&apos;MSH&apos;][&apos;MSH.7&apos;] = curDateStamp;
  msg[&apos;MSH&apos;][&apos;MSH.9&apos;] = &quot;ACK^O33^ACK&quot;;
  msg[&apos;MSH&apos;][&apos;MSH.10&apos;] = &quot;2.16.840.1.114222.4.3.2.5.2.7001.&quot; + curDateStamp + &quot;.0000&quot;;

  // add MSA segment
  createSegmentAfter(&apos;MSA&apos;, msg[&apos;MSH&apos;]);
  msg[&apos;MSA&apos;][&apos;MSA.1&apos;] = &quot;AA&quot;;
  msg[&apos;MSA&apos;][&apos;MSA.2&apos;] = omlCtrlID;

}
catch(e)
{
  logger.error(&quot;Error in Send ACK msg Transformer: &quot; + e.message);
  channelMap.put(&apos;componentErrors&apos;,  $(&apos;componentErrors&apos;) + &quot;Send ACK msg Transformer:\n&quot; + e.message + &quot; |\n&quot;);
}</string>
              </entry>
            </data>
          </step>
        </steps>
        <inboundTemplate encoding="base64"></inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundProtocol>HL7V2</inboundProtocol>
        <outboundProtocol>HL7V2</outboundProtocol>
        <inboundProperties>
          <property name="convertLFtoCR">true</property>
          <property name="handleRepetitions">true</property>
          <property name="handleSubcomponents">false</property>
          <property name="stripNamespaces">true</property>
          <property name="useStrictParser">false</property>
          <property name="useStrictValidation">false</property>
        </inboundProperties>
        <outboundProperties>
          <property name="convertLFtoCR">true</property>
          <property name="handleRepetitions">false</property>
          <property name="handleSubcomponents">false</property>
          <property name="stripNamespaces">true</property>
          <property name="useStrictParser">false</property>
          <property name="useStrictValidation">false</property>
        </outboundProperties>
      </transformer>
      <filter>
        <rules>
          <rule>
            <sequenceNumber>0</sequenceNumber>
            <name>filter for 2.6 OML_O33 and MIRTH_WS xport</name>
            <data class="map">
              <entry>
                <string>Script</string>
                <string>var retval = false;

// Unfortunately, this version of Mirth does not seem to support variables inside web service endpoint URLs.
// This outermost conditional filters for phix2.phiresearchlab.org:8081 (PHIX 2) specifically (shouldn&apos;t be necessary).
if ($(&apos;sendingFacilityWebSvcHost&apos;) == &apos;phix2.phiresearchlab.org:8081&apos;)
{

  if ($(&apos;sendingFacilityXportType&apos;) == &apos;MIRTH_WS&apos; &amp;&amp;
      $(&apos;msgType&apos;) == &apos;OML&apos; &amp;&amp;
      $(&apos;msgTriggerEvent&apos;) == &apos;O33&apos; &amp;&amp;
      $(&apos;msgHL7VersionID&apos;) == &apos;2.6&apos; &amp;&amp;
      $(&apos;hubHost&apos;) == $(&apos;receivingFacilityHubHost&apos;))
  {
    if ($(&apos;componentErrors&apos;).length() &gt; 0)
    {
      logger.info(&quot;Bypassing Send ACK because of prior errors: &quot; + $(&apos;componentErrors&apos;));
    }
    else
    {
      logger.info(&quot;Received an 2.6 OML O33 msg. Sending ACK back to original Sending Facility over Mirth WS.&quot;);
      retval = true;
    }
  }

}

if (retval)
{
  channelMap.put(&apos;ackSentStatus&apos;, &apos;SENT VIA WS&apos;);
}
else
{
  channelMap.put(&apos;ackSentStatus&apos;, &apos;BYPASSED&apos;);
}

return retval;</string>
              </entry>
            </data>
            <type>JavaScript</type>
            <script>var retval = false;

// Unfortunately, this version of Mirth does not seem to support variables inside web service endpoint URLs.
// This outermost conditional filters for phix2.phiresearchlab.org:8081 (PHIX 2) specifically (shouldn&apos;t be necessary).
if ($(&apos;sendingFacilityWebSvcHost&apos;) == &apos;phix2.phiresearchlab.org:8081&apos;)
{

  if ($(&apos;sendingFacilityXportType&apos;) == &apos;MIRTH_WS&apos; &amp;&amp;
      $(&apos;msgType&apos;) == &apos;OML&apos; &amp;&amp;
      $(&apos;msgTriggerEvent&apos;) == &apos;O33&apos; &amp;&amp;
      $(&apos;msgHL7VersionID&apos;) == &apos;2.6&apos; &amp;&amp;
      $(&apos;hubHost&apos;) == $(&apos;receivingFacilityHubHost&apos;))
  {
    if ($(&apos;componentErrors&apos;).length() &gt; 0)
    {
      logger.info(&quot;Bypassing Send ACK because of prior errors: &quot; + $(&apos;componentErrors&apos;));
    }
    else
    {
      logger.info(&quot;Received an 2.6 OML O33 msg. Sending ACK back to original Sending Facility over Mirth WS.&quot;);
      retval = true;
    }
  }

}

if (retval)
{
  channelMap.put(&apos;ackSentStatus&apos;, &apos;SENT VIA WS&apos;);
}
else
{
  channelMap.put(&apos;ackSentStatus&apos;, &apos;BYPASSED&apos;);
}

return retval;</script>
            <operator>NONE</operator>
          </rule>
        </rules>
      </filter>
      <transportName>Web Service Sender</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <version>2.1.1.5490</version>
    </connector>
    <connector>
      <name>Send ACK msg (NHIN DIRECT REST)</name>
      <properties>
        <property name="DataType">JavaScript Writer</property>
        <property name="host">sink</property>
        <property name="script">var sndr = new Packages.gov.cdc.phlissa.hub.direct.HubDirectSender();
var subject = &quot;HL7 Message - &quot; + messageObject.getSource().toString();
// Note that &quot;sendingFacility&quot; is the sender of the original OML msg, which should receive this ACK
var toAddress = $(&apos;sendingFacilityDirectEmailAddress&apos;);

var lname = sndr.getLogName();

logger.info(lname + &quot; - Host: &quot; + sndr.getHost() );
logger.info(lname + &quot; - Port: &quot; + sndr.getPort() );
logger.info(lname + &quot; - From: &quot; + sndr.getFromAddress() );
logger.info(lname + &quot; - To: &quot; + toAddress);
logger.info(lname + &quot; - Subject: &quot; + subject);
logger.info(lname + &quot; - Trust store: &quot; + sndr.getTrustStorePath() );
logger.info(lname + &quot; - Trust store password: &quot; + sndr.getTrustStorePassword() );

sndr.sendDirectMessage(toAddress, subject, messageObject.getEncodedData().toString(), true);&#xd;
var hasError = sndr.hasError();

if (hasError) 
{
  logger.info(lname + &quot; - Error Message: &quot; + sndr.getErrorMessage() );
} 
else 
{
  logger.info(lname + &quot; - Message Location: &quot; + sndr.getLocation() );
  logger.info(lname + &quot; - Direct Response: &quot; + sndr.getResponse() );
}</property>
      </properties>
      <transformer>
        <steps>
          <step>
            <sequenceNumber>0</sequenceNumber>
            <name>transform OML msg into ACK msg</name>
            <script>try
{
  // build new ACK msg out of incoming OML msg

  // delete non-MSH OML segments
  for each (seg in msg.children() )
  {
    //logger.info(&quot;DEBUG: SEG &quot; + seg.name().toString() );
    if (seg.name().toString() != &apos;MSH&apos;)
    {
      //logger.info(&quot;DEBUG: Deleting SEG &quot; + seg.name().toString() );
      delete msg[seg.name().toString()];
    }
  }

  // Obtain orig sender &amp; receiver values from OML header. 
  var omlSendingAppNSID = msg[&apos;MSH&apos;][&apos;MSH.3&apos;][&apos;MSH.3.1&apos;];
  var omlSendingAppUID = msg[&apos;MSH&apos;][&apos;MSH.3&apos;][&apos;MSH.3.2&apos;];
  var omlSendingAppUIDType = msg[&apos;MSH&apos;][&apos;MSH.3&apos;][&apos;MSH.3.3&apos;];

  var omlSendingFacNSID = msg[&apos;MSH&apos;][&apos;MSH.4&apos;][&apos;MSH.4.1&apos;];
  var omlSendingFacUID = msg[&apos;MSH&apos;][&apos;MSH.4&apos;][&apos;MSH.4.2&apos;];
  var omlSendingFacUIDType = msg[&apos;MSH&apos;][&apos;MSH.4&apos;][&apos;MSH.4.3&apos;];

  var omlRecvAppNSID = msg[&apos;MSH&apos;][&apos;MSH.5&apos;][&apos;MSH.5.1&apos;];
  var omlRecvAppUID = msg[&apos;MSH&apos;][&apos;MSH.5&apos;][&apos;MSH.5.2&apos;];
  var omlRecvAppUIDType = msg[&apos;MSH&apos;][&apos;MSH.5&apos;][&apos;MSH.5.3&apos;];

  var omlRecvFacNSID = msg[&apos;MSH&apos;][&apos;MSH.6&apos;][&apos;MSH.6.1&apos;];
  var omlRecvFacUID = msg[&apos;MSH&apos;][&apos;MSH.6&apos;][&apos;MSH.6.2&apos;];
  var omlRecvFacUIDType = msg[&apos;MSH&apos;][&apos;MSH.6&apos;][&apos;MSH.6.3&apos;];

  var omlCtrlID = msg[&apos;MSH&apos;][&apos;MSH.10&apos;][&apos;MSH.10.1&apos;];

  // Alter MSH contents with ACK-specific contents: Reverse sender and receiver.
  msg[&apos;MSH&apos;][&apos;MSH.3&apos;][&apos;MSH.3.1&apos;] = omlRecvAppNSID;
  msg[&apos;MSH&apos;][&apos;MSH.3&apos;][&apos;MSH.3.2&apos;] = omlRecvAppUID;
  msg[&apos;MSH&apos;][&apos;MSH.3&apos;][&apos;MSH.3.3&apos;] = omlRecvAppUIDType;

  msg[&apos;MSH&apos;][&apos;MSH.4&apos;][&apos;MSH.4.1&apos;] = omlRecvFacNSID;
  msg[&apos;MSH&apos;][&apos;MSH.4&apos;][&apos;MSH.4.2&apos;] = omlRecvFacUID;
  msg[&apos;MSH&apos;][&apos;MSH.4&apos;][&apos;MSH.4.3&apos;] = omlRecvFacUIDType;

  msg[&apos;MSH&apos;][&apos;MSH.5&apos;][&apos;MSH.5.1&apos;] = omlSendingAppNSID;
  msg[&apos;MSH&apos;][&apos;MSH.5&apos;][&apos;MSH.5.2&apos;] = omlSendingAppUID;
  msg[&apos;MSH&apos;][&apos;MSH.5&apos;][&apos;MSH.5.3&apos;] = omlSendingAppUIDType;

  msg[&apos;MSH&apos;][&apos;MSH.6&apos;][&apos;MSH.6.1&apos;] = omlSendingFacNSID;
  msg[&apos;MSH&apos;][&apos;MSH.6&apos;][&apos;MSH.6.2&apos;] = omlSendingFacUID;
  msg[&apos;MSH&apos;][&apos;MSH.6&apos;][&apos;MSH.6.3&apos;] = omlSendingFacUIDType;

  var curDateStamp = DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;); //e.g, 20110623093000
  msg[&apos;MSH&apos;][&apos;MSH.7&apos;] = curDateStamp;
  msg[&apos;MSH&apos;][&apos;MSH.9&apos;] = &quot;ACK^O33^ACK&quot;;
  msg[&apos;MSH&apos;][&apos;MSH.10&apos;] = &quot;2.16.840.1.114222.4.3.2.5.2.7001.&quot; + curDateStamp + &quot;.0000&quot;;

  // add MSA segment
  createSegmentAfter(&apos;MSA&apos;, msg[&apos;MSH&apos;]);
  msg[&apos;MSA&apos;][&apos;MSA.1&apos;] = &quot;AA&quot;;
  msg[&apos;MSA&apos;][&apos;MSA.2&apos;] = omlCtrlID;

}
catch(e)
{
  logger.error(&quot;Error in Send ACK msg Transformer: &quot; + e.message);
  channelMap.put(&apos;componentErrors&apos;,  $(&apos;componentErrors&apos;) + &quot;Send ACK msg Transformer:\n&quot; + e.message + &quot; |\n&quot;);
}</script>
            <type>JavaScript</type>
            <data class="map">
              <entry>
                <string>Script</string>
                <string>try
{
  // build new ACK msg out of incoming OML msg

  // delete non-MSH OML segments
  for each (seg in msg.children() )
  {
    //logger.info(&quot;DEBUG: SEG &quot; + seg.name().toString() );
    if (seg.name().toString() != &apos;MSH&apos;)
    {
      //logger.info(&quot;DEBUG: Deleting SEG &quot; + seg.name().toString() );
      delete msg[seg.name().toString()];
    }
  }

  // Obtain orig sender &amp; receiver values from OML header. 
  var omlSendingAppNSID = msg[&apos;MSH&apos;][&apos;MSH.3&apos;][&apos;MSH.3.1&apos;];
  var omlSendingAppUID = msg[&apos;MSH&apos;][&apos;MSH.3&apos;][&apos;MSH.3.2&apos;];
  var omlSendingAppUIDType = msg[&apos;MSH&apos;][&apos;MSH.3&apos;][&apos;MSH.3.3&apos;];

  var omlSendingFacNSID = msg[&apos;MSH&apos;][&apos;MSH.4&apos;][&apos;MSH.4.1&apos;];
  var omlSendingFacUID = msg[&apos;MSH&apos;][&apos;MSH.4&apos;][&apos;MSH.4.2&apos;];
  var omlSendingFacUIDType = msg[&apos;MSH&apos;][&apos;MSH.4&apos;][&apos;MSH.4.3&apos;];

  var omlRecvAppNSID = msg[&apos;MSH&apos;][&apos;MSH.5&apos;][&apos;MSH.5.1&apos;];
  var omlRecvAppUID = msg[&apos;MSH&apos;][&apos;MSH.5&apos;][&apos;MSH.5.2&apos;];
  var omlRecvAppUIDType = msg[&apos;MSH&apos;][&apos;MSH.5&apos;][&apos;MSH.5.3&apos;];

  var omlRecvFacNSID = msg[&apos;MSH&apos;][&apos;MSH.6&apos;][&apos;MSH.6.1&apos;];
  var omlRecvFacUID = msg[&apos;MSH&apos;][&apos;MSH.6&apos;][&apos;MSH.6.2&apos;];
  var omlRecvFacUIDType = msg[&apos;MSH&apos;][&apos;MSH.6&apos;][&apos;MSH.6.3&apos;];

  var omlCtrlID = msg[&apos;MSH&apos;][&apos;MSH.10&apos;][&apos;MSH.10.1&apos;];

  // Alter MSH contents with ACK-specific contents: Reverse sender and receiver.
  msg[&apos;MSH&apos;][&apos;MSH.3&apos;][&apos;MSH.3.1&apos;] = omlRecvAppNSID;
  msg[&apos;MSH&apos;][&apos;MSH.3&apos;][&apos;MSH.3.2&apos;] = omlRecvAppUID;
  msg[&apos;MSH&apos;][&apos;MSH.3&apos;][&apos;MSH.3.3&apos;] = omlRecvAppUIDType;

  msg[&apos;MSH&apos;][&apos;MSH.4&apos;][&apos;MSH.4.1&apos;] = omlRecvFacNSID;
  msg[&apos;MSH&apos;][&apos;MSH.4&apos;][&apos;MSH.4.2&apos;] = omlRecvFacUID;
  msg[&apos;MSH&apos;][&apos;MSH.4&apos;][&apos;MSH.4.3&apos;] = omlRecvFacUIDType;

  msg[&apos;MSH&apos;][&apos;MSH.5&apos;][&apos;MSH.5.1&apos;] = omlSendingAppNSID;
  msg[&apos;MSH&apos;][&apos;MSH.5&apos;][&apos;MSH.5.2&apos;] = omlSendingAppUID;
  msg[&apos;MSH&apos;][&apos;MSH.5&apos;][&apos;MSH.5.3&apos;] = omlSendingAppUIDType;

  msg[&apos;MSH&apos;][&apos;MSH.6&apos;][&apos;MSH.6.1&apos;] = omlSendingFacNSID;
  msg[&apos;MSH&apos;][&apos;MSH.6&apos;][&apos;MSH.6.2&apos;] = omlSendingFacUID;
  msg[&apos;MSH&apos;][&apos;MSH.6&apos;][&apos;MSH.6.3&apos;] = omlSendingFacUIDType;

  var curDateStamp = DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;); //e.g, 20110623093000
  msg[&apos;MSH&apos;][&apos;MSH.7&apos;] = curDateStamp;
  msg[&apos;MSH&apos;][&apos;MSH.9&apos;] = &quot;ACK^O33^ACK&quot;;
  msg[&apos;MSH&apos;][&apos;MSH.10&apos;] = &quot;2.16.840.1.114222.4.3.2.5.2.7001.&quot; + curDateStamp + &quot;.0000&quot;;

  // add MSA segment
  createSegmentAfter(&apos;MSA&apos;, msg[&apos;MSH&apos;]);
  msg[&apos;MSA&apos;][&apos;MSA.1&apos;] = &quot;AA&quot;;
  msg[&apos;MSA&apos;][&apos;MSA.2&apos;] = omlCtrlID;

}
catch(e)
{
  logger.error(&quot;Error in Send ACK msg Transformer: &quot; + e.message);
  channelMap.put(&apos;componentErrors&apos;,  $(&apos;componentErrors&apos;) + &quot;Send ACK msg Transformer:\n&quot; + e.message + &quot; |\n&quot;);
}</string>
              </entry>
            </data>
          </step>
        </steps>
        <inboundTemplate encoding="base64"></inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundProtocol>HL7V2</inboundProtocol>
        <outboundProtocol>HL7V2</outboundProtocol>
        <inboundProperties>
          <property name="convertLFtoCR">true</property>
          <property name="handleRepetitions">true</property>
          <property name="handleSubcomponents">false</property>
          <property name="stripNamespaces">true</property>
          <property name="useStrictParser">false</property>
          <property name="useStrictValidation">false</property>
        </inboundProperties>
        <outboundProperties>
          <property name="convertLFtoCR">true</property>
          <property name="handleRepetitions">false</property>
          <property name="handleSubcomponents">false</property>
          <property name="stripNamespaces">true</property>
          <property name="useStrictParser">false</property>
          <property name="useStrictValidation">false</property>
        </outboundProperties>
      </transformer>
      <filter>
        <rules>
          <rule>
            <sequenceNumber>0</sequenceNumber>
            <name>filter for 2.6 OML_O33 and DIRECT xport</name>
            <data class="map">
              <entry>
                <string>Script</string>
                <string>var retval = false;

if ($(&apos;sendingFacilityXportType&apos;) == &apos;DIRECT&apos; &amp;&amp;
    $(&apos;msgType&apos;) == &apos;OML&apos; &amp;&amp;
    $(&apos;msgTriggerEvent&apos;) == &apos;O33&apos; &amp;&amp;
    $(&apos;msgHL7VersionID&apos;) == &apos;2.6&apos; &amp;&amp;
    $(&apos;hubHost&apos;) == $(&apos;receivingFacilityHubHost&apos;))
{

  if ($(&apos;componentErrors&apos;).length() &gt; 0)
  {
    logger.info(&quot;Bypassing Send ACK via DIRECT because of prior errors: &quot; + $(&apos;componentErrors&apos;));
  }
  else
  {
    logger.info(&quot;Received an 2.6 OML O33 msg. Sending ACK back to original Sending Facility over DIRECT.&quot;);
    retval = true;
  }
}

if (retval)
{
  channelMap.put(&apos;ackSentStatus&apos;, &apos;SENT VIA DIRECT&apos;);
}
else
{
  channelMap.put(&apos;ackSentStatus&apos;, &apos;BYPASSED&apos;);
}

return retval;</string>
              </entry>
            </data>
            <type>JavaScript</type>
            <script>var retval = false;

if ($(&apos;sendingFacilityXportType&apos;) == &apos;DIRECT&apos; &amp;&amp;
    $(&apos;msgType&apos;) == &apos;OML&apos; &amp;&amp;
    $(&apos;msgTriggerEvent&apos;) == &apos;O33&apos; &amp;&amp;
    $(&apos;msgHL7VersionID&apos;) == &apos;2.6&apos; &amp;&amp;
    $(&apos;hubHost&apos;) == $(&apos;receivingFacilityHubHost&apos;))
{

  if ($(&apos;componentErrors&apos;).length() &gt; 0)
  {
    logger.info(&quot;Bypassing Send ACK via DIRECT because of prior errors: &quot; + $(&apos;componentErrors&apos;));
  }
  else
  {
    logger.info(&quot;Received an 2.6 OML O33 msg. Sending ACK back to original Sending Facility over DIRECT.&quot;);
    retval = true;
  }
}

if (retval)
{
  channelMap.put(&apos;ackSentStatus&apos;, &apos;SENT VIA DIRECT&apos;);
}
else
{
  channelMap.put(&apos;ackSentStatus&apos;, &apos;BYPASSED&apos;);
}

return retval;</script>
            <operator>NONE</operator>
          </rule>
        </rules>
      </filter>
      <transportName>JavaScript Writer</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <version>2.1.1.5490</version>
    </connector>
    <connector>
      <name>Store transformed message to file</name>
      <properties>
        <property name="DataType">File Writer</property>
        <property name="FTPAnonymous">1</property>
        <property name="binary">0</property>
        <property name="charsetEncoding">DEFAULT_ENCODING</property>
        <property name="host">C:/phixdata/HL7_TRANSFORMED</property>
        <property name="outputAppend">1</property>
        <property name="outputPattern">XFORMED_${ORIGINALNAME}</property>
        <property name="passive">1</property>
        <property name="password">anonymous</property>
        <property name="scheme">file</property>
        <property name="secure">1</property>
        <property name="template">${message.encodedData}</property>
        <property name="timeout">10000</property>
        <property name="username">anonymous</property>
        <property name="validateConnections">1</property>
      </properties>
      <transformer>
        <steps>
          <step>
            <sequenceNumber>0</sequenceNumber>
            <name>Apply Vocab Translation</name>
            <script>try
{
  // -- vocab translation --
  if ( $(&apos;stdObx31&apos;) != &apos;&apos; )
  {
    logger.info(&quot;Applying OBX.3 vocab translation to msg...&quot;);

    msg[&apos;OBX&apos;][&apos;OBX.3&apos;][&apos;OBX.3.1&apos;] = $(&apos;stdObx31&apos;);
    msg[&apos;OBX&apos;][&apos;OBX.3&apos;][&apos;OBX.3.2&apos;] = $(&apos;stdObx32&apos;);
    msg[&apos;OBX&apos;][&apos;OBX.3&apos;][&apos;OBX.3.3&apos;] = $(&apos;stdObx33&apos;);
  }

  if ( $(&apos;stdRxa51&apos;) != &apos;&apos; )
  {
    logger.info(&quot;Applying RXA.5 vocab translation to msg...&quot;);

    msg[&apos;RXA&apos;][&apos;RXA.5&apos;][&apos;RXA.5.1&apos;] = $(&apos;stdRxa51&apos;);
    msg[&apos;RXA&apos;][&apos;RXA.5&apos;][&apos;RXA.5.2&apos;] = $(&apos;stdRxa52&apos;);
    msg[&apos;RXA&apos;][&apos;RXA.5&apos;][&apos;RXA.5.3&apos;] = $(&apos;stdRxa53&apos;);
  }
}
catch(e)
{
  logger.error(&quot;Error in Store transformed message to file Transformer: Apply Vocal Translation: &quot; + e.message);
  channelMap.put(&apos;componentErrors&apos;,  $(&apos;componentErrors&apos;) + &quot;Store transformed message to file Transformer: Apply Vocal Translation: \n&quot; + e.message + &quot; |\n&quot;);
}</script>
            <type>JavaScript</type>
            <data class="map">
              <entry>
                <string>Script</string>
                <string>try
{
  // -- vocab translation --
  if ( $(&apos;stdObx31&apos;) != &apos;&apos; )
  {
    logger.info(&quot;Applying OBX.3 vocab translation to msg...&quot;);

    msg[&apos;OBX&apos;][&apos;OBX.3&apos;][&apos;OBX.3.1&apos;] = $(&apos;stdObx31&apos;);
    msg[&apos;OBX&apos;][&apos;OBX.3&apos;][&apos;OBX.3.2&apos;] = $(&apos;stdObx32&apos;);
    msg[&apos;OBX&apos;][&apos;OBX.3&apos;][&apos;OBX.3.3&apos;] = $(&apos;stdObx33&apos;);
  }

  if ( $(&apos;stdRxa51&apos;) != &apos;&apos; )
  {
    logger.info(&quot;Applying RXA.5 vocab translation to msg...&quot;);

    msg[&apos;RXA&apos;][&apos;RXA.5&apos;][&apos;RXA.5.1&apos;] = $(&apos;stdRxa51&apos;);
    msg[&apos;RXA&apos;][&apos;RXA.5&apos;][&apos;RXA.5.2&apos;] = $(&apos;stdRxa52&apos;);
    msg[&apos;RXA&apos;][&apos;RXA.5&apos;][&apos;RXA.5.3&apos;] = $(&apos;stdRxa53&apos;);
  }
}
catch(e)
{
  logger.error(&quot;Error in Store transformed message to file Transformer: Apply Vocal Translation: &quot; + e.message);
  channelMap.put(&apos;componentErrors&apos;,  $(&apos;componentErrors&apos;) + &quot;Store transformed message to file Transformer: Apply Vocal Translation: \n&quot; + e.message + &quot; |\n&quot;);
}</string>
              </entry>
            </data>
          </step>
          <step>
            <sequenceNumber>1</sequenceNumber>
            <name>Add SFT Segment</name>
            <script>try
{
	
  if ($(&apos;addSFTSegment&apos;) == &apos;true&apos;)
  {
    logger.info(&quot;Adding SFT Segment&quot;);

    // determine how many SFT segements already exist
    var i = 0;
  
    while(msg[&apos;SFT&apos;][i] != null) 
    {  
      ++i;
    }

    // create SFT segment, per requirements in &quot;Message Processing Flow&quot; spreadsheet
    var newSFT = createSegment(&apos;SFT&apos;);

    // workaround to put the new segment after the existing SFT, if another exists, otherwise after MSH
    if (i == 0)
    {
      msg[&apos;MSH&apos;] += newSFT;
    }
    else
    {
      msg[&apos;SFT&apos;] += newSFT;
    }

    msg[&apos;SFT&apos;][i][&apos;SFT.1&apos;][&apos;SFT.1.1&apos;] = &apos;PHIX&apos;;
    msg[&apos;SFT&apos;][i][&apos;SFT.1&apos;][&apos;SFT.1.2&apos;] = &apos;L&apos;;
    msg[&apos;SFT&apos;][i][&apos;SFT.1&apos;][&apos;SFT.1.6&apos;][&apos;SFT.1.6.1&apos;] = &apos;&apos;;
    msg[&apos;SFT&apos;][i][&apos;SFT.1&apos;][&apos;SFT.1.6&apos;][&apos;SFT.1.6.2&apos;] = &apos;2.16.840.1.114222.4.3.2.5.2.4000&apos;;
    msg[&apos;SFT&apos;][i][&apos;SFT.1&apos;][&apos;SFT.1.6&apos;][&apos;SFT.1.6.3&apos;] = &apos;ISO&apos;;
    msg[&apos;SFT&apos;][i][&apos;SFT.1&apos;][&apos;SFT.1.7&apos;] = &apos;XX&apos;;
    msg[&apos;SFT&apos;][i][&apos;SFT.1&apos;][&apos;SFT.1.10&apos;] = &apos;PHIX&apos;;

    msg[&apos;SFT&apos;][i][&apos;SFT.2&apos;] = &apos;1.3&apos;;
    msg[&apos;SFT&apos;][i][&apos;SFT.3&apos;] = &apos;PHIX&apos;;
    msg[&apos;SFT&apos;][i][&apos;SFT.4&apos;] = &apos;1.3&apos;;

    msg[&apos;SFT&apos;][i][&apos;SFT.6&apos;] = &apos;&apos;;
  }
}
catch(e)
{
  logger.error(&quot;Error in Store transformed message to file Transformer: Add SFT Segment: &quot; + e.message);
  channelMap.put(&apos;componentErrors&apos;,  $(&apos;componentErrors&apos;) + &quot;Store transformed message to file Transformer: Add SFT Segment: \n&quot; + e.message + &quot; |\n&quot;);
}




/*try
{
  if ($(&apos;addSFTSegment&apos;) == &apos;true&apos;)
  {
    logger.info(&quot;Adding SFT Segment&quot;);

    // determine how many SFT segements already exist
    var i = 0;
  
    while(msg[&apos;SFT&apos;][i] != null) 
    {  
      ++i;
    }

    // create SFT segment, per requirements in &quot;Message Processing Flow&quot; spreadsheet
    var newSFT = createSegment(&apos;SFT&apos;);

    // workaround to put the new segment after the existing SFT, if another exists, otherwise after MSH
    if (i == 0)
    {
      msg[&apos;MSH&apos;] += newSFT;
    }
    else
    {
      msg[&apos;SFT&apos;] += newSFT;
    }

    msg[&apos;SFT&apos;][i][&apos;SFT.1&apos;][&apos;SFT.1.1&apos;] = &apos;PHIX&apos;;
    msg[&apos;SFT&apos;][i][&apos;SFT.1&apos;][&apos;SFT.1.2&apos;] = &apos;L&apos;;
    msg[&apos;SFT&apos;][i][&apos;SFT.1&apos;][&apos;SFT.1.6&apos;][&apos;SFT.1.6.1&apos;] = &apos;&apos;;
    msg[&apos;SFT&apos;][i][&apos;SFT.1&apos;][&apos;SFT.1.6&apos;][&apos;SFT.1.6.2&apos;] = &apos;2.16.840.1.114222.4.3.2.5.2.4000&apos;;
    msg[&apos;SFT&apos;][i][&apos;SFT.1&apos;][&apos;SFT.1.6&apos;][&apos;SFT.1.6.3&apos;] = &apos;ISO&apos;;
    msg[&apos;SFT&apos;][i][&apos;SFT.1&apos;][&apos;SFT.1.7&apos;] = &apos;XX&apos;;
    msg[&apos;SFT&apos;][i][&apos;SFT.1&apos;][&apos;SFT.1.10&apos;] = &apos;PHIX&apos;;

    msg[&apos;SFT&apos;][i][&apos;SFT.2&apos;] = &apos;1.2&apos;;
    msg[&apos;SFT&apos;][i][&apos;SFT.3&apos;] = &apos;PHIX&apos;;
    msg[&apos;SFT&apos;][i][&apos;SFT.4&apos;] = &apos;1.2&apos;;

    msg[&apos;SFT&apos;][i][&apos;SFT.6&apos;] = &apos;&apos;;
  }
}
catch(e)
{
  logger.error(&quot;Error in Store transformed message to file Transformer: Add SFT Segment: &quot; + e.message);
  channelMap.put(&apos;componentErrors&apos;,  $(&apos;componentErrors&apos;) + &quot;Store transformed message to file Transformer: Add SFT Segment: \n&quot; + e.message + &quot; |\n&quot;);
}*/</script>
            <type>JavaScript</type>
            <data class="map">
              <entry>
                <string>Script</string>
                <string>try
{
	
  if ($(&apos;addSFTSegment&apos;) == &apos;true&apos;)
  {
    logger.info(&quot;Adding SFT Segment&quot;);

    // determine how many SFT segements already exist
    var i = 0;
  
    while(msg[&apos;SFT&apos;][i] != null) 
    {  
      ++i;
    }

    // create SFT segment, per requirements in &quot;Message Processing Flow&quot; spreadsheet
    var newSFT = createSegment(&apos;SFT&apos;);

    // workaround to put the new segment after the existing SFT, if another exists, otherwise after MSH
    if (i == 0)
    {
      msg[&apos;MSH&apos;] += newSFT;
    }
    else
    {
      msg[&apos;SFT&apos;] += newSFT;
    }

    msg[&apos;SFT&apos;][i][&apos;SFT.1&apos;][&apos;SFT.1.1&apos;] = &apos;PHIX&apos;;
    msg[&apos;SFT&apos;][i][&apos;SFT.1&apos;][&apos;SFT.1.2&apos;] = &apos;L&apos;;
    msg[&apos;SFT&apos;][i][&apos;SFT.1&apos;][&apos;SFT.1.6&apos;][&apos;SFT.1.6.1&apos;] = &apos;&apos;;
    msg[&apos;SFT&apos;][i][&apos;SFT.1&apos;][&apos;SFT.1.6&apos;][&apos;SFT.1.6.2&apos;] = &apos;2.16.840.1.114222.4.3.2.5.2.4000&apos;;
    msg[&apos;SFT&apos;][i][&apos;SFT.1&apos;][&apos;SFT.1.6&apos;][&apos;SFT.1.6.3&apos;] = &apos;ISO&apos;;
    msg[&apos;SFT&apos;][i][&apos;SFT.1&apos;][&apos;SFT.1.7&apos;] = &apos;XX&apos;;
    msg[&apos;SFT&apos;][i][&apos;SFT.1&apos;][&apos;SFT.1.10&apos;] = &apos;PHIX&apos;;

    msg[&apos;SFT&apos;][i][&apos;SFT.2&apos;] = &apos;1.3&apos;;
    msg[&apos;SFT&apos;][i][&apos;SFT.3&apos;] = &apos;PHIX&apos;;
    msg[&apos;SFT&apos;][i][&apos;SFT.4&apos;] = &apos;1.3&apos;;

    msg[&apos;SFT&apos;][i][&apos;SFT.6&apos;] = &apos;&apos;;
  }
}
catch(e)
{
  logger.error(&quot;Error in Store transformed message to file Transformer: Add SFT Segment: &quot; + e.message);
  channelMap.put(&apos;componentErrors&apos;,  $(&apos;componentErrors&apos;) + &quot;Store transformed message to file Transformer: Add SFT Segment: \n&quot; + e.message + &quot; |\n&quot;);
}




/*try
{
  if ($(&apos;addSFTSegment&apos;) == &apos;true&apos;)
  {
    logger.info(&quot;Adding SFT Segment&quot;);

    // determine how many SFT segements already exist
    var i = 0;
  
    while(msg[&apos;SFT&apos;][i] != null) 
    {  
      ++i;
    }

    // create SFT segment, per requirements in &quot;Message Processing Flow&quot; spreadsheet
    var newSFT = createSegment(&apos;SFT&apos;);

    // workaround to put the new segment after the existing SFT, if another exists, otherwise after MSH
    if (i == 0)
    {
      msg[&apos;MSH&apos;] += newSFT;
    }
    else
    {
      msg[&apos;SFT&apos;] += newSFT;
    }

    msg[&apos;SFT&apos;][i][&apos;SFT.1&apos;][&apos;SFT.1.1&apos;] = &apos;PHIX&apos;;
    msg[&apos;SFT&apos;][i][&apos;SFT.1&apos;][&apos;SFT.1.2&apos;] = &apos;L&apos;;
    msg[&apos;SFT&apos;][i][&apos;SFT.1&apos;][&apos;SFT.1.6&apos;][&apos;SFT.1.6.1&apos;] = &apos;&apos;;
    msg[&apos;SFT&apos;][i][&apos;SFT.1&apos;][&apos;SFT.1.6&apos;][&apos;SFT.1.6.2&apos;] = &apos;2.16.840.1.114222.4.3.2.5.2.4000&apos;;
    msg[&apos;SFT&apos;][i][&apos;SFT.1&apos;][&apos;SFT.1.6&apos;][&apos;SFT.1.6.3&apos;] = &apos;ISO&apos;;
    msg[&apos;SFT&apos;][i][&apos;SFT.1&apos;][&apos;SFT.1.7&apos;] = &apos;XX&apos;;
    msg[&apos;SFT&apos;][i][&apos;SFT.1&apos;][&apos;SFT.1.10&apos;] = &apos;PHIX&apos;;

    msg[&apos;SFT&apos;][i][&apos;SFT.2&apos;] = &apos;1.2&apos;;
    msg[&apos;SFT&apos;][i][&apos;SFT.3&apos;] = &apos;PHIX&apos;;
    msg[&apos;SFT&apos;][i][&apos;SFT.4&apos;] = &apos;1.2&apos;;

    msg[&apos;SFT&apos;][i][&apos;SFT.6&apos;] = &apos;&apos;;
  }
}
catch(e)
{
  logger.error(&quot;Error in Store transformed message to file Transformer: Add SFT Segment: &quot; + e.message);
  channelMap.put(&apos;componentErrors&apos;,  $(&apos;componentErrors&apos;) + &quot;Store transformed message to file Transformer: Add SFT Segment: \n&quot; + e.message + &quot; |\n&quot;);
}*/</string>
              </entry>
            </data>
          </step>
          <step>
            <sequenceNumber>2</sequenceNumber>
            <name>Add SPM Segment</name>
            <script>try
{
  if ($(&apos;addSPMSegment&apos;) == &apos;true&apos;)
  {
	logger.info(&quot;Adding SPM Segment&quot;);
	
	//Parsing the Original Message to determine the end of the first order-observation group. That is where we add this new SPM segment

	logger.info(&quot;Parsing the original Message.&quot;);
	var	originalMessage = messageObject.getRawData();
	var lines = new Array();
	lines = originalMessage.split(&quot;\\r&quot;);

	
	var obrCount = 0;
	var obxCount = 0;
	var nteCount = 0;
	var latestSeg = &apos;&apos;;
	var latestSegID = 0;
	var len = lines.length;

	for (var l=0;l&lt;len &amp;&amp; obrCount &lt; 2;l++) {
		if ( obrCount == 1 ){
			if(lines[l].startsWith(&quot;OBR|&quot;)) {
				obrCount++;
			}
			else if(lines[l].startsWith(&quot;OBX|&quot;)) {
				latestSeg = &apos;OBX&apos;;
				latestSegID = obxCount;
				obxCount++;
			}
			else if(lines[l].startsWith(&quot;NTE|&quot;)){
				latestSeg = &apos;NTE&apos;;
				latestSegID = nteCount;	
				nteCount++;
			}
		} else {
			if(lines[l].startsWith(&quot;OBR|&quot;)) {
				obrCount++;
			}else if(lines[l].startsWith(&quot;NTE|&quot;)){
				nteCount++;		    		
			}
		}		
	}
	
	logger.info(&quot;last segment : &quot; + latestSeg );
	logger.info(&quot;last segment ID : &quot; + latestSegID);
	logger.info(&quot;last segment in the first order observation group : &quot;+ msg[latestSeg][latestSegID]);

	// create SFT segment, per requirements in &quot;Message Processing Flow&quot; spreadsheet
    var newSPM = createSegment(&apos;SPM&apos;);

    // workaround to put the new segment at the end of the first observation group or at the end of the message
    if (latestSeg != &apos;&apos;)
    {
		//Adding it to the last segemnt in the first order observation group
		logger.info (&quot;Adding SPM to the last segemnt in the first order observation group&quot;);
	    msg[latestSeg][latestSegID] += newSPM;
    }
    else
    {
		//Add it at the end of the message
		logger.info (&quot;Adding SPM to the end of the message&quot;);
      	msg[&apos;SPM&apos;] += newSPM;
		
		//If we have a DSC segment in the message then it should appear after SPM 
		if (msg[&apos;DSC&apos;].length() &gt; 0){ 
			logger.info (&quot;Reordering DSC segment so that it comes after SPM&quot;);
			var dsc = msg[&apos;DSC&apos;];
		    delete msg[&apos;DSC&apos;];
    		msg[&apos;DSC&apos;] = dsc;
		}
    }
   
	//SPM 1
   	msg[&apos;SPM&apos;][&apos;SPM.1&apos;] = &apos;1&apos;;

	//SPM 2.1
    msg[&apos;SPM&apos;][&apos;SPM.2&apos;][&apos;SPM.2.1&apos;] = msg[&apos;OBR&apos;][0][&apos;OBR.2&apos;][&apos;OBR.2.1&apos;].toString() + &quot;&amp;&quot; +
                                     msg[&apos;OBR&apos;][0][&apos;OBR.2&apos;][&apos;OBR.2.2&apos;].toString() + &quot;&amp;&quot; +
                                     msg[&apos;OBR&apos;][0][&apos;OBR.2&apos;][&apos;OBR.2.3&apos;].toString() + &quot;&amp;&quot; +
                                     msg[&apos;OBR&apos;][0][&apos;OBR.2&apos;][&apos;OBR.2.4&apos;].toString();


	//SPM 2.2
    msg[&apos;SPM&apos;][&apos;SPM.2&apos;][&apos;SPM.2.2&apos;] = msg[&apos;OBR&apos;][0][&apos;OBR.3&apos;][&apos;OBR.3.1&apos;].toString() + &quot;&amp;&quot; +
                                     msg[&apos;OBR&apos;][0][&apos;OBR.3&apos;][&apos;OBR.3.2&apos;].toString() + &quot;&amp;&quot; +
                                     msg[&apos;OBR&apos;][0][&apos;OBR.3&apos;][&apos;OBR.3.3&apos;].toString() + &quot;&amp;&quot; +
                                     msg[&apos;OBR&apos;][0][&apos;OBR.3&apos;][&apos;OBR.3.4&apos;].toString();

	
	//SPM 3.1
	// Mirth apparently cannot support deeper than seg.x.y, so it&apos;s necessary to handle the subdivisions of the fields beyond this using split().
	var obr_29_1_List = msg[&apos;OBR&apos;][0][&apos;OBR.29&apos;][&apos;OBR.29.1&apos;].toString().split(&quot;&amp;&quot;);
	var count = (msg[&apos;OBR&apos;][0][&apos;OBR.29&apos;][&apos;OBR.29.1&apos;].toString().split(&quot;&amp;&quot;).length - 1);
	var spm_3_1 = &quot;&quot;;
    if (count &gt;= 0){
	  	spm_3_1 = obr_29_1_List[0] ;
    }
	if (count &gt;= 1){
	  	spm_3_1 = spm_3_1 + &quot;&amp;&quot; + obr_29_1_List[1] ; 
	}
	if (count &gt;= 2){
      	spm_3_1 = spm_3_1 + &quot;&amp;&quot; + obr_29_1_List[2] ; 
	}
	if (count &gt;= 3){
      	spm_3_1 = spm_3_1 + &quot;&amp;&quot; + obr_29_1_List[3] ; 
	}
	msg[&apos;SPM&apos;][&apos;SPM.3&apos;][&apos;SPM.3.1&apos;] = spm_3_1;

	//SPM 3.2
	var obr_29_2_List = msg[&apos;OBR&apos;][0][&apos;OBR.29&apos;][&apos;OBR.29.2&apos;].toString().split(&quot;&amp;&quot;);
	var count = (msg[&apos;OBR&apos;][0][&apos;OBR.29&apos;][&apos;OBR.29.2&apos;].toString().split(&quot;&amp;&quot;).length - 1);
	var spm_3_2 = &quot;&quot;;
    if (count &gt;= 0){
	  	spm_3_2 = obr_29_2_List[0] ;
    }
	if (count &gt;= 1){
	  	spm_3_2 = spm_3_2 + &quot;&amp;&quot; + obr_29_2_List[1] ; 
	}
	if (count &gt;= 2){
    	spm_3_2 = spm_3_2 + &quot;&amp;&quot; + obr_29_2_List[2] ; 
	}
	if (count &gt;= 3){
		spm_3_2 = spm_3_2 + &quot;&amp;&quot; + obr_29_2_List[3] ; 
	}
	msg[&apos;SPM&apos;][&apos;SPM.3&apos;][&apos;SPM.3.2&apos;] = spm_3_2;

	//SPM 4
    var obr_15_1 = msg[&apos;OBR&apos;][0][&apos;OBR.15&apos;][&apos;OBR.15.1&apos;].toString();
	if (obr_15_1 == null || obr_15_1 == &apos;&apos;){
		msg[&apos;SPM&apos;][&apos;SPM.4&apos;] = &apos;UNK^unknown^nullflavor&apos;;
	}
	else{
    	var obr_15_1_List = obr_15_1.toString().split(&quot;&amp;&quot;);
		var count = (obr_15_1.toString().split(&quot;&amp;&quot;).length - 1);
	    
	    if (count &gt;= 0){
		  msg[&apos;SPM&apos;][&apos;SPM.4&apos;][&apos;SPM.4.1&apos;] = obr_15_1_List[0] ; // OBR.15.1.1
		}
		if (count &gt;= 1){
		  msg[&apos;SPM&apos;][&apos;SPM.4&apos;][&apos;SPM.4.2&apos;] = obr_15_1_List[1]; // OBR.15.1.2
		}
		if (count &gt;= 2){
    	  msg[&apos;SPM&apos;][&apos;SPM.4&apos;][&apos;SPM.4.3&apos;] = obr_15_1_List[2]; // OBR.15.1.3
		}
		if (count &gt;= 3){
	      msg[&apos;SPM&apos;][&apos;SPM.4&apos;][&apos;SPM.4.4&apos;] = obr_15_1_List[3]; // OBR.15.1.1
		}
		if (count &gt;= 4){
    	  msg[&apos;SPM&apos;][&apos;SPM.4&apos;][&apos;SPM.4.5&apos;] = obr_15_1_List[4]; // OBR.15.1.2
		}
		if (count &gt;= 5){
	      msg[&apos;SPM&apos;][&apos;SPM.4&apos;][&apos;SPM.4.6&apos;] = obr_15_1_List[5]; // OBR.15.1.3
		}	  
   	}

	//SPM 6
	msg[&apos;SPM&apos;][&apos;SPM.6&apos;][&apos;SPM.6.1&apos;] = &apos;&apos;;
	msg[&apos;SPM&apos;][&apos;SPM.6&apos;][&apos;SPM.6.2&apos;] = msg[&apos;OBR&apos;][0][&apos;OBR.15&apos;][&apos;OBR.15.2&apos;];

	//SPM 7
	var obr_15_6_List = msg[&apos;OBR&apos;][0][&apos;OBR.15&apos;][&apos;OBR.15.6&apos;].toString().split(&quot;&amp;&quot;);
	var count = (msg[&apos;OBR&apos;][0][&apos;OBR.15&apos;][&apos;OBR.15.6&apos;].toString().split(&quot;&amp;&quot;).length - 1);
    if (count &gt;= 0){
   		msg[&apos;SPM&apos;][&apos;SPM.7&apos;][&apos;SPM.7.1&apos;] = obr_15_6_List[0]; // OBR.15.6.1
	}
    if (count &gt;= 1){
		msg[&apos;SPM&apos;][&apos;SPM.7&apos;][&apos;SPM.7.2&apos;] = obr_15_6_List[1]; // OBR.15.6.2
	}
    if (count &gt;= 2){
		msg[&apos;SPM&apos;][&apos;SPM.7&apos;][&apos;SPM.7.3&apos;] = obr_15_6_List[2]; // OBR.15.6.3
	}
    if (count &gt;= 3){
		msg[&apos;SPM&apos;][&apos;SPM.7&apos;][&apos;SPM.7.4&apos;] = obr_15_6_List[3]; // OBR.15.6.1
	}
    if (count &gt;= 4){
      	msg[&apos;SPM&apos;][&apos;SPM.7&apos;][&apos;SPM.7.5&apos;] = obr_15_6_List[4]; // OBR.15.6.2
	}
    if (count &gt;= 5){
      	msg[&apos;SPM&apos;][&apos;SPM.7&apos;][&apos;SPM.7.6&apos;] = obr_15_6_List[5]; // OBR.15.6.3	  
    }

	//SPM 8
    var obr_15_4_List = msg[&apos;OBR&apos;][0][&apos;OBR.15&apos;][&apos;OBR.15.4&apos;].toString().split(&quot;&amp;&quot;);	
	var count = (msg[&apos;OBR&apos;][0][&apos;OBR.15&apos;][&apos;OBR.15.4&apos;].toString().split(&quot;&amp;&quot;).length - 1);
    if (count &gt;= 0){
		msg[&apos;SPM&apos;][&apos;SPM.8&apos;][&apos;SPM.8.1&apos;] = obr_15_4_List[0]; // OBR.15.4.1
	}
	if (count &gt;= 1){
		msg[&apos;SPM&apos;][&apos;SPM.8&apos;][&apos;SPM.8.2&apos;] = obr_15_4_List[1]; // OBR.15.4.2
	}
	if (count &gt;= 2){
		msg[&apos;SPM&apos;][&apos;SPM.8&apos;][&apos;SPM.8.3&apos;] = obr_15_4_List[2]; // OBR.15.4.3
	}
	if (count &gt;= 3){
		msg[&apos;SPM&apos;][&apos;SPM.8&apos;][&apos;SPM.8.4&apos;] = obr_15_4_List[3]; // OBR.15.4.1
	}
	if (count &gt;= 4){
		msg[&apos;SPM&apos;][&apos;SPM.8&apos;][&apos;SPM.8.5&apos;] = obr_15_4_List[4]; // OBR.15.4.2
	}
	if (count &gt;= 5){
		msg[&apos;SPM&apos;][&apos;SPM.8&apos;][&apos;SPM.8.6&apos;] = obr_15_4_List[5]; // OBR.15.4.3
	}

	//SPM 9
	var obr_15_5_List = msg[&apos;OBR&apos;][0][&apos;OBR.15&apos;][&apos;OBR.15.5&apos;].toString().split(&quot;&amp;&quot;);
    var count = (msg[&apos;OBR&apos;][0][&apos;OBR.15&apos;][&apos;OBR.15.5&apos;].toString().split(&quot;&amp;&quot;).length - 1);
    if (count &gt;= 0){		
    	msg[&apos;SPM&apos;][&apos;SPM.9&apos;][&apos;SPM.9.1&apos;] = obr_15_5_List[0]; // OBR.15.5.1
	}
	if (count &gt;= 1){
      	msg[&apos;SPM&apos;][&apos;SPM.9&apos;][&apos;SPM.9.2&apos;] = obr_15_5_List[1]; // OBR.15.5.2
	}
	if (count &gt;= 2){
      	msg[&apos;SPM&apos;][&apos;SPM.9&apos;][&apos;SPM.9.3&apos;] = obr_15_5_List[2]; // OBR.15.5.3
	}
	if (count &gt;= 3){
	  	msg[&apos;SPM&apos;][&apos;SPM.9&apos;][&apos;SPM.9.4&apos;] = obr_15_5_List[3]; // OBR.15.5.1
	}
	if (count &gt;= 4){
      	msg[&apos;SPM&apos;][&apos;SPM.9&apos;][&apos;SPM.9.5&apos;] = obr_15_5_List[4]; // OBR.15.5.2
	}
	if (count &gt;= 5){
      	msg[&apos;SPM&apos;][&apos;SPM.9&apos;][&apos;SPM.9.6&apos;] = obr_15_5_List[5]; // OBR.15.5.3
    }

	//SPM 12.2
	msg[&apos;SPM&apos;][&apos;SPM.12&apos;][&apos;SPM.12.1&apos;] = msg[&apos;OBR&apos;][0][&apos;OBR.9&apos;][&apos;OBR.9.1&apos;].toString();
	var obr_9_2_List = msg[&apos;OBR&apos;][0][&apos;OBR.9&apos;][&apos;OBR.9.2&apos;].toString().split(&quot;&amp;&quot;);
	var count = (msg[&apos;OBR&apos;][0][&apos;OBR.9&apos;][&apos;OBR.9.2&apos;].toString().split(&quot;&amp;&quot;).length - 1);
	var spm_12_2 = &quot;&quot;;
    if (count &gt;= 0){
	  	spm_12_2 = obr_9_2_List[0] ;
    }
	if (count &gt;= 1){
	  	spm_12_2 = spm_12_2 + &quot;&amp;&quot; + obr_9_2_List[1] ; 
	}
	if (count &gt;= 2){
      	spm_12_2 = spm_12_2 + &quot;&amp;&quot; + obr_9_2_List[2] ; 
	}
	if (count &gt;= 3){
      	spm_12_2 = spm_12_2 + &quot;&amp;&quot; + obr_9_2_List[3] ; 
	}
	if (count &gt;= 4){
      	spm_12_2 = spm_12_2 + &quot;&amp;&quot; + obr_9_2_List[4] ; 
	}
	if (count &gt;= 5){
      	spm_12_2 = spm_12_2 + &quot;&amp;&quot; + obr_9_2_List[5] ; 
	}
    msg[&apos;SPM&apos;][&apos;SPM.12&apos;][&apos;SPM.12.2&apos;] = spm_12_2;
    
	//SPM 14
	msg[&apos;SPM&apos;][&apos;SPM.14&apos;][&apos;SPM.14.1&apos;] = msg[&apos;OBR&apos;][0][&apos;OBR.15&apos;][&apos;OBR.15.3&apos;].toString();	

	//SPM 17
    msg[&apos;SPM&apos;][&apos;SPM.17&apos;][&apos;SPM.17.1&apos;] = msg[&apos;OBR&apos;][0][&apos;OBR.7&apos;][&apos;OBR.7.1&apos;].toString();
	msg[&apos;SPM&apos;][&apos;SPM.17&apos;][&apos;SPM.17.2&apos;] = msg[&apos;OBR&apos;][0][&apos;OBR.8&apos;][&apos;OBR.8.1&apos;].toString();

	//SPM 18
    msg[&apos;SPM&apos;][&apos;SPM.18&apos;] = msg[&apos;OBR&apos;][0][&apos;OBR.14&apos;][&apos;OBR.14.1&apos;].toString();

	//SPM 26
    msg[&apos;SPM&apos;][&apos;SPM.26&apos;] = msg[&apos;OBR&apos;][0][&apos;OBR.37&apos;][&apos;OBR.37.1&apos;].toString();	
  }
}
catch(e)
{
  logger.error(&quot;Error in Store transformed message to file Transformer: Add SPM Segment: &quot; + e.message);
  channelMap.put(&apos;componentErrors&apos;,  $(&apos;componentErrors&apos;) + &quot;Store transformed message to file Transformer: Add SPM Segment: \n&quot; + e.message + &quot; |\n&quot;);}</script>
            <type>JavaScript</type>
            <data class="map">
              <entry>
                <string>Script</string>
                <string>try
{
  if ($(&apos;addSPMSegment&apos;) == &apos;true&apos;)
  {
	logger.info(&quot;Adding SPM Segment&quot;);
	
	//Parsing the Original Message to determine the end of the first order-observation group. That is where we add this new SPM segment

	logger.info(&quot;Parsing the original Message.&quot;);
	var	originalMessage = messageObject.getRawData();
	var lines = new Array();
	lines = originalMessage.split(&quot;\\r&quot;);

	
	var obrCount = 0;
	var obxCount = 0;
	var nteCount = 0;
	var latestSeg = &apos;&apos;;
	var latestSegID = 0;
	var len = lines.length;

	for (var l=0;l&lt;len &amp;&amp; obrCount &lt; 2;l++) {
		if ( obrCount == 1 ){
			if(lines[l].startsWith(&quot;OBR|&quot;)) {
				obrCount++;
			}
			else if(lines[l].startsWith(&quot;OBX|&quot;)) {
				latestSeg = &apos;OBX&apos;;
				latestSegID = obxCount;
				obxCount++;
			}
			else if(lines[l].startsWith(&quot;NTE|&quot;)){
				latestSeg = &apos;NTE&apos;;
				latestSegID = nteCount;	
				nteCount++;
			}
		} else {
			if(lines[l].startsWith(&quot;OBR|&quot;)) {
				obrCount++;
			}else if(lines[l].startsWith(&quot;NTE|&quot;)){
				nteCount++;		    		
			}
		}		
	}
	
	logger.info(&quot;last segment : &quot; + latestSeg );
	logger.info(&quot;last segment ID : &quot; + latestSegID);
	logger.info(&quot;last segment in the first order observation group : &quot;+ msg[latestSeg][latestSegID]);

	// create SFT segment, per requirements in &quot;Message Processing Flow&quot; spreadsheet
    var newSPM = createSegment(&apos;SPM&apos;);

    // workaround to put the new segment at the end of the first observation group or at the end of the message
    if (latestSeg != &apos;&apos;)
    {
		//Adding it to the last segemnt in the first order observation group
		logger.info (&quot;Adding SPM to the last segemnt in the first order observation group&quot;);
	    msg[latestSeg][latestSegID] += newSPM;
    }
    else
    {
		//Add it at the end of the message
		logger.info (&quot;Adding SPM to the end of the message&quot;);
      	msg[&apos;SPM&apos;] += newSPM;
		
		//If we have a DSC segment in the message then it should appear after SPM 
		if (msg[&apos;DSC&apos;].length() &gt; 0){ 
			logger.info (&quot;Reordering DSC segment so that it comes after SPM&quot;);
			var dsc = msg[&apos;DSC&apos;];
		    delete msg[&apos;DSC&apos;];
    		msg[&apos;DSC&apos;] = dsc;
		}
    }
   
	//SPM 1
   	msg[&apos;SPM&apos;][&apos;SPM.1&apos;] = &apos;1&apos;;

	//SPM 2.1
    msg[&apos;SPM&apos;][&apos;SPM.2&apos;][&apos;SPM.2.1&apos;] = msg[&apos;OBR&apos;][0][&apos;OBR.2&apos;][&apos;OBR.2.1&apos;].toString() + &quot;&amp;&quot; +
                                     msg[&apos;OBR&apos;][0][&apos;OBR.2&apos;][&apos;OBR.2.2&apos;].toString() + &quot;&amp;&quot; +
                                     msg[&apos;OBR&apos;][0][&apos;OBR.2&apos;][&apos;OBR.2.3&apos;].toString() + &quot;&amp;&quot; +
                                     msg[&apos;OBR&apos;][0][&apos;OBR.2&apos;][&apos;OBR.2.4&apos;].toString();


	//SPM 2.2
    msg[&apos;SPM&apos;][&apos;SPM.2&apos;][&apos;SPM.2.2&apos;] = msg[&apos;OBR&apos;][0][&apos;OBR.3&apos;][&apos;OBR.3.1&apos;].toString() + &quot;&amp;&quot; +
                                     msg[&apos;OBR&apos;][0][&apos;OBR.3&apos;][&apos;OBR.3.2&apos;].toString() + &quot;&amp;&quot; +
                                     msg[&apos;OBR&apos;][0][&apos;OBR.3&apos;][&apos;OBR.3.3&apos;].toString() + &quot;&amp;&quot; +
                                     msg[&apos;OBR&apos;][0][&apos;OBR.3&apos;][&apos;OBR.3.4&apos;].toString();

	
	//SPM 3.1
	// Mirth apparently cannot support deeper than seg.x.y, so it&apos;s necessary to handle the subdivisions of the fields beyond this using split().
	var obr_29_1_List = msg[&apos;OBR&apos;][0][&apos;OBR.29&apos;][&apos;OBR.29.1&apos;].toString().split(&quot;&amp;&quot;);
	var count = (msg[&apos;OBR&apos;][0][&apos;OBR.29&apos;][&apos;OBR.29.1&apos;].toString().split(&quot;&amp;&quot;).length - 1);
	var spm_3_1 = &quot;&quot;;
    if (count &gt;= 0){
	  	spm_3_1 = obr_29_1_List[0] ;
    }
	if (count &gt;= 1){
	  	spm_3_1 = spm_3_1 + &quot;&amp;&quot; + obr_29_1_List[1] ; 
	}
	if (count &gt;= 2){
      	spm_3_1 = spm_3_1 + &quot;&amp;&quot; + obr_29_1_List[2] ; 
	}
	if (count &gt;= 3){
      	spm_3_1 = spm_3_1 + &quot;&amp;&quot; + obr_29_1_List[3] ; 
	}
	msg[&apos;SPM&apos;][&apos;SPM.3&apos;][&apos;SPM.3.1&apos;] = spm_3_1;

	//SPM 3.2
	var obr_29_2_List = msg[&apos;OBR&apos;][0][&apos;OBR.29&apos;][&apos;OBR.29.2&apos;].toString().split(&quot;&amp;&quot;);
	var count = (msg[&apos;OBR&apos;][0][&apos;OBR.29&apos;][&apos;OBR.29.2&apos;].toString().split(&quot;&amp;&quot;).length - 1);
	var spm_3_2 = &quot;&quot;;
    if (count &gt;= 0){
	  	spm_3_2 = obr_29_2_List[0] ;
    }
	if (count &gt;= 1){
	  	spm_3_2 = spm_3_2 + &quot;&amp;&quot; + obr_29_2_List[1] ; 
	}
	if (count &gt;= 2){
    	spm_3_2 = spm_3_2 + &quot;&amp;&quot; + obr_29_2_List[2] ; 
	}
	if (count &gt;= 3){
		spm_3_2 = spm_3_2 + &quot;&amp;&quot; + obr_29_2_List[3] ; 
	}
	msg[&apos;SPM&apos;][&apos;SPM.3&apos;][&apos;SPM.3.2&apos;] = spm_3_2;

	//SPM 4
    var obr_15_1 = msg[&apos;OBR&apos;][0][&apos;OBR.15&apos;][&apos;OBR.15.1&apos;].toString();
	if (obr_15_1 == null || obr_15_1 == &apos;&apos;){
		msg[&apos;SPM&apos;][&apos;SPM.4&apos;] = &apos;UNK^unknown^nullflavor&apos;;
	}
	else{
    	var obr_15_1_List = obr_15_1.toString().split(&quot;&amp;&quot;);
		var count = (obr_15_1.toString().split(&quot;&amp;&quot;).length - 1);
	    
	    if (count &gt;= 0){
		  msg[&apos;SPM&apos;][&apos;SPM.4&apos;][&apos;SPM.4.1&apos;] = obr_15_1_List[0] ; // OBR.15.1.1
		}
		if (count &gt;= 1){
		  msg[&apos;SPM&apos;][&apos;SPM.4&apos;][&apos;SPM.4.2&apos;] = obr_15_1_List[1]; // OBR.15.1.2
		}
		if (count &gt;= 2){
    	  msg[&apos;SPM&apos;][&apos;SPM.4&apos;][&apos;SPM.4.3&apos;] = obr_15_1_List[2]; // OBR.15.1.3
		}
		if (count &gt;= 3){
	      msg[&apos;SPM&apos;][&apos;SPM.4&apos;][&apos;SPM.4.4&apos;] = obr_15_1_List[3]; // OBR.15.1.1
		}
		if (count &gt;= 4){
    	  msg[&apos;SPM&apos;][&apos;SPM.4&apos;][&apos;SPM.4.5&apos;] = obr_15_1_List[4]; // OBR.15.1.2
		}
		if (count &gt;= 5){
	      msg[&apos;SPM&apos;][&apos;SPM.4&apos;][&apos;SPM.4.6&apos;] = obr_15_1_List[5]; // OBR.15.1.3
		}	  
   	}

	//SPM 6
	msg[&apos;SPM&apos;][&apos;SPM.6&apos;][&apos;SPM.6.1&apos;] = &apos;&apos;;
	msg[&apos;SPM&apos;][&apos;SPM.6&apos;][&apos;SPM.6.2&apos;] = msg[&apos;OBR&apos;][0][&apos;OBR.15&apos;][&apos;OBR.15.2&apos;];

	//SPM 7
	var obr_15_6_List = msg[&apos;OBR&apos;][0][&apos;OBR.15&apos;][&apos;OBR.15.6&apos;].toString().split(&quot;&amp;&quot;);
	var count = (msg[&apos;OBR&apos;][0][&apos;OBR.15&apos;][&apos;OBR.15.6&apos;].toString().split(&quot;&amp;&quot;).length - 1);
    if (count &gt;= 0){
   		msg[&apos;SPM&apos;][&apos;SPM.7&apos;][&apos;SPM.7.1&apos;] = obr_15_6_List[0]; // OBR.15.6.1
	}
    if (count &gt;= 1){
		msg[&apos;SPM&apos;][&apos;SPM.7&apos;][&apos;SPM.7.2&apos;] = obr_15_6_List[1]; // OBR.15.6.2
	}
    if (count &gt;= 2){
		msg[&apos;SPM&apos;][&apos;SPM.7&apos;][&apos;SPM.7.3&apos;] = obr_15_6_List[2]; // OBR.15.6.3
	}
    if (count &gt;= 3){
		msg[&apos;SPM&apos;][&apos;SPM.7&apos;][&apos;SPM.7.4&apos;] = obr_15_6_List[3]; // OBR.15.6.1
	}
    if (count &gt;= 4){
      	msg[&apos;SPM&apos;][&apos;SPM.7&apos;][&apos;SPM.7.5&apos;] = obr_15_6_List[4]; // OBR.15.6.2
	}
    if (count &gt;= 5){
      	msg[&apos;SPM&apos;][&apos;SPM.7&apos;][&apos;SPM.7.6&apos;] = obr_15_6_List[5]; // OBR.15.6.3	  
    }

	//SPM 8
    var obr_15_4_List = msg[&apos;OBR&apos;][0][&apos;OBR.15&apos;][&apos;OBR.15.4&apos;].toString().split(&quot;&amp;&quot;);	
	var count = (msg[&apos;OBR&apos;][0][&apos;OBR.15&apos;][&apos;OBR.15.4&apos;].toString().split(&quot;&amp;&quot;).length - 1);
    if (count &gt;= 0){
		msg[&apos;SPM&apos;][&apos;SPM.8&apos;][&apos;SPM.8.1&apos;] = obr_15_4_List[0]; // OBR.15.4.1
	}
	if (count &gt;= 1){
		msg[&apos;SPM&apos;][&apos;SPM.8&apos;][&apos;SPM.8.2&apos;] = obr_15_4_List[1]; // OBR.15.4.2
	}
	if (count &gt;= 2){
		msg[&apos;SPM&apos;][&apos;SPM.8&apos;][&apos;SPM.8.3&apos;] = obr_15_4_List[2]; // OBR.15.4.3
	}
	if (count &gt;= 3){
		msg[&apos;SPM&apos;][&apos;SPM.8&apos;][&apos;SPM.8.4&apos;] = obr_15_4_List[3]; // OBR.15.4.1
	}
	if (count &gt;= 4){
		msg[&apos;SPM&apos;][&apos;SPM.8&apos;][&apos;SPM.8.5&apos;] = obr_15_4_List[4]; // OBR.15.4.2
	}
	if (count &gt;= 5){
		msg[&apos;SPM&apos;][&apos;SPM.8&apos;][&apos;SPM.8.6&apos;] = obr_15_4_List[5]; // OBR.15.4.3
	}

	//SPM 9
	var obr_15_5_List = msg[&apos;OBR&apos;][0][&apos;OBR.15&apos;][&apos;OBR.15.5&apos;].toString().split(&quot;&amp;&quot;);
    var count = (msg[&apos;OBR&apos;][0][&apos;OBR.15&apos;][&apos;OBR.15.5&apos;].toString().split(&quot;&amp;&quot;).length - 1);
    if (count &gt;= 0){		
    	msg[&apos;SPM&apos;][&apos;SPM.9&apos;][&apos;SPM.9.1&apos;] = obr_15_5_List[0]; // OBR.15.5.1
	}
	if (count &gt;= 1){
      	msg[&apos;SPM&apos;][&apos;SPM.9&apos;][&apos;SPM.9.2&apos;] = obr_15_5_List[1]; // OBR.15.5.2
	}
	if (count &gt;= 2){
      	msg[&apos;SPM&apos;][&apos;SPM.9&apos;][&apos;SPM.9.3&apos;] = obr_15_5_List[2]; // OBR.15.5.3
	}
	if (count &gt;= 3){
	  	msg[&apos;SPM&apos;][&apos;SPM.9&apos;][&apos;SPM.9.4&apos;] = obr_15_5_List[3]; // OBR.15.5.1
	}
	if (count &gt;= 4){
      	msg[&apos;SPM&apos;][&apos;SPM.9&apos;][&apos;SPM.9.5&apos;] = obr_15_5_List[4]; // OBR.15.5.2
	}
	if (count &gt;= 5){
      	msg[&apos;SPM&apos;][&apos;SPM.9&apos;][&apos;SPM.9.6&apos;] = obr_15_5_List[5]; // OBR.15.5.3
    }

	//SPM 12.2
	msg[&apos;SPM&apos;][&apos;SPM.12&apos;][&apos;SPM.12.1&apos;] = msg[&apos;OBR&apos;][0][&apos;OBR.9&apos;][&apos;OBR.9.1&apos;].toString();
	var obr_9_2_List = msg[&apos;OBR&apos;][0][&apos;OBR.9&apos;][&apos;OBR.9.2&apos;].toString().split(&quot;&amp;&quot;);
	var count = (msg[&apos;OBR&apos;][0][&apos;OBR.9&apos;][&apos;OBR.9.2&apos;].toString().split(&quot;&amp;&quot;).length - 1);
	var spm_12_2 = &quot;&quot;;
    if (count &gt;= 0){
	  	spm_12_2 = obr_9_2_List[0] ;
    }
	if (count &gt;= 1){
	  	spm_12_2 = spm_12_2 + &quot;&amp;&quot; + obr_9_2_List[1] ; 
	}
	if (count &gt;= 2){
      	spm_12_2 = spm_12_2 + &quot;&amp;&quot; + obr_9_2_List[2] ; 
	}
	if (count &gt;= 3){
      	spm_12_2 = spm_12_2 + &quot;&amp;&quot; + obr_9_2_List[3] ; 
	}
	if (count &gt;= 4){
      	spm_12_2 = spm_12_2 + &quot;&amp;&quot; + obr_9_2_List[4] ; 
	}
	if (count &gt;= 5){
      	spm_12_2 = spm_12_2 + &quot;&amp;&quot; + obr_9_2_List[5] ; 
	}
    msg[&apos;SPM&apos;][&apos;SPM.12&apos;][&apos;SPM.12.2&apos;] = spm_12_2;
    
	//SPM 14
	msg[&apos;SPM&apos;][&apos;SPM.14&apos;][&apos;SPM.14.1&apos;] = msg[&apos;OBR&apos;][0][&apos;OBR.15&apos;][&apos;OBR.15.3&apos;].toString();	

	//SPM 17
    msg[&apos;SPM&apos;][&apos;SPM.17&apos;][&apos;SPM.17.1&apos;] = msg[&apos;OBR&apos;][0][&apos;OBR.7&apos;][&apos;OBR.7.1&apos;].toString();
	msg[&apos;SPM&apos;][&apos;SPM.17&apos;][&apos;SPM.17.2&apos;] = msg[&apos;OBR&apos;][0][&apos;OBR.8&apos;][&apos;OBR.8.1&apos;].toString();

	//SPM 18
    msg[&apos;SPM&apos;][&apos;SPM.18&apos;] = msg[&apos;OBR&apos;][0][&apos;OBR.14&apos;][&apos;OBR.14.1&apos;].toString();

	//SPM 26
    msg[&apos;SPM&apos;][&apos;SPM.26&apos;] = msg[&apos;OBR&apos;][0][&apos;OBR.37&apos;][&apos;OBR.37.1&apos;].toString();	
  }
}
catch(e)
{
  logger.error(&quot;Error in Store transformed message to file Transformer: Add SPM Segment: &quot; + e.message);
  channelMap.put(&apos;componentErrors&apos;,  $(&apos;componentErrors&apos;) + &quot;Store transformed message to file Transformer: Add SPM Segment: \n&quot; + e.message + &quot; |\n&quot;);}</string>
              </entry>
            </data>
          </step>
          <step>
            <sequenceNumber>3</sequenceNumber>
            <name>Mapping Tables</name>
            <script>// expression constructor:
function Expr(s,p){
	if(this.Array===Array){return new Expr(s,p);}
	if(p&amp;&amp;p.constructor===Object &amp;&amp; !p._val){
  		for(it in p){if(p.hasOwnProperty(it)){this[it]=p[it];}}
	}else{
		this.x=p;
	}
	this._val=s;
	return this;
}; 
Expr.prototype=({
	valueOf: function(){return this.v;}, 
    toString: function(){return this.v;}  
});//end Expr constructor



function _(k,v){ //item maker
  return new Expr( &quot;v&quot;  , {k:k, v:v} );
}


function List(r){//hashmaker
  r.get_2_5_1Code=function(key){ //items: finds by key
   for(it in r){
     if(r[it].k===key){return r[it];}
   }
  }
  r.get_2_3_1Code=function(value){ //items: finds by key
   for(it in r){
     if(r[it]==value){return r[it].k;}
   }
  }
 return r;
}


// a &quot;hash&quot; 2.3.1-2.5.1
var translationMap=List([ 
 _(&quot;I&quot;,&quot;1002-5&quot;),
 _(&quot;A&quot;,&quot;2028-9&quot;),
 _(&quot;P&quot;,&quot;2076-8&quot;),
 _(&quot;B&quot;,&quot;2054-5&quot;),
 _(&quot;W&quot;,&quot;2106-3&quot;),
 _(&quot;O&quot;,&quot;C&quot;),
 _(&quot;UNK&quot;,&quot;U&quot;),
 _(&quot;H&quot;,&quot;2135-2&quot;),
 _(&quot;N&quot;,&quot;2186-5&quot;),
 _(&quot;SN&quot;,&quot;NM&quot;),
 _(&quot;TX&quot;,&quot;ST&quot;),
 _(&quot;CE&quot;,&quot;CWE&quot;),
 _(&quot;TS&quot;,&quot;DTM&quot;),
 _(&quot;2.3.1&quot;,&quot;2.5.1&quot;)
]);

channelMap.put(&apos;translationMap&apos;, translationMap);</script>
            <type>JavaScript</type>
            <data class="map">
              <entry>
                <string>Script</string>
                <string>// expression constructor:
function Expr(s,p){
	if(this.Array===Array){return new Expr(s,p);}
	if(p&amp;&amp;p.constructor===Object &amp;&amp; !p._val){
  		for(it in p){if(p.hasOwnProperty(it)){this[it]=p[it];}}
	}else{
		this.x=p;
	}
	this._val=s;
	return this;
}; 
Expr.prototype=({
	valueOf: function(){return this.v;}, 
    toString: function(){return this.v;}  
});//end Expr constructor



function _(k,v){ //item maker
  return new Expr( &quot;v&quot;  , {k:k, v:v} );
}


function List(r){//hashmaker
  r.get_2_5_1Code=function(key){ //items: finds by key
   for(it in r){
     if(r[it].k===key){return r[it];}
   }
  }
  r.get_2_3_1Code=function(value){ //items: finds by key
   for(it in r){
     if(r[it]==value){return r[it].k;}
   }
  }
 return r;
}


// a &quot;hash&quot; 2.3.1-2.5.1
var translationMap=List([ 
 _(&quot;I&quot;,&quot;1002-5&quot;),
 _(&quot;A&quot;,&quot;2028-9&quot;),
 _(&quot;P&quot;,&quot;2076-8&quot;),
 _(&quot;B&quot;,&quot;2054-5&quot;),
 _(&quot;W&quot;,&quot;2106-3&quot;),
 _(&quot;O&quot;,&quot;C&quot;),
 _(&quot;UNK&quot;,&quot;U&quot;),
 _(&quot;H&quot;,&quot;2135-2&quot;),
 _(&quot;N&quot;,&quot;2186-5&quot;),
 _(&quot;SN&quot;,&quot;NM&quot;),
 _(&quot;TX&quot;,&quot;ST&quot;),
 _(&quot;CE&quot;,&quot;CWE&quot;),
 _(&quot;TS&quot;,&quot;DTM&quot;),
 _(&quot;2.3.1&quot;,&quot;2.5.1&quot;)
]);

channelMap.put(&apos;translationMap&apos;, translationMap);</string>
              </entry>
            </data>
          </step>
          <step>
            <sequenceNumber>4</sequenceNumber>
            <name>ORU R01 2.3.1 to 2.5.1 Transformation</name>
            <script>try
{
  // 2.3.1 to 2.5.1 ORU R01-specific MSH transformations
  if ( ($(&apos;translateToVersion&apos;) == &apos;2.5.1&apos;) &amp;&amp;
       ($(&apos;msgType&apos;) == &apos;ORU&apos;) &amp;&amp;
       ($(&apos;msgTriggerEvent&apos;) == &apos;R01&apos;) &amp;&amp;
       ($(&apos;msgHL7VersionID&apos;) == &apos;2.3.1&apos;) )
  {
    logger.info(&quot;Transforming ORU R01 2.3.1 message to 2.5.1&quot;);

	//MSH
	logger.info (&quot;Translating MSH Segment.&quot;);
	if (msg[&apos;MSH&apos;].length() &gt; 0){

		//Setting the default HD datatype value if the field MSH 3.2 is not populated
		var msh_3_2 = msg[&apos;MSH&apos;][&apos;MSH.3&apos;][&apos;MSH.3.2&apos;].toString();
		if ( msh_3_2 == null || msh_3_2 == &apos;&apos; ){
			msg[&apos;MSH&apos;][&apos;MSH.3&apos;][&apos;MSH.3.2&apos;] = $(&apos;HDDatatypeDefaultValue_MSH_3_2&apos;);
		}
		
		//Setting the default HD datatype value if the field MSH 3.3 is not populated
		var msh_3_3 = msg[&apos;MSH&apos;][&apos;MSH.3&apos;][&apos;MSH.3.3&apos;].toString();
		if ( msh_3_3 == null || msh_3_3 == &apos;&apos; ){
			msg[&apos;MSH&apos;][&apos;MSH.3&apos;][&apos;MSH.3.3&apos;] = $(&apos;HDDatatypeDefaultValue_MSH_3_3&apos;);
		}

		//Setting the default HD datatype value if the field MSH 4.2 is not populated
		var msh_4_2 = msg[&apos;MSH&apos;][&apos;MSH.4&apos;][&apos;MSH.4.2&apos;].toString();
		if ( msh_4_2 == null || msh_4_2 == &apos;&apos; ){
			msg[&apos;MSH&apos;][&apos;MSH.4&apos;][&apos;MSH.4.2&apos;] = $(&apos;HDDatatypeDefaultValue_MSH_4_2&apos;);
		}

		//Setting the default HD datatype value if the field MSH 4.3 is not populated
		var msh_4_3 = msg[&apos;MSH&apos;][&apos;MSH.4&apos;][&apos;MSH.4.3&apos;].toString(); 
		if ( msh_4_3 == null || msh_4_3 == &apos;&apos; ){
			msg[&apos;MSH&apos;][&apos;MSH.4&apos;][&apos;MSH.4.3&apos;] = $(&apos;HDDatatypeDefaultValue_MSH_4_3&apos;);
		}

		//Setting the default HD datatype value if the field MSH 5.2 is not populated
		var msh_5_2 = msg[&apos;MSH&apos;][&apos;MSH.5&apos;][&apos;MSH.5.2&apos;].toString();
		if ( msh_5_2 == null || msh_5_2 == &apos;&apos; ){
			msg[&apos;MSH&apos;][&apos;MSH.5&apos;][&apos;MSH.5.2&apos;] = $(&apos;HDDatatypeDefaultValue_MSH_5_2&apos;);
		}

		//Setting the default HD datatype value if the field MSH 5.3 is not populated
		var msh_5_3 = msg[&apos;MSH&apos;][&apos;MSH.5&apos;][&apos;MSH.5.3&apos;].toString(); 
		if ( msh_5_3 == null || msh_5_3 == &apos;&apos; ){
			msg[&apos;MSH&apos;][&apos;MSH.5&apos;][&apos;MSH.5.3&apos;] = $(&apos;HDDatatypeDefaultValue_MSH_5_3&apos;);
		}

		//Setting the default HD datatype value if the field MSH 6.2 is not populated
		var msh_6_2 = msg[&apos;MSH&apos;][&apos;MSH.6&apos;][&apos;MSH.6.2&apos;].toString();
		if ( msh_6_2 == null || msh_6_2 == &apos;&apos; ){
			msg[&apos;MSH&apos;][&apos;MSH.6&apos;][&apos;MSH.6.2&apos;] = $(&apos;HDDatatypeDefaultValue_MSH_6_2&apos;);
		}

		//Setting the default HD datatype value if the field MSH 6.3 is not populated
		var msh_6_3 = msg[&apos;MSH&apos;][&apos;MSH.6&apos;][&apos;MSH.6.3&apos;].toString(); 
		if ( msh_6_3 == null || msh_6_3 == &apos;&apos; ){
			msg[&apos;MSH&apos;][&apos;MSH.6&apos;][&apos;MSH.6.3&apos;] = $(&apos;HDDatatypeDefaultValue_MSH_6_3&apos;);
		}		
		
		msg[&apos;MSH&apos;][&apos;MSH.9&apos;] = &apos;ORU^R01^ORU_R01&apos;;
		msg[&apos;MSH&apos;][&apos;MSH.12&apos;][&apos;MSH.12.1&apos;] = $(&apos;translationMap&apos;).get_2_5_1Code(msg[&apos;MSH&apos;][&apos;MSH.12&apos;][&apos;MSH.12.1&apos;].toString());
		msg[&apos;MSH&apos;][&apos;MSH.21&apos;] = &apos;PHLabReport-NoAck^ELR_Receiver^2.16.840.1.113883.9.11^ISO&apos;;
	}

	//PID
	logger.info (&quot;Translating PID Segment.&quot;);
	if (msg[&apos;PID&apos;].length() &gt; 0){
		msg[&apos;PID&apos;][&apos;PID.1&apos;][&apos;PID.1.1&apos;] = &apos;1&apos;;

		j = 0;
		while (msg[&apos;PID&apos;][&apos;PID.3&apos;][j] != null){
			//Setting the default HD datatype value if the fields PID 3.4.1 and 3.4.2 is not populated	
			var pid_3_4_List = msg[&apos;PID&apos;][&apos;PID.3&apos;][j][&apos;PID.3.4&apos;].toString().split(&quot;&amp;&quot;);
			var count = (msg[&apos;PID&apos;][&apos;PID.3&apos;][j][&apos;PID.3.4&apos;].toString().split(&quot;&amp;&quot;).length - 1);
			if (count == 0){
				pid_3_4_1 = pid_3_4_List[0] ;
				pid_3_4_2 = $(&apos;HDDatatypeDefaultValue_PID_3_4_2&apos;);
				pid_3_4_3 = $(&apos;HDDatatypeDefaultValue_PID_3_4_3&apos;);
				msg[&apos;PID&apos;][&apos;PID.3&apos;][j][&apos;PID.3.4&apos;] = pid_3_4_1 + &apos;&amp;&apos; + pid_3_4_2 + &apos;&amp;&apos; + pid_3_4_3;
			}else if (count == 1){
				pid_3_4_1 = pid_3_4_List[0] ;
				pid_3_4_2 = pid_3_4_List[1] ;
				pid_3_4_3 = $(&apos;HDDatatypeDefaultValue_PID_3_4_3&apos;);
				msg[&apos;PID&apos;][&apos;PID.3&apos;][j][&apos;PID.3.4&apos;] = pid_3_4_1 + &apos;&amp;&apos; + pid_3_4_2 + &apos;&amp;&apos; + pid_3_4_3;
			}

			//Setting the default HD datatype value if the fields PID 3.6.1 and 3.6.2 is not populated	
			var pid_3_6_List = msg[&apos;PID&apos;][&apos;PID.3&apos;][j][&apos;PID.3.6&apos;].toString().split(&quot;&amp;&quot;);
			var count = (msg[&apos;PID&apos;][&apos;PID.3&apos;][j][&apos;PID.3.6&apos;].toString().split(&quot;&amp;&quot;).length - 1);
			if (count == 0){
				pid_3_6_1 = pid_3_6_List[0] ;
				pid_3_6_2 = $(&apos;HDDatatypeDefaultValue_PID_3_6_2&apos;);
				pid_3_6_3 = $(&apos;HDDatatypeDefaultValue_PID_3_6_3&apos;);
				msg[&apos;PID&apos;][&apos;PID.3&apos;][j][&apos;PID.3.6&apos;] = pid_3_6_1 + &apos;&amp;&apos; + pid_3_6_2 + &apos;&amp;&apos; + pid_3_6_3;
			}else if (count == 1){
				pid_3_6_1 = pid_3_6_List[0] ;
				pid_3_6_2 = pid_3_6_List[1] ;
				pid_3_6_3 = $(&apos;HDDatatypeDefaultValue_PID_3_6_3&apos;);
				msg[&apos;PID&apos;][&apos;PID.3&apos;][j][&apos;PID.3.6&apos;] = pid_3_6_1 + &apos;&amp;&apos; + pid_3_6_2 + &apos;&amp;&apos; + pid_3_6_3;
			}
			j++;
		}

		//PID-4 is repeating in 231 and not so in 251. Hence, deleting all the repetitions except the first one.
		while (msg[&apos;PID&apos;][&apos;PID.4&apos;][1] != null){
			delete msg[&apos;PID&apos;][&apos;PID.4&apos;][1];
		}

		//PID-6 is repeating in 231 and not so in 251. Hence, deleting all the repetitions except the first one.
		while (msg[&apos;PID&apos;][&apos;PID.6&apos;][1] != null){
			delete msg[&apos;PID&apos;][&apos;PID.6&apos;][1];
		}

		//PID-9 is repeating in 231 and not so in 251. Hence, deleting all the repetitions except the first one.
		while (msg[&apos;PID&apos;][&apos;PID.9&apos;][1] != null){
			delete msg[&apos;PID&apos;][&apos;PID.9&apos;][1];
		}

		//PID 10 - Handle possible repetitions &amp; Translate Race Code
		j=0;
		while (msg[&apos;PID&apos;][&apos;PID.10&apos;][j] != null){
			msg[&apos;PID&apos;][&apos;PID.10&apos;][j][&apos;PID.10.1&apos;] = $(&apos;translationMap&apos;).get_2_5_1Code(msg[&apos;PID&apos;][&apos;PID.10&apos;][j][&apos;PID.10.1&apos;].toString());
			msg[&apos;PID&apos;][&apos;PID.10&apos;][j][&apos;PID.10.3&apos;] = &apos;CDCREC&apos;; //PID 10.3 always set to the literal &apos;CDCREC&apos;
			j++;
		}

		//PID-12 is repeating in 231 and not so in 251. Hence, deleting all the repetitions except the first one.
		while (msg[&apos;PID&apos;][&apos;PID.12&apos;][1] != null){
			delete msg[&apos;PID&apos;][&apos;PID.12&apos;][1];
		}

		//PID 22 - Handle possible repetitions &amp; Translate Ethnic Group Code
		j=0;
		while (msg[&apos;PID&apos;][&apos;PID.22&apos;][j] != null){
			msg[&apos;PID&apos;][&apos;PID.22&apos;][j][&apos;PID.22.1&apos;] = $(&apos;translationMap&apos;).get_2_5_1Code(msg[&apos;PID&apos;][&apos;PID.22&apos;][j][&apos;PID.22.1&apos;].toString());
			msg[&apos;PID&apos;][&apos;PID.22&apos;][j][&apos;PID.22.3&apos;] = &apos;CDCREC&apos;; //PID 22.3 always set to the literal &apos;CDCREC&apos;
			j++;
		}

		msg[&apos;PID&apos;][&apos;PID.31&apos;] = &apos;&apos;;
		msg[&apos;PID&apos;][&apos;PID.32&apos;] = &apos;&apos;; 
		msg[&apos;PID&apos;][&apos;PID.33&apos;] = &apos;&apos;;
		msg[&apos;PID&apos;][&apos;PID.34&apos;] = &apos;&apos;;
		msg[&apos;PID&apos;][&apos;PID.35&apos;] = &apos;&apos;;
		msg[&apos;PID&apos;][&apos;PID.36&apos;] = &apos;&apos;;
		msg[&apos;PID&apos;][&apos;PID.37&apos;] = &apos;&apos;;
		msg[&apos;PID&apos;][&apos;PID.38&apos;] = &apos;&apos;;
		msg[&apos;PID&apos;][&apos;PID.39&apos;] = &apos;&apos;;
	}

	//PD1 3 - XON DataType- move the 3rd component to the new 10th component for the 251 transformed message 
	//PD1
	logger.info (&quot;Translating PD1 Segment.&quot;);
	if (msg[&apos;PD1&apos;].length() &gt; 0){
		//PD1-1 is repeating in 231 and not so in 251. Hence, deleting all the repetitions except the first one.
		while (msg[&apos;PD1&apos;][&apos;PD1.1&apos;][1] != null){
			delete msg[&apos;PD1&apos;][&apos;PD1.1&apos;][1];
		}

		//PD1 - 3
		if (msg[&apos;PD1&apos;][&apos;PD1.3&apos;][0] != null){
			var pd1_3_3 = msg[&apos;PD1&apos;][&apos;PD1.3&apos;][0][&apos;PD1.3.3&apos;].toString();
			msg[&apos;PD1&apos;][&apos;PD1.3&apos;][0][&apos;PD1.3.3&apos;] = &apos;&apos;;
			msg[&apos;PD1&apos;][&apos;PD1.3&apos;][0][&apos;PD1.3.10&apos;] = pd1_3_3;
		}

		//PD1-3 is repeating in 231 and not so in 251. Hence, deleting all the repetitions except the first one.
		while (msg[&apos;PD1&apos;][&apos;PD1.3&apos;][1] != null){
			delete msg[&apos;PD1&apos;][&apos;PD1.3&apos;][1];
		}

		//PD1-4 is repeating in 231 and not so in 251. Hence, deleting all the repetitions except the first one.
		while (msg[&apos;PD1&apos;][&apos;PD1.4&apos;][1] != null){
			delete msg[&apos;PD1&apos;][&apos;PD1.4&apos;][1];
		}

		//PD1-10 is repeating in 231 and not so in 251. Hence, deleting all the repetitions except the first one.
		while (msg[&apos;PD1&apos;][&apos;PD1.10&apos;][1] != null){
			delete msg[&apos;PD1&apos;][&apos;PD1.10&apos;][1];
		}

		msg[&apos;PD1&apos;][&apos;PD1.13&apos;] = &apos;&apos;;
		msg[&apos;PD1&apos;][&apos;PD1.14&apos;] = &apos;&apos;;
		msg[&apos;PD1&apos;][&apos;PD1.15&apos;] = &apos;&apos;;
		msg[&apos;PD1&apos;][&apos;PD1.16&apos;] = &apos;&apos;;
		msg[&apos;PD1&apos;][&apos;PD1.17&apos;] = &apos;&apos;;
		msg[&apos;PD1&apos;][&apos;PD1.18&apos;] = &apos;&apos;;
		msg[&apos;PD1&apos;][&apos;PD1.19&apos;] = &apos;&apos;;
		msg[&apos;PD1&apos;][&apos;PD1.20&apos;] = &apos;&apos;;
		msg[&apos;PD1&apos;][&apos;PD1.21&apos;] = &apos;&apos;;
	}	

	//NK1 13 - XON DataType- move the 3rd component to the new 10th component for the 251 transformed message 
	//NK1	
	logger.info (&quot;Translating NK1 Segment(s).&quot;);
	i=0;
	while(msg[&apos;NK1&apos;][i] != null) 
    {  
		//NK1-6 is repeating in 231 and not so in 251. Hence, deleting all the repetitions except the first one.
		while (msg[&apos;NK1&apos;][i][&apos;NK1.6&apos;][1] != null){
			delete msg[&apos;NK1&apos;][i][&apos;NK1.6&apos;][1];
		}

		//NK1 - 13
		if (msg[&apos;NK1&apos;][i][&apos;NK1.13&apos;][0] != null){
			var nk1_13_3 = msg[&apos;NK1&apos;][i][&apos;NK1.13&apos;][0][&apos;NK1.13.3&apos;].toString();
			msg[&apos;NK1&apos;][i][&apos;NK1.13&apos;][0][&apos;NK1.13.3&apos;] = &apos;&apos;;
			msg[&apos;NK1&apos;][i][&apos;NK1.13&apos;][0][&apos;NK1.13.10&apos;] = nk1_13_3;
		}

		//NK1-13 is repeating in 231 and not so in 251. Hence, deleting all the repetitions except the first one.
		while (msg[&apos;NK1&apos;][i][&apos;NK1.13&apos;][1] != null){
			delete msg[&apos;NK1&apos;][i][&apos;NK1.13&apos;][1];
		}

		//NK1-17 is repeating in 231 and not so in 251. Hence, deleting all the repetitions except the first one.
		while (msg[&apos;NK1&apos;][i][&apos;NK1.17&apos;][1] != null){
			delete msg[&apos;NK1&apos;][i][&apos;NK1.17&apos;][1];
		}

		//NK1-18 is repeating in 231 and not so in 251. Hence, deleting all the repetitions except the first one.
		while (msg[&apos;NK1&apos;][i][&apos;NK1.18&apos;][1] != null){
			delete msg[&apos;NK1&apos;][i][&apos;NK1.18&apos;][1];
		}

		//NK1-19 is repeating in 231 and not so in 251. Hence, deleting all the repetitions except the first one.
		while (msg[&apos;NK1&apos;][i][&apos;NK1.19&apos;][1] != null){
			delete msg[&apos;NK1&apos;][i][&apos;NK1.19&apos;][1];
		}

		//NK1-22 is repeating in 231 and not so in 251. Hence, deleting all the repetitions except the first one.
		while (msg[&apos;NK1&apos;][i][&apos;NK1.22&apos;][1] != null){
			delete msg[&apos;NK1&apos;][i][&apos;NK1.22&apos;][1];
		}

		//NK1-26 is repeating in 231 and not so in 251. Hence, deleting all the repetitions except the first one.
		while (msg[&apos;NK1&apos;][i][&apos;NK1.26&apos;][1] != null){
			delete msg[&apos;NK1&apos;][i][&apos;NK1.26&apos;][1];
		}

		//NK1-28 is repeating in 231 and not so in 251. Hence, deleting all the repetitions except the first one.
		while (msg[&apos;NK1&apos;][i][&apos;NK1.28&apos;][1] != null){
			delete msg[&apos;NK1&apos;][i][&apos;NK1.28&apos;][1];
		}

		//NK1-29 is repeating in 231 and not so in 251. Hence, deleting all the repetitions except the first one.
		while (msg[&apos;NK1&apos;][i][&apos;NK1.29&apos;][1] != null){
			delete msg[&apos;NK1&apos;][i][&apos;NK1.29&apos;][1];
		}

		//NK1-35 is repeating in 231 and not so in 251. Hence, deleting all the repetitions except the first one.
		while (msg[&apos;NK1&apos;][i][&apos;NK1.35&apos;][1] != null){
			delete msg[&apos;NK1&apos;][i][&apos;NK1.35&apos;][1];
		}

		msg[&apos;NK1&apos;][i][&apos;NK1.38&apos;] = &apos;&apos;;
		msg[&apos;NK1&apos;][i][&apos;NK1.39&apos;] = &apos;&apos;;
		i++;
	}

	//OBR
	logger.info (&quot;Translating OBR Segment(s).&quot;);
	i=0;
	while(msg[&apos;OBR&apos;][i] != null){
		msg[&apos;OBR&apos;][i][&apos;OBR.14&apos;] = &apos;&apos;;
		msg[&apos;OBR&apos;][i][&apos;OBR.15&apos;] = &apos;&apos;;
		msg[&apos;OBR&apos;][i][&apos;OBR.29&apos;] = &apos;&apos;;

		//OBR-38 is repeating in 231 and not so in 251. Hence, deleting all the repetitions except the first one.
		while (msg[&apos;OBR&apos;][i][&apos;OBR.38&apos;][1] != null){
			delete msg[&apos;OBR&apos;][i][&apos;OBR.38&apos;][1];
		}

		//OBR-43 is repeating in 231 and not so in 251. Hence, deleting all the repetitions except the first one.
		while (msg[&apos;OBR&apos;][i][&apos;OBR.43&apos;][1] != null){
			delete msg[&apos;OBR&apos;][i][&apos;OBR.43&apos;][1];
		}

		msg[&apos;OBR&apos;][i][&apos;OBR.46&apos;] = &apos;&apos;;
		msg[&apos;OBR&apos;][i][&apos;OBR.47&apos;] = &apos;&apos;;
		msg[&apos;OBR&apos;][i][&apos;OBR.48&apos;] = &apos;&apos;;
		msg[&apos;OBR&apos;][i][&apos;OBR.49&apos;] = &apos;&apos;;
		msg[&apos;OBR&apos;][i][&apos;OBR.50&apos;] = &apos;&apos;;
		i++;
	}


	//ORC	
	logger.info (&quot;Translating ORC Segment.&quot;);
	if (msg[&apos;ORC&apos;].length() &gt; 0){
		msg[&apos;ORC&apos;][&apos;ORC.1&apos;][&apos;ORC.1.1&apos;] = &apos;RE&apos;;

		//ORC 21 - XON DataType- move the 3rd component to the new 10th component for the 251 transformed message 
		j=0;
		while (msg[&apos;ORC&apos;][&apos;ORC.21&apos;][j] != null){
			var orc_21_3 = msg[&apos;ORC&apos;][&apos;ORC.21&apos;][j][&apos;ORC.21.3&apos;].toString();
			msg[&apos;ORC&apos;][&apos;ORC.21&apos;][j][&apos;ORC.21.3&apos;] = &apos;&apos;;
			msg[&apos;ORC&apos;][&apos;ORC.21&apos;][j][&apos;ORC.21.10&apos;] = orc_21_3;
			j++;
		}

		//ORC 23 is required in 251
		var orc_23 = msg[&apos;ORC&apos;][&apos;ORC.23&apos;].toString();
		if ( orc_23 == null || orc_23 == &apos;&apos;){
			msg[&apos;ORC&apos;][&apos;ORC.23&apos;] = &apos;^^^^^000^0000000&apos;;
		}

		msg[&apos;ORC&apos;][&apos;ORC.25&apos;] = &apos;&apos;;
		msg[&apos;ORC&apos;][&apos;ORC.26&apos;] = &apos;&apos;;
		msg[&apos;ORC&apos;][&apos;ORC.27&apos;] = &apos;&apos;;
		msg[&apos;ORC&apos;][&apos;ORC.28&apos;] = &apos;&apos;;
		msg[&apos;ORC&apos;][&apos;ORC.29&apos;] = &apos;&apos;;
		msg[&apos;ORC&apos;][&apos;ORC.30&apos;] = &apos;&apos;;
		msg[&apos;ORC&apos;][&apos;ORC.31&apos;] = &apos;&apos;;	
	}
	

	//OBX
	logger.info (&quot;Translating OBX Segment(s).&quot;);
	i=0;
	while(msg[&apos;OBX&apos;][i] != null) 
    {  	
		var obx_14_1 = msg[&apos;OBX&apos;][i][&apos;OBX.14&apos;][&apos;OBX.14.1&apos;].toString();
		var obx_15 = msg[&apos;OBX&apos;][i][&apos;OBX.15&apos;];
		var obx_15_1 = msg[&apos;OBX&apos;][i][&apos;OBX.15&apos;][&apos;OBX.15.1&apos;].toString();
		var obx_15_2 = msg[&apos;OBX&apos;][i][&apos;OBX.15&apos;][&apos;OBX.15.2&apos;].toString();
		var obx_15_3 = msg[&apos;OBX&apos;][i][&apos;OBX.15&apos;][&apos;OBX.15.3&apos;].toString();

		//OBX-5 is repeating in 231 and not so in 251. Hence, deleting all the repetitions except the first one.
		while (msg[&apos;OBX&apos;][i][&apos;OBX.5&apos;][1] != null){
			delete msg[&apos;OBX&apos;][i][&apos;OBX.5&apos;][1];
		}

		//OBX-10 is repeating in 231 and not so in 251. Hence, deleting all the repetitions except the first one.
		while (msg[&apos;OBX&apos;][i][&apos;OBX.10&apos;][1] != null){
			delete msg[&apos;OBX&apos;][i][&apos;OBX.10&apos;][1];
		}

		msg[&apos;OBX&apos;][i][&apos;OBX.14&apos;] = &apos;&apos;;		
		msg[&apos;OBX&apos;][i][&apos;OBX.15&apos;] = &apos;&apos;;

		msg[&apos;OBX&apos;][i][&apos;OBX.18&apos;] = &apos;&apos;;
		
		msg[&apos;OBX&apos;][i][&apos;OBX.19&apos;][&apos;OBX.19.1&apos;] = obx_14_1;

		msg[&apos;OBX&apos;][i][&apos;OBX.20&apos;] = &apos;&apos;;
		msg[&apos;OBX&apos;][i][&apos;OBX.21&apos;] = &apos;&apos;;
		msg[&apos;OBX&apos;][i][&apos;OBX.22&apos;] = &apos;&apos;;
		
		//OBX-23 is required in 251, so set a literal value to it if OBX-15 values are null
		if ( obx_15_1 != null &amp;&amp; obx_15_1 != &apos;&apos; &amp;&amp; obx_15_2 != null &amp;&amp; obx_15_2 != &apos;&apos; &amp;&amp; obx_15_3 != null &amp;&amp; obx_15_3 != &apos;&apos;){
			msg[&apos;OBX&apos;][i][&apos;OBX.23&apos;][&apos;OBX.23.1&apos;] = obx_15_2;
		
			//OBX 23 - XON DataType- We are only setting OBX 23.3 component to empty value as there is another transformation rule defined for OBX 23.10
			msg[&apos;OBX&apos;][i][&apos;OBX.23&apos;][&apos;OBX.23.3&apos;] = &apos;&apos;;
		
			msg[&apos;OBX&apos;][i][&apos;OBX.23&apos;][&apos;OBX.23.6&apos;] = obx_15_3;
			msg[&apos;OBX&apos;][i][&apos;OBX.23&apos;][&apos;OBX.23.10&apos;] = obx_15_1; //part of transformation rule definied explicitly for OBX 23
		}
		else{
			msg[&apos;OBX&apos;][i][&apos;OBX.23&apos;] = &apos;Not present in v2.3.1 message&apos;;
		}

		msg[&apos;OBX&apos;][i][&apos;OBX.24&apos;][&apos;OBX.24.1&apos;] = &apos;Not present in v2.3.1 message&apos;;
		msg[&apos;OBX&apos;][i][&apos;OBX.25&apos;] = &apos;&apos;;

		i++;
	}
	
	//PV1
	logger.info (&quot;Translating PV1 Segment.&quot;);
	if (msg[&apos;PV1&apos;].length() &gt; 0){
		msg[&apos;PV1&apos;][&apos;PV1.1&apos;][&apos;PV1.1.1&apos;] = &apos;1&apos;;

		//PV1-15 is repeating in 231 and not so in 251. Hence, deleting all the repetitions except the first one.
		while (msg[&apos;PV1&apos;][&apos;PV1.15&apos;][1] != null){
			delete msg[&apos;PV1&apos;][&apos;PV1.15&apos;][1];
		}

		//PV1-24 is repeating in 231 and not so in 251. Hence, deleting all the repetitions except the first one.
		while (msg[&apos;PV1&apos;][&apos;PV1.24&apos;][1] != null){
			delete msg[&apos;PV1&apos;][&apos;PV1.24&apos;][1];
		}

		//PV1-25 is repeating in 231 and not so in 251. Hence, deleting all the repetitions except the first one.
		while (msg[&apos;PV1&apos;][&apos;PV1.25&apos;][1] != null){
			delete msg[&apos;PV1&apos;][&apos;PV1.25&apos;][1];
		}

		//PV1-26 is repeating in 231 and not so in 251. Hence, deleting all the repetitions except the first one.
		while (msg[&apos;PV1&apos;][&apos;PV1.26&apos;][1] != null){
			delete msg[&apos;PV1&apos;][&apos;PV1.26&apos;][1];
		}

		//PV1-27 is repeating in 231 and not so in 251. Hence, deleting all the repetitions except the first one.
		while (msg[&apos;PV1&apos;][&apos;PV1.27&apos;][1] != null){
			delete msg[&apos;PV1&apos;][&apos;PV1.27&apos;][1];
		}

		//PV1-52 is repeating in 231 and not so in 251. Hence, deleting all the repetitions except the first one.
		while (msg[&apos;PV1&apos;][&apos;PV1.52&apos;][1] != null){
			delete msg[&apos;PV1&apos;][&apos;PV1.52&apos;][1];
		}
	}

	//PV2
	logger.info (&quot;Translating PV2 Segment.&quot;);
	if (msg[&apos;PV2&apos;].length() &gt; 0){	
		//PV2-5 is repeating in 231 and not so in 251. Hence, deleting all the repetitions except the first one.
		while (msg[&apos;PV2&apos;][&apos;PV2.5&apos;][1] != null){
			delete msg[&apos;PV2&apos;][&apos;PV2.5&apos;][1];
		}

		//PV2-13 is repeating in 231 and not so in 251. Hence, deleting all the repetitions except the first one.
		while (msg[&apos;PV2&apos;][&apos;PV2.13&apos;][1] != null){
			delete msg[&apos;PV2&apos;][&apos;PV2.13&apos;][1];
		}
		
		//PV2 23 - XON DataType- move the 3rd component to the new 10th component for the 251 transformed message
		j=0;
		while (msg[&apos;PV2&apos;][&apos;PV2.23&apos;][j] != null){
			var pv2_23_3 = msg[&apos;PV2&apos;][&apos;PV2.23&apos;][j][&apos;PV2.23.3&apos;].toString();
			msg[&apos;PV2&apos;][&apos;PV2.23&apos;][j][&apos;PV2.23.3&apos;] = &apos;&apos;;
			msg[&apos;PV2&apos;][&apos;PV2.23&apos;][j][&apos;PV2.23.10&apos;] = pv2_23_3;
			j++;
		}
	
		msg[&apos;PV2&apos;][&apos;PV2.38&apos;] = &apos;&apos;;
		msg[&apos;PV2&apos;][&apos;PV2.39&apos;] = &apos;&apos;;
		msg[&apos;PV2&apos;][&apos;PV2.40&apos;] = &apos;&apos;;
		msg[&apos;PV2&apos;][&apos;PV2.41&apos;] = &apos;&apos;;
		msg[&apos;PV2&apos;][&apos;PV2.42&apos;] = &apos;&apos;;
		msg[&apos;PV2&apos;][&apos;PV2.43&apos;] = &apos;&apos;;
		msg[&apos;PV2&apos;][&apos;PV2.44&apos;] = &apos;&apos;;
		msg[&apos;PV2&apos;][&apos;PV2.45&apos;] = &apos;&apos;;
		msg[&apos;PV2&apos;][&apos;PV2.46&apos;] = &apos;&apos;;
		msg[&apos;PV2&apos;][&apos;PV2.47&apos;] = &apos;&apos;;
		msg[&apos;PV2&apos;][&apos;PV2.48&apos;] = &apos;&apos;;
		msg[&apos;PV2&apos;][&apos;PV2.49&apos;] = &apos;&apos;;
	}

  }
}
catch(e)
{
  logger.error(&quot;Error in Store transformed message to file Transformer: ORU R01 2.3.1 to 2.5.1 Transformation: &quot; + e.message);
  channelMap.put(&apos;componentErrors&apos;,  $(&apos;componentErrors&apos;) + &quot;Store transformed message to file Transformer: ORU R01 2.3.1 to 2.5.1 Transformation: \n&quot; + e.message + &quot; |\n&quot;);
}</script>
            <type>JavaScript</type>
            <data class="map">
              <entry>
                <string>Script</string>
                <string>try
{
  // 2.3.1 to 2.5.1 ORU R01-specific MSH transformations
  if ( ($(&apos;translateToVersion&apos;) == &apos;2.5.1&apos;) &amp;&amp;
       ($(&apos;msgType&apos;) == &apos;ORU&apos;) &amp;&amp;
       ($(&apos;msgTriggerEvent&apos;) == &apos;R01&apos;) &amp;&amp;
       ($(&apos;msgHL7VersionID&apos;) == &apos;2.3.1&apos;) )
  {
    logger.info(&quot;Transforming ORU R01 2.3.1 message to 2.5.1&quot;);

	//MSH
	logger.info (&quot;Translating MSH Segment.&quot;);
	if (msg[&apos;MSH&apos;].length() &gt; 0){

		//Setting the default HD datatype value if the field MSH 3.2 is not populated
		var msh_3_2 = msg[&apos;MSH&apos;][&apos;MSH.3&apos;][&apos;MSH.3.2&apos;].toString();
		if ( msh_3_2 == null || msh_3_2 == &apos;&apos; ){
			msg[&apos;MSH&apos;][&apos;MSH.3&apos;][&apos;MSH.3.2&apos;] = $(&apos;HDDatatypeDefaultValue_MSH_3_2&apos;);
		}
		
		//Setting the default HD datatype value if the field MSH 3.3 is not populated
		var msh_3_3 = msg[&apos;MSH&apos;][&apos;MSH.3&apos;][&apos;MSH.3.3&apos;].toString();
		if ( msh_3_3 == null || msh_3_3 == &apos;&apos; ){
			msg[&apos;MSH&apos;][&apos;MSH.3&apos;][&apos;MSH.3.3&apos;] = $(&apos;HDDatatypeDefaultValue_MSH_3_3&apos;);
		}

		//Setting the default HD datatype value if the field MSH 4.2 is not populated
		var msh_4_2 = msg[&apos;MSH&apos;][&apos;MSH.4&apos;][&apos;MSH.4.2&apos;].toString();
		if ( msh_4_2 == null || msh_4_2 == &apos;&apos; ){
			msg[&apos;MSH&apos;][&apos;MSH.4&apos;][&apos;MSH.4.2&apos;] = $(&apos;HDDatatypeDefaultValue_MSH_4_2&apos;);
		}

		//Setting the default HD datatype value if the field MSH 4.3 is not populated
		var msh_4_3 = msg[&apos;MSH&apos;][&apos;MSH.4&apos;][&apos;MSH.4.3&apos;].toString(); 
		if ( msh_4_3 == null || msh_4_3 == &apos;&apos; ){
			msg[&apos;MSH&apos;][&apos;MSH.4&apos;][&apos;MSH.4.3&apos;] = $(&apos;HDDatatypeDefaultValue_MSH_4_3&apos;);
		}

		//Setting the default HD datatype value if the field MSH 5.2 is not populated
		var msh_5_2 = msg[&apos;MSH&apos;][&apos;MSH.5&apos;][&apos;MSH.5.2&apos;].toString();
		if ( msh_5_2 == null || msh_5_2 == &apos;&apos; ){
			msg[&apos;MSH&apos;][&apos;MSH.5&apos;][&apos;MSH.5.2&apos;] = $(&apos;HDDatatypeDefaultValue_MSH_5_2&apos;);
		}

		//Setting the default HD datatype value if the field MSH 5.3 is not populated
		var msh_5_3 = msg[&apos;MSH&apos;][&apos;MSH.5&apos;][&apos;MSH.5.3&apos;].toString(); 
		if ( msh_5_3 == null || msh_5_3 == &apos;&apos; ){
			msg[&apos;MSH&apos;][&apos;MSH.5&apos;][&apos;MSH.5.3&apos;] = $(&apos;HDDatatypeDefaultValue_MSH_5_3&apos;);
		}

		//Setting the default HD datatype value if the field MSH 6.2 is not populated
		var msh_6_2 = msg[&apos;MSH&apos;][&apos;MSH.6&apos;][&apos;MSH.6.2&apos;].toString();
		if ( msh_6_2 == null || msh_6_2 == &apos;&apos; ){
			msg[&apos;MSH&apos;][&apos;MSH.6&apos;][&apos;MSH.6.2&apos;] = $(&apos;HDDatatypeDefaultValue_MSH_6_2&apos;);
		}

		//Setting the default HD datatype value if the field MSH 6.3 is not populated
		var msh_6_3 = msg[&apos;MSH&apos;][&apos;MSH.6&apos;][&apos;MSH.6.3&apos;].toString(); 
		if ( msh_6_3 == null || msh_6_3 == &apos;&apos; ){
			msg[&apos;MSH&apos;][&apos;MSH.6&apos;][&apos;MSH.6.3&apos;] = $(&apos;HDDatatypeDefaultValue_MSH_6_3&apos;);
		}		
		
		msg[&apos;MSH&apos;][&apos;MSH.9&apos;] = &apos;ORU^R01^ORU_R01&apos;;
		msg[&apos;MSH&apos;][&apos;MSH.12&apos;][&apos;MSH.12.1&apos;] = $(&apos;translationMap&apos;).get_2_5_1Code(msg[&apos;MSH&apos;][&apos;MSH.12&apos;][&apos;MSH.12.1&apos;].toString());
		msg[&apos;MSH&apos;][&apos;MSH.21&apos;] = &apos;PHLabReport-NoAck^ELR_Receiver^2.16.840.1.113883.9.11^ISO&apos;;
	}

	//PID
	logger.info (&quot;Translating PID Segment.&quot;);
	if (msg[&apos;PID&apos;].length() &gt; 0){
		msg[&apos;PID&apos;][&apos;PID.1&apos;][&apos;PID.1.1&apos;] = &apos;1&apos;;

		j = 0;
		while (msg[&apos;PID&apos;][&apos;PID.3&apos;][j] != null){
			//Setting the default HD datatype value if the fields PID 3.4.1 and 3.4.2 is not populated	
			var pid_3_4_List = msg[&apos;PID&apos;][&apos;PID.3&apos;][j][&apos;PID.3.4&apos;].toString().split(&quot;&amp;&quot;);
			var count = (msg[&apos;PID&apos;][&apos;PID.3&apos;][j][&apos;PID.3.4&apos;].toString().split(&quot;&amp;&quot;).length - 1);
			if (count == 0){
				pid_3_4_1 = pid_3_4_List[0] ;
				pid_3_4_2 = $(&apos;HDDatatypeDefaultValue_PID_3_4_2&apos;);
				pid_3_4_3 = $(&apos;HDDatatypeDefaultValue_PID_3_4_3&apos;);
				msg[&apos;PID&apos;][&apos;PID.3&apos;][j][&apos;PID.3.4&apos;] = pid_3_4_1 + &apos;&amp;&apos; + pid_3_4_2 + &apos;&amp;&apos; + pid_3_4_3;
			}else if (count == 1){
				pid_3_4_1 = pid_3_4_List[0] ;
				pid_3_4_2 = pid_3_4_List[1] ;
				pid_3_4_3 = $(&apos;HDDatatypeDefaultValue_PID_3_4_3&apos;);
				msg[&apos;PID&apos;][&apos;PID.3&apos;][j][&apos;PID.3.4&apos;] = pid_3_4_1 + &apos;&amp;&apos; + pid_3_4_2 + &apos;&amp;&apos; + pid_3_4_3;
			}

			//Setting the default HD datatype value if the fields PID 3.6.1 and 3.6.2 is not populated	
			var pid_3_6_List = msg[&apos;PID&apos;][&apos;PID.3&apos;][j][&apos;PID.3.6&apos;].toString().split(&quot;&amp;&quot;);
			var count = (msg[&apos;PID&apos;][&apos;PID.3&apos;][j][&apos;PID.3.6&apos;].toString().split(&quot;&amp;&quot;).length - 1);
			if (count == 0){
				pid_3_6_1 = pid_3_6_List[0] ;
				pid_3_6_2 = $(&apos;HDDatatypeDefaultValue_PID_3_6_2&apos;);
				pid_3_6_3 = $(&apos;HDDatatypeDefaultValue_PID_3_6_3&apos;);
				msg[&apos;PID&apos;][&apos;PID.3&apos;][j][&apos;PID.3.6&apos;] = pid_3_6_1 + &apos;&amp;&apos; + pid_3_6_2 + &apos;&amp;&apos; + pid_3_6_3;
			}else if (count == 1){
				pid_3_6_1 = pid_3_6_List[0] ;
				pid_3_6_2 = pid_3_6_List[1] ;
				pid_3_6_3 = $(&apos;HDDatatypeDefaultValue_PID_3_6_3&apos;);
				msg[&apos;PID&apos;][&apos;PID.3&apos;][j][&apos;PID.3.6&apos;] = pid_3_6_1 + &apos;&amp;&apos; + pid_3_6_2 + &apos;&amp;&apos; + pid_3_6_3;
			}
			j++;
		}

		//PID-4 is repeating in 231 and not so in 251. Hence, deleting all the repetitions except the first one.
		while (msg[&apos;PID&apos;][&apos;PID.4&apos;][1] != null){
			delete msg[&apos;PID&apos;][&apos;PID.4&apos;][1];
		}

		//PID-6 is repeating in 231 and not so in 251. Hence, deleting all the repetitions except the first one.
		while (msg[&apos;PID&apos;][&apos;PID.6&apos;][1] != null){
			delete msg[&apos;PID&apos;][&apos;PID.6&apos;][1];
		}

		//PID-9 is repeating in 231 and not so in 251. Hence, deleting all the repetitions except the first one.
		while (msg[&apos;PID&apos;][&apos;PID.9&apos;][1] != null){
			delete msg[&apos;PID&apos;][&apos;PID.9&apos;][1];
		}

		//PID 10 - Handle possible repetitions &amp; Translate Race Code
		j=0;
		while (msg[&apos;PID&apos;][&apos;PID.10&apos;][j] != null){
			msg[&apos;PID&apos;][&apos;PID.10&apos;][j][&apos;PID.10.1&apos;] = $(&apos;translationMap&apos;).get_2_5_1Code(msg[&apos;PID&apos;][&apos;PID.10&apos;][j][&apos;PID.10.1&apos;].toString());
			msg[&apos;PID&apos;][&apos;PID.10&apos;][j][&apos;PID.10.3&apos;] = &apos;CDCREC&apos;; //PID 10.3 always set to the literal &apos;CDCREC&apos;
			j++;
		}

		//PID-12 is repeating in 231 and not so in 251. Hence, deleting all the repetitions except the first one.
		while (msg[&apos;PID&apos;][&apos;PID.12&apos;][1] != null){
			delete msg[&apos;PID&apos;][&apos;PID.12&apos;][1];
		}

		//PID 22 - Handle possible repetitions &amp; Translate Ethnic Group Code
		j=0;
		while (msg[&apos;PID&apos;][&apos;PID.22&apos;][j] != null){
			msg[&apos;PID&apos;][&apos;PID.22&apos;][j][&apos;PID.22.1&apos;] = $(&apos;translationMap&apos;).get_2_5_1Code(msg[&apos;PID&apos;][&apos;PID.22&apos;][j][&apos;PID.22.1&apos;].toString());
			msg[&apos;PID&apos;][&apos;PID.22&apos;][j][&apos;PID.22.3&apos;] = &apos;CDCREC&apos;; //PID 22.3 always set to the literal &apos;CDCREC&apos;
			j++;
		}

		msg[&apos;PID&apos;][&apos;PID.31&apos;] = &apos;&apos;;
		msg[&apos;PID&apos;][&apos;PID.32&apos;] = &apos;&apos;; 
		msg[&apos;PID&apos;][&apos;PID.33&apos;] = &apos;&apos;;
		msg[&apos;PID&apos;][&apos;PID.34&apos;] = &apos;&apos;;
		msg[&apos;PID&apos;][&apos;PID.35&apos;] = &apos;&apos;;
		msg[&apos;PID&apos;][&apos;PID.36&apos;] = &apos;&apos;;
		msg[&apos;PID&apos;][&apos;PID.37&apos;] = &apos;&apos;;
		msg[&apos;PID&apos;][&apos;PID.38&apos;] = &apos;&apos;;
		msg[&apos;PID&apos;][&apos;PID.39&apos;] = &apos;&apos;;
	}

	//PD1 3 - XON DataType- move the 3rd component to the new 10th component for the 251 transformed message 
	//PD1
	logger.info (&quot;Translating PD1 Segment.&quot;);
	if (msg[&apos;PD1&apos;].length() &gt; 0){
		//PD1-1 is repeating in 231 and not so in 251. Hence, deleting all the repetitions except the first one.
		while (msg[&apos;PD1&apos;][&apos;PD1.1&apos;][1] != null){
			delete msg[&apos;PD1&apos;][&apos;PD1.1&apos;][1];
		}

		//PD1 - 3
		if (msg[&apos;PD1&apos;][&apos;PD1.3&apos;][0] != null){
			var pd1_3_3 = msg[&apos;PD1&apos;][&apos;PD1.3&apos;][0][&apos;PD1.3.3&apos;].toString();
			msg[&apos;PD1&apos;][&apos;PD1.3&apos;][0][&apos;PD1.3.3&apos;] = &apos;&apos;;
			msg[&apos;PD1&apos;][&apos;PD1.3&apos;][0][&apos;PD1.3.10&apos;] = pd1_3_3;
		}

		//PD1-3 is repeating in 231 and not so in 251. Hence, deleting all the repetitions except the first one.
		while (msg[&apos;PD1&apos;][&apos;PD1.3&apos;][1] != null){
			delete msg[&apos;PD1&apos;][&apos;PD1.3&apos;][1];
		}

		//PD1-4 is repeating in 231 and not so in 251. Hence, deleting all the repetitions except the first one.
		while (msg[&apos;PD1&apos;][&apos;PD1.4&apos;][1] != null){
			delete msg[&apos;PD1&apos;][&apos;PD1.4&apos;][1];
		}

		//PD1-10 is repeating in 231 and not so in 251. Hence, deleting all the repetitions except the first one.
		while (msg[&apos;PD1&apos;][&apos;PD1.10&apos;][1] != null){
			delete msg[&apos;PD1&apos;][&apos;PD1.10&apos;][1];
		}

		msg[&apos;PD1&apos;][&apos;PD1.13&apos;] = &apos;&apos;;
		msg[&apos;PD1&apos;][&apos;PD1.14&apos;] = &apos;&apos;;
		msg[&apos;PD1&apos;][&apos;PD1.15&apos;] = &apos;&apos;;
		msg[&apos;PD1&apos;][&apos;PD1.16&apos;] = &apos;&apos;;
		msg[&apos;PD1&apos;][&apos;PD1.17&apos;] = &apos;&apos;;
		msg[&apos;PD1&apos;][&apos;PD1.18&apos;] = &apos;&apos;;
		msg[&apos;PD1&apos;][&apos;PD1.19&apos;] = &apos;&apos;;
		msg[&apos;PD1&apos;][&apos;PD1.20&apos;] = &apos;&apos;;
		msg[&apos;PD1&apos;][&apos;PD1.21&apos;] = &apos;&apos;;
	}	

	//NK1 13 - XON DataType- move the 3rd component to the new 10th component for the 251 transformed message 
	//NK1	
	logger.info (&quot;Translating NK1 Segment(s).&quot;);
	i=0;
	while(msg[&apos;NK1&apos;][i] != null) 
    {  
		//NK1-6 is repeating in 231 and not so in 251. Hence, deleting all the repetitions except the first one.
		while (msg[&apos;NK1&apos;][i][&apos;NK1.6&apos;][1] != null){
			delete msg[&apos;NK1&apos;][i][&apos;NK1.6&apos;][1];
		}

		//NK1 - 13
		if (msg[&apos;NK1&apos;][i][&apos;NK1.13&apos;][0] != null){
			var nk1_13_3 = msg[&apos;NK1&apos;][i][&apos;NK1.13&apos;][0][&apos;NK1.13.3&apos;].toString();
			msg[&apos;NK1&apos;][i][&apos;NK1.13&apos;][0][&apos;NK1.13.3&apos;] = &apos;&apos;;
			msg[&apos;NK1&apos;][i][&apos;NK1.13&apos;][0][&apos;NK1.13.10&apos;] = nk1_13_3;
		}

		//NK1-13 is repeating in 231 and not so in 251. Hence, deleting all the repetitions except the first one.
		while (msg[&apos;NK1&apos;][i][&apos;NK1.13&apos;][1] != null){
			delete msg[&apos;NK1&apos;][i][&apos;NK1.13&apos;][1];
		}

		//NK1-17 is repeating in 231 and not so in 251. Hence, deleting all the repetitions except the first one.
		while (msg[&apos;NK1&apos;][i][&apos;NK1.17&apos;][1] != null){
			delete msg[&apos;NK1&apos;][i][&apos;NK1.17&apos;][1];
		}

		//NK1-18 is repeating in 231 and not so in 251. Hence, deleting all the repetitions except the first one.
		while (msg[&apos;NK1&apos;][i][&apos;NK1.18&apos;][1] != null){
			delete msg[&apos;NK1&apos;][i][&apos;NK1.18&apos;][1];
		}

		//NK1-19 is repeating in 231 and not so in 251. Hence, deleting all the repetitions except the first one.
		while (msg[&apos;NK1&apos;][i][&apos;NK1.19&apos;][1] != null){
			delete msg[&apos;NK1&apos;][i][&apos;NK1.19&apos;][1];
		}

		//NK1-22 is repeating in 231 and not so in 251. Hence, deleting all the repetitions except the first one.
		while (msg[&apos;NK1&apos;][i][&apos;NK1.22&apos;][1] != null){
			delete msg[&apos;NK1&apos;][i][&apos;NK1.22&apos;][1];
		}

		//NK1-26 is repeating in 231 and not so in 251. Hence, deleting all the repetitions except the first one.
		while (msg[&apos;NK1&apos;][i][&apos;NK1.26&apos;][1] != null){
			delete msg[&apos;NK1&apos;][i][&apos;NK1.26&apos;][1];
		}

		//NK1-28 is repeating in 231 and not so in 251. Hence, deleting all the repetitions except the first one.
		while (msg[&apos;NK1&apos;][i][&apos;NK1.28&apos;][1] != null){
			delete msg[&apos;NK1&apos;][i][&apos;NK1.28&apos;][1];
		}

		//NK1-29 is repeating in 231 and not so in 251. Hence, deleting all the repetitions except the first one.
		while (msg[&apos;NK1&apos;][i][&apos;NK1.29&apos;][1] != null){
			delete msg[&apos;NK1&apos;][i][&apos;NK1.29&apos;][1];
		}

		//NK1-35 is repeating in 231 and not so in 251. Hence, deleting all the repetitions except the first one.
		while (msg[&apos;NK1&apos;][i][&apos;NK1.35&apos;][1] != null){
			delete msg[&apos;NK1&apos;][i][&apos;NK1.35&apos;][1];
		}

		msg[&apos;NK1&apos;][i][&apos;NK1.38&apos;] = &apos;&apos;;
		msg[&apos;NK1&apos;][i][&apos;NK1.39&apos;] = &apos;&apos;;
		i++;
	}

	//OBR
	logger.info (&quot;Translating OBR Segment(s).&quot;);
	i=0;
	while(msg[&apos;OBR&apos;][i] != null){
		msg[&apos;OBR&apos;][i][&apos;OBR.14&apos;] = &apos;&apos;;
		msg[&apos;OBR&apos;][i][&apos;OBR.15&apos;] = &apos;&apos;;
		msg[&apos;OBR&apos;][i][&apos;OBR.29&apos;] = &apos;&apos;;

		//OBR-38 is repeating in 231 and not so in 251. Hence, deleting all the repetitions except the first one.
		while (msg[&apos;OBR&apos;][i][&apos;OBR.38&apos;][1] != null){
			delete msg[&apos;OBR&apos;][i][&apos;OBR.38&apos;][1];
		}

		//OBR-43 is repeating in 231 and not so in 251. Hence, deleting all the repetitions except the first one.
		while (msg[&apos;OBR&apos;][i][&apos;OBR.43&apos;][1] != null){
			delete msg[&apos;OBR&apos;][i][&apos;OBR.43&apos;][1];
		}

		msg[&apos;OBR&apos;][i][&apos;OBR.46&apos;] = &apos;&apos;;
		msg[&apos;OBR&apos;][i][&apos;OBR.47&apos;] = &apos;&apos;;
		msg[&apos;OBR&apos;][i][&apos;OBR.48&apos;] = &apos;&apos;;
		msg[&apos;OBR&apos;][i][&apos;OBR.49&apos;] = &apos;&apos;;
		msg[&apos;OBR&apos;][i][&apos;OBR.50&apos;] = &apos;&apos;;
		i++;
	}


	//ORC	
	logger.info (&quot;Translating ORC Segment.&quot;);
	if (msg[&apos;ORC&apos;].length() &gt; 0){
		msg[&apos;ORC&apos;][&apos;ORC.1&apos;][&apos;ORC.1.1&apos;] = &apos;RE&apos;;

		//ORC 21 - XON DataType- move the 3rd component to the new 10th component for the 251 transformed message 
		j=0;
		while (msg[&apos;ORC&apos;][&apos;ORC.21&apos;][j] != null){
			var orc_21_3 = msg[&apos;ORC&apos;][&apos;ORC.21&apos;][j][&apos;ORC.21.3&apos;].toString();
			msg[&apos;ORC&apos;][&apos;ORC.21&apos;][j][&apos;ORC.21.3&apos;] = &apos;&apos;;
			msg[&apos;ORC&apos;][&apos;ORC.21&apos;][j][&apos;ORC.21.10&apos;] = orc_21_3;
			j++;
		}

		//ORC 23 is required in 251
		var orc_23 = msg[&apos;ORC&apos;][&apos;ORC.23&apos;].toString();
		if ( orc_23 == null || orc_23 == &apos;&apos;){
			msg[&apos;ORC&apos;][&apos;ORC.23&apos;] = &apos;^^^^^000^0000000&apos;;
		}

		msg[&apos;ORC&apos;][&apos;ORC.25&apos;] = &apos;&apos;;
		msg[&apos;ORC&apos;][&apos;ORC.26&apos;] = &apos;&apos;;
		msg[&apos;ORC&apos;][&apos;ORC.27&apos;] = &apos;&apos;;
		msg[&apos;ORC&apos;][&apos;ORC.28&apos;] = &apos;&apos;;
		msg[&apos;ORC&apos;][&apos;ORC.29&apos;] = &apos;&apos;;
		msg[&apos;ORC&apos;][&apos;ORC.30&apos;] = &apos;&apos;;
		msg[&apos;ORC&apos;][&apos;ORC.31&apos;] = &apos;&apos;;	
	}
	

	//OBX
	logger.info (&quot;Translating OBX Segment(s).&quot;);
	i=0;
	while(msg[&apos;OBX&apos;][i] != null) 
    {  	
		var obx_14_1 = msg[&apos;OBX&apos;][i][&apos;OBX.14&apos;][&apos;OBX.14.1&apos;].toString();
		var obx_15 = msg[&apos;OBX&apos;][i][&apos;OBX.15&apos;];
		var obx_15_1 = msg[&apos;OBX&apos;][i][&apos;OBX.15&apos;][&apos;OBX.15.1&apos;].toString();
		var obx_15_2 = msg[&apos;OBX&apos;][i][&apos;OBX.15&apos;][&apos;OBX.15.2&apos;].toString();
		var obx_15_3 = msg[&apos;OBX&apos;][i][&apos;OBX.15&apos;][&apos;OBX.15.3&apos;].toString();

		//OBX-5 is repeating in 231 and not so in 251. Hence, deleting all the repetitions except the first one.
		while (msg[&apos;OBX&apos;][i][&apos;OBX.5&apos;][1] != null){
			delete msg[&apos;OBX&apos;][i][&apos;OBX.5&apos;][1];
		}

		//OBX-10 is repeating in 231 and not so in 251. Hence, deleting all the repetitions except the first one.
		while (msg[&apos;OBX&apos;][i][&apos;OBX.10&apos;][1] != null){
			delete msg[&apos;OBX&apos;][i][&apos;OBX.10&apos;][1];
		}

		msg[&apos;OBX&apos;][i][&apos;OBX.14&apos;] = &apos;&apos;;		
		msg[&apos;OBX&apos;][i][&apos;OBX.15&apos;] = &apos;&apos;;

		msg[&apos;OBX&apos;][i][&apos;OBX.18&apos;] = &apos;&apos;;
		
		msg[&apos;OBX&apos;][i][&apos;OBX.19&apos;][&apos;OBX.19.1&apos;] = obx_14_1;

		msg[&apos;OBX&apos;][i][&apos;OBX.20&apos;] = &apos;&apos;;
		msg[&apos;OBX&apos;][i][&apos;OBX.21&apos;] = &apos;&apos;;
		msg[&apos;OBX&apos;][i][&apos;OBX.22&apos;] = &apos;&apos;;
		
		//OBX-23 is required in 251, so set a literal value to it if OBX-15 values are null
		if ( obx_15_1 != null &amp;&amp; obx_15_1 != &apos;&apos; &amp;&amp; obx_15_2 != null &amp;&amp; obx_15_2 != &apos;&apos; &amp;&amp; obx_15_3 != null &amp;&amp; obx_15_3 != &apos;&apos;){
			msg[&apos;OBX&apos;][i][&apos;OBX.23&apos;][&apos;OBX.23.1&apos;] = obx_15_2;
		
			//OBX 23 - XON DataType- We are only setting OBX 23.3 component to empty value as there is another transformation rule defined for OBX 23.10
			msg[&apos;OBX&apos;][i][&apos;OBX.23&apos;][&apos;OBX.23.3&apos;] = &apos;&apos;;
		
			msg[&apos;OBX&apos;][i][&apos;OBX.23&apos;][&apos;OBX.23.6&apos;] = obx_15_3;
			msg[&apos;OBX&apos;][i][&apos;OBX.23&apos;][&apos;OBX.23.10&apos;] = obx_15_1; //part of transformation rule definied explicitly for OBX 23
		}
		else{
			msg[&apos;OBX&apos;][i][&apos;OBX.23&apos;] = &apos;Not present in v2.3.1 message&apos;;
		}

		msg[&apos;OBX&apos;][i][&apos;OBX.24&apos;][&apos;OBX.24.1&apos;] = &apos;Not present in v2.3.1 message&apos;;
		msg[&apos;OBX&apos;][i][&apos;OBX.25&apos;] = &apos;&apos;;

		i++;
	}
	
	//PV1
	logger.info (&quot;Translating PV1 Segment.&quot;);
	if (msg[&apos;PV1&apos;].length() &gt; 0){
		msg[&apos;PV1&apos;][&apos;PV1.1&apos;][&apos;PV1.1.1&apos;] = &apos;1&apos;;

		//PV1-15 is repeating in 231 and not so in 251. Hence, deleting all the repetitions except the first one.
		while (msg[&apos;PV1&apos;][&apos;PV1.15&apos;][1] != null){
			delete msg[&apos;PV1&apos;][&apos;PV1.15&apos;][1];
		}

		//PV1-24 is repeating in 231 and not so in 251. Hence, deleting all the repetitions except the first one.
		while (msg[&apos;PV1&apos;][&apos;PV1.24&apos;][1] != null){
			delete msg[&apos;PV1&apos;][&apos;PV1.24&apos;][1];
		}

		//PV1-25 is repeating in 231 and not so in 251. Hence, deleting all the repetitions except the first one.
		while (msg[&apos;PV1&apos;][&apos;PV1.25&apos;][1] != null){
			delete msg[&apos;PV1&apos;][&apos;PV1.25&apos;][1];
		}

		//PV1-26 is repeating in 231 and not so in 251. Hence, deleting all the repetitions except the first one.
		while (msg[&apos;PV1&apos;][&apos;PV1.26&apos;][1] != null){
			delete msg[&apos;PV1&apos;][&apos;PV1.26&apos;][1];
		}

		//PV1-27 is repeating in 231 and not so in 251. Hence, deleting all the repetitions except the first one.
		while (msg[&apos;PV1&apos;][&apos;PV1.27&apos;][1] != null){
			delete msg[&apos;PV1&apos;][&apos;PV1.27&apos;][1];
		}

		//PV1-52 is repeating in 231 and not so in 251. Hence, deleting all the repetitions except the first one.
		while (msg[&apos;PV1&apos;][&apos;PV1.52&apos;][1] != null){
			delete msg[&apos;PV1&apos;][&apos;PV1.52&apos;][1];
		}
	}

	//PV2
	logger.info (&quot;Translating PV2 Segment.&quot;);
	if (msg[&apos;PV2&apos;].length() &gt; 0){	
		//PV2-5 is repeating in 231 and not so in 251. Hence, deleting all the repetitions except the first one.
		while (msg[&apos;PV2&apos;][&apos;PV2.5&apos;][1] != null){
			delete msg[&apos;PV2&apos;][&apos;PV2.5&apos;][1];
		}

		//PV2-13 is repeating in 231 and not so in 251. Hence, deleting all the repetitions except the first one.
		while (msg[&apos;PV2&apos;][&apos;PV2.13&apos;][1] != null){
			delete msg[&apos;PV2&apos;][&apos;PV2.13&apos;][1];
		}
		
		//PV2 23 - XON DataType- move the 3rd component to the new 10th component for the 251 transformed message
		j=0;
		while (msg[&apos;PV2&apos;][&apos;PV2.23&apos;][j] != null){
			var pv2_23_3 = msg[&apos;PV2&apos;][&apos;PV2.23&apos;][j][&apos;PV2.23.3&apos;].toString();
			msg[&apos;PV2&apos;][&apos;PV2.23&apos;][j][&apos;PV2.23.3&apos;] = &apos;&apos;;
			msg[&apos;PV2&apos;][&apos;PV2.23&apos;][j][&apos;PV2.23.10&apos;] = pv2_23_3;
			j++;
		}
	
		msg[&apos;PV2&apos;][&apos;PV2.38&apos;] = &apos;&apos;;
		msg[&apos;PV2&apos;][&apos;PV2.39&apos;] = &apos;&apos;;
		msg[&apos;PV2&apos;][&apos;PV2.40&apos;] = &apos;&apos;;
		msg[&apos;PV2&apos;][&apos;PV2.41&apos;] = &apos;&apos;;
		msg[&apos;PV2&apos;][&apos;PV2.42&apos;] = &apos;&apos;;
		msg[&apos;PV2&apos;][&apos;PV2.43&apos;] = &apos;&apos;;
		msg[&apos;PV2&apos;][&apos;PV2.44&apos;] = &apos;&apos;;
		msg[&apos;PV2&apos;][&apos;PV2.45&apos;] = &apos;&apos;;
		msg[&apos;PV2&apos;][&apos;PV2.46&apos;] = &apos;&apos;;
		msg[&apos;PV2&apos;][&apos;PV2.47&apos;] = &apos;&apos;;
		msg[&apos;PV2&apos;][&apos;PV2.48&apos;] = &apos;&apos;;
		msg[&apos;PV2&apos;][&apos;PV2.49&apos;] = &apos;&apos;;
	}

  }
}
catch(e)
{
  logger.error(&quot;Error in Store transformed message to file Transformer: ORU R01 2.3.1 to 2.5.1 Transformation: &quot; + e.message);
  channelMap.put(&apos;componentErrors&apos;,  $(&apos;componentErrors&apos;) + &quot;Store transformed message to file Transformer: ORU R01 2.3.1 to 2.5.1 Transformation: \n&quot; + e.message + &quot; |\n&quot;);
}</string>
              </entry>
            </data>
          </step>
          <step>
            <sequenceNumber>5</sequenceNumber>
            <name>ORU R01 2.5.1 to 2.3.1 Transformation</name>
            <script>try
{

  String.prototype.contains = function(it) { return this.indexOf(it) != -1; };

  // 2.5.1 to 2.3.1 ORU R01-specific MSH transformations
  if ( ($(&apos;translateToVersion&apos;) == &apos;2.3.1&apos;) &amp;&amp;
       ($(&apos;msgType&apos;) == &apos;ORU&apos;) &amp;&amp;
       ($(&apos;msgTriggerEvent&apos;) == &apos;R01&apos;) &amp;&amp;
       ($(&apos;msgHL7VersionID&apos;) == &apos;2.5.1&apos;) )
  {

    logger.info(&quot;Transforming ORU R01 2.5.1 message to 2.3.1&quot;);
	
	//Parsing the Original Message to determine the following:
		//first non- patient related NTE sequence Id
		//Number of NTEs following each OBR/OBX
		//Number of NTEs before OBX
		//Identify the OBXs following SPM 
		//Determine the sequence id for any potential new NTEs under each OBR/OBX segment.
		//etc.

	logger.info(&quot;Parsing the original Message.&quot;);
	var	originalMessage = messageObject.getRawData();
	var lines = new Array();
	lines = originalMessage.split(&quot;\\r&quot;);

	var nte_follows_obr = false;
	var nte_follows_obx = false;
	var obx_follows_spm = false;
	var obr_array = [];
	var obx_array = [];
	var len = lines.length;
	var obrSeg = 0;
	var obxSeg = 0;
	var nteSeg = 0;
	var spmRelatedFirstObx = -1; //Sequence id of  the first Spm related OBX, if any
	var spmRelatedLastObx = -1; //Sequence id of  the last Spm related OBX, if any
	var firstNonPatientRelatedNTESeg = -1; //Sequence id of the first non-patient related NTE 
	var numOfNTEsBeforeOBX = 0;
	var nextNteSegId = 0; //this is going to be the sequence id for the next NTE segment to be added

	for (var l=0;l&lt;len;l++) {
		if(lines[l].startsWith(&quot;OBR|&quot;)) {
		    nte_follows_obr = true;
			nte_follows_obx = false;
			obx_follows_spm = false;
	    	var obr = {};
			obr.segNum = obrSeg;
			obr.firstNteSeg = -1;
			obr.lastNteSeg = -1;
			obr.nextNteSegId = nteSeg;

		    obr_array.push(obr);

			obrSeg++;			
 	    }else if(lines[l].startsWith(&quot;OBX|&quot;) ){
 		    nte_follows_obx = true;
			nte_follows_obr = false;
	    	var i = obr_array.length - 1;
		    var obx = {};
			obx.segNum = obxSeg;
			obx.firstNteSeg = -1;
			obx.lastNteSeg = -1;
			obx.nextNteSegId = nteSeg;

			obx_array.push(obx);

			if (obx_follows_spm == true &amp;&amp; spmRelatedFirstObx == -1){
				spmRelatedFirstObx = obxSeg; //This keeps track of the first OBX segment id following SPM
			}	
			
			if (obx_follows_spm == true){
				spmRelatedLastObx = obxSeg; //This keeps track of the first OBX segment id following SPM
			}
	
			obxSeg++;
 		 } else if(lines[l].startsWith(&quot;NTE|&quot;) ){
		    var i = obr_array.length -1; // last element of obr array
			var k = obx_array.length -1; // last element of obx array

    	    if (nte_follows_obr) {
		      	// this nte is after obr
			  	if (obr_array[i].firstNteSeg == -1){
					obr_array[i].firstNteSeg = nteSeg;
				}
				obr_array[i].lastNteSeg = nteSeg;

				if (firstNonPatientRelatedNTESeg == -1){
					firstNonPatientRelatedNTESeg = nteSeg;
				}
				
				nteSeg ++;
				obr_array[i].nextNteSegId = nteSeg;

		    }  else if (nte_follows_obx) {
   		      	// this nte is after obx
				if (obx_array[k].firstNteSeg == -1){
					obx_array[k].firstNteSeg = nteSeg;
				}
				obx_array[k].lastNteSeg = nteSeg;

				if (firstNonPatientRelatedNTESeg == -1){
					firstNonPatientRelatedNTESeg = nteSeg;
				}

				if (numOfNTEsBeforeOBX == 0){
					numOfNTEsBeforeOBX = nteSeg;
				}
				nteSeg ++;
				obx_array[k].nextNteSegId = nteSeg;
		    } else{
				//this nte is after PID/PD1
				nteSeg++;
			}
			obx_follows_spm =  false;
	 	 }else if(lines[l].startsWith(&quot;SPM|&quot;) ){
			obx_follows_spm =  true;
	     }
	}

	logger.info (&quot; SPM related first obx = &quot; + spmRelatedFirstObx);
	logger.info (&quot; SPM related last obx = &quot; + spmRelatedLastObx);

	//MSH
	logger.info (&quot;Translating MSH Segment.&quot;);
	if (msg[&apos;MSH&apos;].length() &gt; 0){
		var msh_2 = msg[&apos;MSH&apos;][&apos;MSH.2&apos;].toString();
		if (msh_2.length&gt;=5) {
			msg[&apos;MSH&apos;][&apos;MSH.2&apos;] = msh_2.substring(0, 4);
		}
		msg[&apos;MSH&apos;][&apos;MSH.9&apos;] = &apos;ORU^R01&apos;;
		msg[&apos;MSH&apos;][&apos;MSH.12&apos;][&apos;MSH.12.1&apos;] = &apos;2.3.1&apos;;
		msg[&apos;MSH&apos;][&apos;MSH.13&apos;] = &apos;&apos;;
		msg[&apos;MSH&apos;][&apos;MSH.14&apos;] = &apos;&apos;;
		msg[&apos;MSH&apos;][&apos;MSH.15&apos;] = &apos;&apos;;
		msg[&apos;MSH&apos;][&apos;MSH.16&apos;] = &apos;&apos;;
		msg[&apos;MSH&apos;][&apos;MSH.17&apos;] = &apos;&apos;;
		
		//MSH-18 is repeating in 251 and is set to empty for 231. Hence, deleting all the repetitions except the first one and setting that one to empty.
		while (msg[&apos;MSH&apos;][&apos;MSH.18&apos;][1] != null){
			delete msg[&apos;MSH&apos;][&apos;MSH.18&apos;][1];
		}

		msg[&apos;MSH&apos;][&apos;MSH.18&apos;] = &apos;&apos;; 
		msg[&apos;MSH&apos;][&apos;MSH.19&apos;] = &apos;&apos;;
		msg[&apos;MSH&apos;][&apos;MSH.20&apos;] = &apos;&apos;;

		//MSH 21 - repeating in 251 and not exists in 231
		while (msg[&apos;MSH&apos;][&apos;MSH.21&apos;][0] != null){
			delete msg[&apos;MSH&apos;][&apos;MSH.21&apos;][0];	
		}
	}

	//PID
	logger.info (&quot;Translating PID Segment.&quot;);
	if (msg[&apos;PID&apos;].length() &gt; 0){
		msg[&apos;PID&apos;][&apos;PID.1&apos;][&apos;PID.1.1&apos;] = &apos;1&apos;;
		
		//PID 10 - Handle possible repetitions &amp; Translate Race Code
		j = 0;
		while (msg[&apos;PID&apos;][&apos;PID.10&apos;][j] != null){
			msg[&apos;PID&apos;][&apos;PID.10&apos;][j][&apos;PID.10.1&apos;] = $(&apos;translationMap&apos;).get_2_3_1Code(msg[&apos;PID&apos;][&apos;PID.10&apos;][j][&apos;PID.10.1&apos;].toString());
			msg[&apos;PID&apos;][&apos;PID.10&apos;][j][&apos;PID.10.3&apos;] = &apos;HL70005&apos;; //PID 10.3 always set to the literal &apos;HL70005&apos;
			j++;
		}

		//PID-15 is repeating in 251 and not so in 231. Hence, deleting all the repetitions except the first one.
		while (msg[&apos;PID&apos;][&apos;PID.15&apos;][1] != null){
			delete msg[&apos;PID&apos;][&apos;PID.15&apos;][1];
		}

		//PID 22 - Translate Ethnic Group Code
		j = 0;
		while (msg[&apos;PID&apos;][&apos;PID.22&apos;][j] != null){
			msg[&apos;PID&apos;][&apos;PID.22&apos;][j][&apos;PID.22.1&apos;] = $(&apos;translationMap&apos;).get_2_3_1Code(msg[&apos;PID&apos;][&apos;PID.22&apos;][j][&apos;PID.22.1&apos;].toString());
			msg[&apos;PID&apos;][&apos;PID.22&apos;][j][&apos;PID.22.3&apos;] = &apos;HL70189&apos;; //PID 22.3 always set to the literal &apos;HL70189&apos;
			j++;
		}

		delete msg[&apos;PID&apos;][&apos;PID.31&apos;];
		
		//PID 32 - repeating in 251 and not exists in 231
		while (msg[&apos;PID&apos;][&apos;PID.32&apos;][0] != null){
			delete msg[&apos;PID&apos;][&apos;PID.32&apos;][0];
		}

		delete msg[&apos;PID&apos;][&apos;PID.33&apos;];
		delete msg[&apos;PID&apos;][&apos;PID.34&apos;];
		delete msg[&apos;PID&apos;][&apos;PID.35&apos;];
		delete msg[&apos;PID&apos;][&apos;PID.36&apos;];
		delete msg[&apos;PID&apos;][&apos;PID.37&apos;];

		//PID 38 - repeating in 251 and not exists in 231
		while (msg[&apos;PID&apos;][&apos;PID.38&apos;][0] != null){
			delete msg[&apos;PID&apos;][&apos;PID.38&apos;][0];
		}

		//PID 39 - repeating in 251 and not exists in 231
		while (msg[&apos;PID&apos;][&apos;PID.39&apos;][0] != null){
			delete msg[&apos;PID&apos;][&apos;PID.39&apos;][0];
		}
	}


	//PD1
	logger.info (&quot;Translating PD1 Segment.&quot;);
	if (msg[&apos;PD1&apos;].length() &gt; 0){
		delete msg[&apos;PD1&apos;][&apos;PD1.13&apos;];

		//PD1 14 - repeating in 251 and not exists in 231		
		while (msg[&apos;PD1&apos;][&apos;PD1.14&apos;][0] != null){
			delete msg[&apos;PD1&apos;][&apos;PD1.14&apos;][0];
		}

		//PD1 15 - repeating in 251 and not exists in 231		
		while (msg[&apos;PD1&apos;][&apos;PD1.15&apos;][0] != null){
			delete msg[&apos;PD1&apos;][&apos;PD1.15&apos;][0];
		}

		delete msg[&apos;PD1&apos;][&apos;PD1.16&apos;];
		delete msg[&apos;PD1&apos;][&apos;PD1.17&apos;];
		delete msg[&apos;PD1&apos;][&apos;PD1.18&apos;];
		delete msg[&apos;PD1&apos;][&apos;PD1.19&apos;];
		delete msg[&apos;PD1&apos;][&apos;PD1.20&apos;];
		delete msg[&apos;PD1&apos;][&apos;PD1.21&apos;];
	}


	//NK1	
	logger.info (&quot;Translating NK1 Segment(s).&quot;);
	i=0;
	while(msg[&apos;NK1&apos;][i] != null) { 
		//NK1.2
		j = 0;
		while ( msg[&apos;NK1&apos;][i][&apos;NK1.2&apos;][j] != null) {
			var nk1_2_1_List = msg[&apos;NK1&apos;][i][&apos;NK1.2&apos;][j][&apos;NK1.2.1&apos;].toString().split(&quot;&amp;&quot;);
			var count = (msg[&apos;NK1&apos;][i][&apos;NK1.2&apos;][j][&apos;NK1.2.1&apos;].toString().split(&quot;&amp;&quot;).length - 1);
			if (count &gt;= 0){
				 msg[&apos;NK1&apos;][i][&apos;NK1.2&apos;][j][&apos;NK1.2.1&apos;] = &apos;&apos;;
 			 	msg[&apos;NK1&apos;][i][&apos;NK1.2&apos;][j][&apos;NK1.2.1&apos;] = nk1_2_1_List[0] ;
	   		}
			j++;
		}
		//NK1.6
		j = 0;
		while ( msg[&apos;NK1&apos;][i][&apos;NK1.6&apos;][j] != null) {
			msg[&apos;NK1&apos;][i][&apos;NK1.6&apos;][j] = &apos;&apos;;
			j++;
		}	
		msg[&apos;NK1&apos;][i][&apos;NK1.7&apos;] = &apos;&apos;;
		msg[&apos;NK1&apos;][i][&apos;NK1.8&apos;] = &apos;&apos;;
		msg[&apos;NK1&apos;][i][&apos;NK1.9&apos;] = &apos;&apos;;
		msg[&apos;NK1&apos;][i][&apos;NK1.10&apos;] = &apos;&apos;;
		msg[&apos;NK1&apos;][i][&apos;NK1.11&apos;] = &apos;&apos;;
		msg[&apos;NK1&apos;][i][&apos;NK1.12&apos;] = &apos;&apos;;

		//NK1.13
		j = 0;
		while ( msg[&apos;NK1&apos;][i][&apos;NK1.13&apos;][j] != null) {
			msg[&apos;NK1&apos;][i][&apos;NK1.13&apos;][j] = &apos;&apos;;
			j++;
		}
		msg[&apos;NK1&apos;][i][&apos;NK1.14&apos;] = &apos;&apos;;
		msg[&apos;NK1&apos;][i][&apos;NK1.15&apos;] = &apos;&apos;;
		msg[&apos;NK1&apos;][i][&apos;NK1.16&apos;] = &apos;&apos;;
		msg[&apos;NK1&apos;][i][&apos;NK1.17&apos;] = &apos;&apos;;
		msg[&apos;NK1&apos;][i][&apos;NK1.18&apos;] = &apos;&apos;;
		msg[&apos;NK1&apos;][i][&apos;NK1.19&apos;] = &apos;&apos;;
		msg[&apos;NK1&apos;][i][&apos;NK1.20&apos;] = &apos;&apos;;
		msg[&apos;NK1&apos;][i][&apos;NK1.21&apos;] = &apos;&apos;;
		msg[&apos;NK1&apos;][i][&apos;NK1.22&apos;] = &apos;&apos;;
		msg[&apos;NK1&apos;][i][&apos;NK1.23&apos;] = &apos;&apos;;
		msg[&apos;NK1&apos;][i][&apos;NK1.24&apos;] = &apos;&apos;;
		msg[&apos;NK1&apos;][i][&apos;NK1.25&apos;] = &apos;&apos;;
		msg[&apos;NK1&apos;][i][&apos;NK1.26&apos;] = &apos;&apos;;
		msg[&apos;NK1&apos;][i][&apos;NK1.27&apos;] = &apos;&apos;;	
		msg[&apos;NK1&apos;][i][&apos;NK1.28&apos;] = &apos;&apos;;
		msg[&apos;NK1&apos;][i][&apos;NK1.29&apos;] = &apos;&apos;;
		msg[&apos;NK1&apos;][i][&apos;NK1.30&apos;] = &apos;&apos;;
		msg[&apos;NK1&apos;][i][&apos;NK1.31&apos;] = &apos;&apos;;
		msg[&apos;NK1&apos;][i][&apos;NK1.32&apos;] = &apos;&apos;;
		msg[&apos;NK1&apos;][i][&apos;NK1.33&apos;] = &apos;&apos;;
		msg[&apos;NK1&apos;][i][&apos;NK1.34&apos;] = &apos;&apos;;
		msg[&apos;NK1&apos;][i][&apos;NK1.35&apos;] = &apos;&apos;;
		msg[&apos;NK1&apos;][i][&apos;NK1.36&apos;] = &apos;&apos;;
		msg[&apos;NK1&apos;][i][&apos;NK1.37&apos;] = &apos;&apos;;	
		delete msg[&apos;NK1&apos;][&apos;NK1.38&apos;];
		delete msg[&apos;NK1&apos;][&apos;NK1.39&apos;];
		i++; 
	}


	//OBR
	logger.info (&quot;Translating OBR Segment(s).&quot;);
	i=0;
	while(msg[&apos;OBR&apos;][i] != null) { 
		
		if (i == 0) {
			// Moving SPM data to the first OBR 
			//OBR 2 (SPM 2.1 =&gt; OBR 2)
			var spm_2_1_List = msg[&apos;SPM&apos;][&apos;SPM.2&apos;][&apos;SPM.2.1&apos;].toString().split(&quot;&amp;&quot;);
			var count = (msg[&apos;SPM&apos;][&apos;SPM.2&apos;][&apos;SPM.2.1&apos;].toString().split(&quot;&amp;&quot;).length - 1);
		    if (count &gt;= 0){
			  msg[&apos;OBR&apos;][i][&apos;OBR.2&apos;][&apos;OBR.2.1&apos;] = spm_2_1_List[0] ; // OBR.15.1.1
			}
			if (count &gt;= 1){
			  msg[&apos;OBR&apos;][i][&apos;OBR.2&apos;][&apos;OBR.2.2&apos;] = spm_2_1_List[1]; // OBR.15.1.2
			}
			if (count &gt;= 2){
    		  msg[&apos;OBR&apos;][i][&apos;OBR.2&apos;][&apos;OBR.2.3&apos;] = spm_2_1_List[2]; // OBR.15.1.3
			}
			if (count &gt;= 3){
	    	  msg[&apos;OBR&apos;][i][&apos;OBR.2&apos;][&apos;OBR.2.4&apos;] = spm_2_1_List[3]; // OBR.15.1.1
			}

			//OBR 3 (SPM 2.2 =&gt; OBR 3)
			var spm_2_2_List = msg[&apos;SPM&apos;][&apos;SPM.2&apos;][&apos;SPM.2.2&apos;].toString().split(&quot;&amp;&quot;);
			var count = (msg[&apos;SPM&apos;][&apos;SPM.2&apos;][&apos;SPM.2.2&apos;].toString().split(&quot;&amp;&quot;).length - 1);
    		if (count &gt;= 0){
			  msg[&apos;OBR&apos;][i][&apos;OBR.3&apos;][&apos;OBR.3.1&apos;] = spm_2_2_List[0] ;
			}
			if (count &gt;= 1){
			  msg[&apos;OBR&apos;][i][&apos;OBR.3&apos;][&apos;OBR.3.2&apos;] = spm_2_2_List[1]; 
			}
			if (count &gt;= 2){
	    	  msg[&apos;OBR&apos;][i][&apos;OBR.3&apos;][&apos;OBR.3.3&apos;] = spm_2_2_List[2]; 
			}
			if (count &gt;= 3){
    		  msg[&apos;OBR&apos;][i][&apos;OBR.3&apos;][&apos;OBR.3.4&apos;] = spm_2_2_List[3]; 
			}
		}
		

		msg[&apos;OBR&apos;][i][&apos;OBR.5&apos;] = &apos;&apos;;
		msg[&apos;OBR&apos;][i][&apos;OBR.6&apos;] = &apos;&apos;;

		if (i == 0) {
			// Moving SPM data to the first OBR 
			//OBR 9.1 (SPM 12.1 =&gt; OBR 9.1)
			msg[&apos;OBR&apos;][i][&apos;OBR.9&apos;][&apos;OBR.9.1&apos;] = msg[&apos;SPM&apos;][&apos;SPM.12&apos;][&apos;SPM.12.1&apos;].toString();

			//OBR 9.2 (SPM 12.2 =&gt; OBR 9.2)
			msg[&apos;OBR&apos;][i][&apos;OBR.9&apos;][&apos;OBR.9.2&apos;] = msg[&apos;SPM&apos;][&apos;SPM.12&apos;][&apos;SPM.12.2&apos;].toString();			
		}
	
		msg[&apos;OBR&apos;][i][&apos;OBR.11&apos;] = &apos;&apos;;
		msg[&apos;OBR&apos;][i][&apos;OBR.12&apos;] = &apos;&apos;;
	
		if (i == 0) {
			// Moving SPM data to the first OBR 
			//OBR 14 (SPM 18.1 =&gt; OBR 14.1)
			msg[&apos;OBR&apos;][i][&apos;OBR.14&apos;][&apos;OBR.14.1&apos;] = msg[&apos;SPM&apos;][&apos;SPM.18&apos;][&apos;SPM.18.1&apos;].toString();
	
			//OBR 15.1 (SPM 4 =&gt; OBR 15.1)
			msg[&apos;OBR&apos;][i][&apos;OBR.15&apos;][&apos;OBR.15.1&apos;] = msg[&apos;SPM&apos;][&apos;SPM.4&apos;][&apos;SPM.4.1&apos;].toString() + &quot;&amp;&quot; +
                                     msg[&apos;SPM&apos;][&apos;SPM.4&apos;][&apos;SPM.4.2&apos;].toString() + &quot;&amp;&quot; +
                                     msg[&apos;SPM&apos;][&apos;SPM.4&apos;][&apos;SPM.4.3&apos;].toString() + &quot;&amp;&quot; +
                                     msg[&apos;SPM&apos;][&apos;SPM.4&apos;][&apos;SPM.4.4&apos;].toString()+ &quot;&amp;&quot; +
                                     msg[&apos;SPM&apos;][&apos;SPM.4&apos;][&apos;SPM.4.5&apos;].toString() + &quot;&amp;&quot; +
                                     msg[&apos;SPM&apos;][&apos;SPM.4&apos;][&apos;SPM.4.6&apos;].toString();

			//OBR 15.2 (SPM 6.2 =&gt; OBR 15.2)
			if (msg[&apos;SPM&apos;][&apos;SPM.6&apos;].length() &gt; 0){
				msg[&apos;OBR&apos;][i][&apos;OBR.15&apos;][&apos;OBR.15.2&apos;] = msg[&apos;SPM&apos;][&apos;SPM.6&apos;][0][&apos;SPM.6.2&apos;].toString();
			}

			//OBR 15.3 (SPM 14 =&gt; OBR 15.3)
			if (msg[&apos;SPM&apos;][&apos;SPM.14&apos;].length() &gt; 0){
				msg[&apos;OBR&apos;][i][&apos;OBR.15&apos;][&apos;OBR.15.3&apos;] = msg[&apos;SPM&apos;][&apos;SPM.14&apos;][0][&apos;SPM.14.1&apos;].toString();
			}

			//OBR 15.4 (SPM 8 =&gt; OBR 15.4)
			msg[&apos;OBR&apos;][i][&apos;OBR.15&apos;][&apos;OBR.15.4&apos;] = msg[&apos;SPM&apos;][&apos;SPM.8&apos;][&apos;SPM.8.1&apos;].toString() + &quot;&amp;&quot; +
                                     msg[&apos;SPM&apos;][&apos;SPM.8&apos;][&apos;SPM.8.2&apos;].toString() + &quot;&amp;&quot; +
                                     msg[&apos;SPM&apos;][&apos;SPM.8&apos;][&apos;SPM.8.3&apos;].toString() + &quot;&amp;&quot; +
                                     msg[&apos;SPM&apos;][&apos;SPM.8&apos;][&apos;SPM.8.4&apos;].toString()+ &quot;&amp;&quot; +
                                     msg[&apos;SPM&apos;][&apos;SPM.8&apos;][&apos;SPM.8.5&apos;].toString() + &quot;&amp;&quot; +
                                     msg[&apos;SPM&apos;][&apos;SPM.8&apos;][&apos;SPM.8.6&apos;].toString();

			//OBR 15.5 (SPM 9 =&gt; OBR 15.5) 
			if (msg[&apos;SPM&apos;][&apos;SPM.9&apos;].length() &gt; 0){
				msg[&apos;OBR&apos;][i][&apos;OBR.15&apos;][&apos;OBR.15.5&apos;] = msg[&apos;SPM&apos;][&apos;SPM.9&apos;][0][&apos;SPM.9.1&apos;].toString() + &quot;&amp;&quot; +
                                     msg[&apos;SPM&apos;][&apos;SPM.9&apos;][0][&apos;SPM.9.2&apos;].toString() + &quot;&amp;&quot; +
                                     msg[&apos;SPM&apos;][&apos;SPM.9&apos;][0][&apos;SPM.9.3&apos;].toString() + &quot;&amp;&quot; +
                                     msg[&apos;SPM&apos;][&apos;SPM.9&apos;][0][&apos;SPM.9.4&apos;].toString()+ &quot;&amp;&quot; +
                                     msg[&apos;SPM&apos;][&apos;SPM.9&apos;][0][&apos;SPM.9.5&apos;].toString() + &quot;&amp;&quot; +
                                     msg[&apos;SPM&apos;][&apos;SPM.9&apos;][0][&apos;SPM.9.6&apos;].toString();
			}

			//OBR 15.6 (SPM 7 =&gt; OBR 15.6)			
			msg[&apos;OBR&apos;][i][&apos;OBR.15&apos;][&apos;OBR.15.6&apos;] = msg[&apos;SPM&apos;][&apos;SPM.7&apos;][&apos;SPM.7.1&apos;].toString() + &quot;&amp;&quot; +
                                     msg[&apos;SPM&apos;][&apos;SPM.7&apos;][&apos;SPM.7.2&apos;].toString() + &quot;&amp;&quot; +
                                     msg[&apos;SPM&apos;][&apos;SPM.7&apos;][&apos;SPM.7.3&apos;].toString() + &quot;&amp;&quot; +
                                     msg[&apos;SPM&apos;][&apos;SPM.7&apos;][&apos;SPM.7.4&apos;].toString()+ &quot;&amp;&quot; +
                                     msg[&apos;SPM&apos;][&apos;SPM.7&apos;][&apos;SPM.7.5&apos;].toString() + &quot;&amp;&quot; +
                                     msg[&apos;SPM&apos;][&apos;SPM.7&apos;][&apos;SPM.7.6&apos;].toString();
		
		}

		msg[&apos;OBR&apos;][i][&apos;OBR.18&apos;] = &apos;&apos;;
		msg[&apos;OBR&apos;][i][&apos;OBR.19&apos;] = &apos;&apos;;
		msg[&apos;OBR&apos;][i][&apos;OBR.20&apos;] = &apos;&apos;;
		msg[&apos;OBR&apos;][i][&apos;OBR.21&apos;] = &apos;&apos;;
		msg[&apos;OBR&apos;][i][&apos;OBR.23&apos;] = &apos;&apos;;
		msg[&apos;OBR&apos;][i][&apos;OBR.24&apos;] = &apos;&apos;;
		msg[&apos;OBR&apos;][i][&apos;OBR.27&apos;] = &apos;&apos;;

		//OBR 28 - Infinitely repeating in 251 and only 5 repetitions allowed in 2.3.1
		while (msg[&apos;OBR&apos;][i][&apos;OBR.28&apos;][5] != null){
			delete msg[&apos;OBR&apos;][i][&apos;OBR.28&apos;][5];
		}

		if (i ==0) {
			// Moving SPM data to the first OBR
			//OBR 29 (SPM 3 =&gt; OBR 29)
			if (msg[&apos;SPM&apos;][&apos;SPM.3&apos;].length() &gt; 0){
				msg[&apos;OBR&apos;][i][&apos;OBR.29&apos;] = msg[&apos;SPM&apos;][&apos;SPM.3&apos;][0][&apos;SPM.3.1&apos;].toString() + &quot;^&quot; + msg[&apos;SPM&apos;][&apos;SPM.3&apos;][0][&apos;SPM.3.2&apos;].toString();			
			}
		}
		
		msg[&apos;OBR&apos;][i][&apos;OBR.30&apos;]= &apos;&apos;;
		msg[&apos;OBR&apos;][i][&apos;OBR.36&apos;] = &apos;&apos;;

		if (i == 0){
			// Moving SPM data to the first OBR
			//OBR 37 (SPM 26 =&gt; OBR 37)
			msg[&apos;OBR&apos;][i][&apos;OBR.37&apos;][&apos;OBR.37.1&apos;] = msg[&apos;SPM&apos;][&apos;SPM.26&apos;][&apos;SPM.26.1&apos;].toString();
		}
	
		msg[&apos;OBR&apos;][i][&apos;OBR.38&apos;] = &apos;&apos;;
		msg[&apos;OBR&apos;][i][&apos;OBR.39&apos;] = &apos;&apos;;
		msg[&apos;OBR&apos;][i][&apos;OBR.40&apos;] = &apos;&apos;;
		msg[&apos;OBR&apos;][i][&apos;OBR.41&apos;] = &apos;&apos;;
		msg[&apos;OBR&apos;][i][&apos;OBR.42&apos;] = &apos;&apos;;
		msg[&apos;OBR&apos;][i][&apos;OBR.43&apos;] = &apos;&apos;;
		msg[&apos;OBR&apos;][i][&apos;OBR.44&apos;] = &apos;&apos;;
		msg[&apos;OBR&apos;][i][&apos;OBR.45&apos;] = &apos;&apos;;

		//OBR - 46 - repeating in 251 and not exists in 231		
		while (msg[&apos;OBR&apos;][i][&apos;OBR.46&apos;][0] != null){
			delete msg[&apos;OBR&apos;][i][&apos;OBR.46&apos;][0];
		}
		
		//OBR - 47 - repeating in 251 and not exists in 231		
		while (msg[&apos;OBR&apos;][i][&apos;OBR.47&apos;][0] != null){
			delete msg[&apos;OBR&apos;][i][&apos;OBR.47&apos;][0];
		}

		delete msg[&apos;OBR&apos;][i][&apos;OBR.48&apos;];
		delete msg[&apos;OBR&apos;][i][&apos;OBR.49&apos;];
		delete msg[&apos;OBR&apos;][i][&apos;OBR.50&apos;];

		i++;
	}


	//ORC	
	logger.info (&quot;Translating ORC Segment.&quot;);
	if (msg[&apos;ORC&apos;].length() &gt; 0){
		msg[&apos;ORC&apos;][&apos;ORC.1&apos;] = &apos;&apos;;
		msg[&apos;ORC&apos;][&apos;ORC.2&apos;] = &apos;&apos;;
		msg[&apos;ORC&apos;][&apos;ORC.3&apos;] = &apos;&apos;;
		msg[&apos;ORC&apos;][&apos;ORC.4&apos;] = &apos;&apos;;
		msg[&apos;ORC&apos;][&apos;ORC.5&apos;] = &apos;&apos;;
		msg[&apos;ORC&apos;][&apos;ORC.6&apos;] = &apos;&apos;;
		msg[&apos;ORC&apos;][&apos;ORC.7&apos;] = &apos;&apos;;
		msg[&apos;ORC&apos;][&apos;ORC.8&apos;] = &apos;&apos;;
		msg[&apos;ORC&apos;][&apos;ORC.9&apos;] = &apos;&apos;;
		msg[&apos;ORC&apos;][&apos;ORC.10&apos;] = &apos;&apos;;
		msg[&apos;ORC&apos;][&apos;ORC.11&apos;] = &apos;&apos;;
		msg[&apos;ORC&apos;][&apos;ORC.12&apos;] = &apos;&apos;;
		msg[&apos;ORC&apos;][&apos;ORC.13&apos;] = &apos;&apos;;

		//ORC 14 - Infinitely repeating in 251 and only 2 repetitions allowed in 2.3.1
		while (msg[&apos;ORC&apos;][&apos;ORC.14&apos;][2] != null){
			delete msg[&apos;ORC&apos;][&apos;ORC.14&apos;][2];
		}

		msg[&apos;ORC&apos;][&apos;ORC.14&apos;] = &apos;&apos;;
		msg[&apos;ORC&apos;][&apos;ORC.15&apos;] = &apos;&apos;;
		msg[&apos;ORC&apos;][&apos;ORC.16&apos;] = &apos;&apos;;
		msg[&apos;ORC&apos;][&apos;ORC.17&apos;] = &apos;&apos;;
		msg[&apos;ORC&apos;][&apos;ORC.18&apos;] = &apos;&apos;;
		msg[&apos;ORC&apos;][&apos;ORC.19&apos;] = &apos;&apos;;
		msg[&apos;ORC&apos;][&apos;ORC.20&apos;] = &apos;&apos;;
		delete msg[&apos;ORC&apos;][&apos;ORC.25&apos;];
		delete msg[&apos;ORC&apos;][&apos;ORC.26&apos;];
		delete msg[&apos;ORC&apos;][&apos;ORC.27&apos;];
		delete msg[&apos;ORC&apos;][&apos;ORC.28&apos;];
		delete msg[&apos;ORC&apos;][&apos;ORC.29&apos;];
		delete msg[&apos;ORC&apos;][&apos;ORC.30&apos;];
		delete msg[&apos;ORC&apos;][&apos;ORC.31&apos;];
	}

	//OBX
	logger.info (&quot;Translating OBX Segment(s).&quot;);
	var nteCount = -1; //Count to keep track of the last NTE segment accessed or added.
	var countNewNTESeg = 0; // count to keep track of the new NTE segments added
	var currCountForSpmObx = 0;// count to keep track of the current set id.
	var ntePosForSpmObx = 0; //to determine the right position to place the NTEs (the ones created for the SPM related OBXs)
	i=0;
	while(msg[&apos;OBX&apos;][i] != null) 
    { 	
		if (spmRelatedFirstObx == -1 || (i &lt; spmRelatedFirstObx || i &gt; spmRelatedLastObx )){
			
			var obx_2_1 = msg[&apos;OBX&apos;][i][&apos;OBX.2&apos;][&apos;OBX.2.1&apos;].toString();	
			if (!(obx_2_1 == &quot;SN&quot; || obx_2_1 == &quot;TX&quot; || obx_2_1 == &quot;CE&quot; || obx_2_1 == &quot;TS&quot; )){//No need to map if it already has a 231 value
				msg[&apos;OBX&apos;][i][&apos;OBX.2&apos;][&apos;OBX.2.1&apos;] = $(&apos;translationMap&apos;).get_2_3_1Code(obx_2_1);
			}

			//OBX 5
			j=0;
			while (msg[&apos;OBX&apos;][i][&apos;OBX.5&apos;][j]!= null){
				var obx_5_1 = msg[&apos;OBX&apos;][i][&apos;OBX.5&apos;][j][&apos;OBX.5.1&apos;].toString();
				obx_5_1 = String(obx_5_1);
				if (obx_2_1 == &apos;NM&apos;) {//Handling NM component
					if (obx_5_1) {
						msg[&apos;OBX&apos;][i][&apos;OBX.5&apos;][j][&apos;OBX.5.1&apos;] = &quot;^&quot; + obx_5_1;
					}
				}
				if (obx_2_1 == &apos;CWE&apos;){//Handling CWE component
					delete msg[&apos;OBX&apos;][i][&apos;OBX.5&apos;][j][&apos;OBX.5.7&apos;];
					delete msg[&apos;OBX&apos;][i][&apos;OBX.5&apos;][j][&apos;OBX.5.8&apos;];
					delete msg[&apos;OBX&apos;][i][&apos;OBX.5&apos;][j][&apos;OBX.5.9&apos;];
					delete msg[&apos;OBX&apos;][i][&apos;OBX.5&apos;][j][&apos;OBX.5.10&apos;];
					delete msg[&apos;OBX&apos;][i][&apos;OBX.5&apos;][j][&apos;OBX.5.11&apos;];
					delete msg[&apos;OBX&apos;][i][&apos;OBX.5&apos;][j][&apos;OBX.5.12&apos;];
					delete msg[&apos;OBX&apos;][i][&apos;OBX.5&apos;][j][&apos;OBX.5.13&apos;];
					delete msg[&apos;OBX&apos;][i][&apos;OBX.5&apos;][j][&apos;OBX.5.14&apos;];
					delete msg[&apos;OBX&apos;][i][&apos;OBX.5&apos;][j][&apos;OBX.5.15&apos;];
					delete msg[&apos;OBX&apos;][i][&apos;OBX.5&apos;][j][&apos;OBX.5.16&apos;];
				}
				j++;
			}
		
			//OBX 8
			j=0;
			while (msg[&apos;OBX&apos;][i][&apos;OBX.8&apos;][j]!= null){
				if ( j&lt; 5 ) {
					var obx_8 = msg[&apos;OBX&apos;][i][&apos;OBX.8&apos;][j].toString();
					if (obx_8.contains(&quot;HL70078&quot;))
					{
						var obx_8_1 = msg[&apos;OBX&apos;][i][&apos;OBX.8&apos;][j][&apos;OBX.8.1&apos;].toString();
						msg[&apos;OBX&apos;][i][&apos;OBX.8&apos;][j] = &apos;&apos;;
						msg[&apos;OBX&apos;][i][&apos;OBX.8&apos;][j][&apos;OBX.8.1&apos;] = obx_8_1;
					}
					else
					{
						var obx_8_9 = msg[&apos;OBX&apos;][i][&apos;OBX.8&apos;][j][&apos;OBX.8.9&apos;].toString();
						msg[&apos;OBX&apos;][i][&apos;OBX.8&apos;][j] = &apos;&apos;;
						msg[&apos;OBX&apos;][i][&apos;OBX.8&apos;][j][&apos;OBX.8.1&apos;] = obx_8_9;
					}
				}else{
						//OBX 8 - Infinitely repeating in 251 and only 5 repetitions allowed in 2.3.1
						delete msg[&apos;OBX&apos;][i][&apos;OBX.8&apos;][j];
				}
				j++;
			}

			msg[&apos;OBX&apos;][i][&apos;OBX.14&apos;][&apos;OBX.14.1&apos;] = msg[&apos;OBX&apos;][i][&apos;OBX.19&apos;][&apos;OBX.19.1&apos;].toString();
		
			//OBX 15.1 &amp; 15.2
			msg[&apos;OBX&apos;][i][&apos;OBX.15&apos;][&apos;OBX.15.1&apos;] = msg[&apos;OBX&apos;][i][&apos;OBX.23&apos;][&apos;OBX.23.10&apos;].toString();
			msg[&apos;OBX&apos;][i][&apos;OBX.15&apos;][&apos;OBX.15.2&apos;] = msg[&apos;OBX&apos;][i][&apos;OBX.23&apos;][&apos;OBX.23.1&apos;].toString();
			msg[&apos;OBX&apos;][i][&apos;OBX.15&apos;][&apos;OBX.15.3&apos;] = msg[&apos;OBX&apos;][i][&apos;OBX.23&apos;][&apos;OBX.23.6&apos;].toString();
 
			//OBX - 18 - repeating in 251 and not exists in 231		
			while (msg[&apos;OBX&apos;][i][&apos;OBX.18&apos;][0] != null){
				delete msg[&apos;OBX&apos;][i][&apos;OBX.18&apos;][0];
			}

			delete msg[&apos;OBX&apos;][i][&apos;OBX.19&apos;];
			delete msg[&apos;OBX&apos;][i][&apos;OBX.20&apos;];
			delete msg[&apos;OBX&apos;][i][&apos;OBX.21&apos;];
			delete msg[&apos;OBX&apos;][i][&apos;OBX.22&apos;];
			delete msg[&apos;OBX&apos;][i][&apos;OBX.23&apos;];

			var currCount = 0;
			// determine the number id of the next NTE to be added
			if (obx_array[i].nextNteSegId &gt; 0){
				nteCount = obx_array[i].nextNteSegId -1 + countNewNTESeg;
			}else if (countNewNTESeg &gt; 0){
				nteCount = countNewNTESeg -1;
			}
			//logger.info (&quot;    nteCount :&quot;+nteCount);

			if (msg[&apos;OBX&apos;][i][&apos;OBX.24&apos;][&apos;OBX.24.1&apos;].toString()!=&apos;&apos;){

				var newNTE = &apos;&apos;;
				newNTE = createSegment(&apos;NTE&apos;);

			    // workaround to put the new segment after the existing NTE, if another exists, otherwise after MSH
		    	if (obx_array[i].lastNteSeg == -1)
    			{
	    	  		msg[&apos;OBX&apos;][i] += newNTE;
    			}
		    	else
    			{
	    	  		msg[&apos;NTE&apos;][nteCount] += newNTE;
    			}
				nteCount ++;

				//Determine the last NTE segment id under the current OBX
				if (obx_array[i].lastNteSeg != -1 &amp;&amp; nteCount &gt; 0 ){
					var id = nteCount - 1;
					currCount = msg[&apos;NTE&apos;][id][&apos;NTE.1&apos;][&apos;NTE.1.1&apos;].toString();
				} 
				currCount++;

				var obx_24_1_List = msg[&apos;OBX&apos;][i][&apos;OBX.24&apos;][&apos;OBX.24.1&apos;].toString().split(&quot;&amp;&quot;);
				var count = (msg[&apos;OBX&apos;][i][&apos;OBX.24&apos;][&apos;OBX.24.1&apos;].toString().split(&quot;&amp;&quot;).length - 1);
				var obx_24_1_1 = &apos;&apos;;
			    if (count &gt;= 0){
				  obx_24_1_1 = obx_24_1_List[0] ; // OBR.15.1.1
				}

				msg[&apos;NTE&apos;][nteCount][&apos;NTE.1&apos;] = currCount;
		    	msg[&apos;NTE&apos;][nteCount][&apos;NTE.2&apos;] = &quot;L&quot;;
				msg[&apos;NTE&apos;][nteCount][&apos;NTE.3&apos;] = &quot;Performing Lab Address: &quot; + obx_24_1_1 + &quot;, &quot; + msg[&apos;OBX&apos;][i][&apos;OBX.24&apos;][&apos;OBX.24.3&apos;].toString() + &quot;, &quot; +
				msg[&apos;OBX&apos;][i][&apos;OBX.24&apos;][&apos;OBX.24.4&apos;].toString() + &quot;  &quot; + msg[&apos;OBX&apos;][i][&apos;OBX.24&apos;][&apos;OBX.24.5&apos;].toString();

				logger.info (&quot;    Adding NTE for msg[&apos;OBX&apos;][&quot;+i+&quot;][&apos;OBX.24&apos;] - msg[&apos;NTE&apos;][&quot;+nteCount+&quot;] :&quot;+msg[&apos;NTE&apos;][nteCount]);	
				
				countNewNTESeg++;
			}

			if (msg[&apos;OBX&apos;][i][&apos;OBX.25&apos;][&apos;OBX.25.1&apos;].toString()!=&apos;&apos;){
	
				var newNTE = &apos;&apos;;
				newNTE = createSegment(&apos;NTE&apos;);

		    	// workaround to put the new segment after the existing NTE, if another exists, otherwise after MSH
		    	if (obx_array[i].lastNteSeg == -1 &amp;&amp; currCount == 0)
    			{
	    	  		msg[&apos;OBX&apos;][i] += newNTE;
    			}
		    	else
    			{
	    	  		msg[&apos;NTE&apos;][nteCount] += newNTE;
    			}
				nteCount ++;

				//Determine the last NTE segment id under the current OBX
				if (obx_array[i].lastNteSeg != -1 &amp;&amp; currCount == 0 &amp;&amp; nteCount &gt; 0 ){
					var id = nteCount - 1;
					currCount = msg[&apos;NTE&apos;][id][&apos;NTE.1&apos;][&apos;NTE.1.1&apos;].toString();
				} 
				currCount++;

				var obx_25_2_List = msg[&apos;OBX&apos;][i][&apos;OBX.25&apos;][&apos;OBX.25.2&apos;].toString().split(&quot;&amp;&quot;);
				var count = (msg[&apos;OBX&apos;][i][&apos;OBX.25&apos;][&apos;OBX.25.2&apos;].toString().split(&quot;&amp;&quot;).length - 1);
				var obx_25_2_1 = &apos;&apos;;
			    if (count &gt;= 0){
				  obx_25_2_1 = obx_25_2_List[0] ; // OBR.15.1.1
				}

				msg[&apos;NTE&apos;][nteCount][&apos;NTE.1&apos;] = currCount;
		    	msg[&apos;NTE&apos;][nteCount][&apos;NTE.2&apos;] = &quot;L&quot;;
				msg[&apos;NTE&apos;][nteCount][&apos;NTE.3&apos;] = &quot;Performing Lab Medical Director: &quot; + obx_25_2_1 + &quot;, &quot; +
				msg[&apos;OBX&apos;][i][&apos;OBX.25&apos;][&apos;OBX.25.3&apos;].toString() + &quot; &quot; + msg[&apos;OBX&apos;][i][&apos;OBX.25&apos;][&apos;OBX.25.4&apos;].toString();

				logger.info (&quot;    Adding NTE for msg[&apos;OBX&apos;][&quot;+i+&quot;][&apos;OBX.25&apos;] - msg[&apos;NTE&apos;][&quot;+nteCount+&quot;] :&quot;+msg[&apos;NTE&apos;][nteCount]);	
				countNewNTESeg++;
			}

			//Determining the next NTE position under the first OBX segment which is to be used by the OBX following SPM
			if (i == 0 &amp;&amp; spmRelatedFirstObx != -1){

				if (obx_array[0].nextNteSegId &gt; 0){
					ntePosForSpmObx = obx_array[i].nextNteSegId + countNewNTESeg;
				}else if (countNewNTESeg &gt; 0){
					ntePosForSpmObx = countNewNTESeg;
				}
				currCountForSpmObx = currCount + 1;
				//logger.info (&quot;    ntePosForSpmObx :&quot;+ntePosForSpmObx);

			}
	
			delete msg[&apos;OBX&apos;][i][&apos;OBX.24&apos;];
			delete msg[&apos;OBX&apos;][i][&apos;OBX.25&apos;];
		
		// End of processing of all the OBXS before SPM

		}
		else{ //Processing of OBXs following SPM
			
			//Create an NTE for the OBX following SPM and add it under the first OBX NTEs
			
			var newNTE = &apos;&apos;;
			newNTE = createSegment(&apos;NTE&apos;);
			var lastNteId = ntePosForSpmObx - 1;		

		    // workaround to put the new segment after the existing NTE, if another exists, otherwise immediately after the first OBX
	    	if (lastNteId == -1)
    		{
	    		msg[&apos;OBX&apos;][0] += newNTE;
    		}
	    	else
   			{
    	  		msg[&apos;NTE&apos;][lastNteId] += newNTE;
   			}

			var spm_obx_3_value = msg[&apos;OBX&apos;][i][&apos;OBX.3&apos;][&apos;OBX.3.1&apos;].toString() + &quot; &quot; + msg[&apos;OBX&apos;][i][&apos;OBX.3&apos;][&apos;OBX.3.2&apos;].toString() + &quot; &quot; + msg[&apos;OBX&apos;][i][&apos;OBX.3&apos;][&apos;OBX.3.3&apos;].toString() + &quot; &quot; + msg[&apos;OBX&apos;][i][&apos;OBX.3&apos;][&apos;OBX.3.4&apos;].toString() + &quot; &quot; + msg[&apos;OBX&apos;][i][&apos;OBX.3&apos;][&apos;OBX.3.5&apos;].toString() + &quot; &quot; + msg[&apos;OBX&apos;][i][&apos;OBX.3&apos;][&apos;OBX.3.6&apos;].toString() + &quot; &quot; + msg[&apos;OBX&apos;][i][&apos;OBX.3&apos;][&apos;OBX.3.7&apos;].toString() + &quot; &quot; + msg[&apos;OBX&apos;][i][&apos;OBX.3&apos;][&apos;OBX.3.8&apos;].toString() + &quot; &quot; + msg[&apos;OBX&apos;][i][&apos;OBX.3&apos;][&apos;OBX.3.9&apos;].toString() + &quot; &quot; + msg[&apos;OBX&apos;][i][&apos;OBX.3&apos;][&apos;OBX.3.10&apos;].toString() + &quot; &quot; + msg[&apos;OBX&apos;][i][&apos;OBX.3&apos;][&apos;OBX.3.11&apos;].toString() + &quot; &quot; + msg[&apos;OBX&apos;][i][&apos;OBX.3&apos;][&apos;OBX.3.12&apos;].toString() + &quot; &quot; + msg[&apos;OBX&apos;][i][&apos;OBX.3&apos;][&apos;OBX.3.13&apos;].toString() + &quot; &quot; + msg[&apos;OBX&apos;][i][&apos;OBX.3&apos;][&apos;OBX.3.14&apos;].toString();
			var spm_obx_5_value = msg[&apos;OBX&apos;][i][&apos;OBX.5&apos;][&apos;OBX.5.1&apos;].toString() + &quot; &quot; + msg[&apos;OBX&apos;][i][&apos;OBX.5&apos;][&apos;OBX.5.2&apos;].toString() + &quot; &quot; + msg[&apos;OBX&apos;][i][&apos;OBX.5&apos;][&apos;OBX.5.3&apos;].toString() + &quot; &quot; + msg[&apos;OBX&apos;][i][&apos;OBX.5&apos;][&apos;OBX.5.4&apos;].toString() + &quot; &quot; + msg[&apos;OBX&apos;][i][&apos;OBX.5&apos;][&apos;OBX.5.5&apos;].toString() + &quot; &quot; + msg[&apos;OBX&apos;][i][&apos;OBX.5&apos;][&apos;OBX.5.6&apos;].toString() + &quot; &quot; + msg[&apos;OBX&apos;][i][&apos;OBX.5&apos;][&apos;OBX.5.7&apos;].toString() + &quot; &quot; + msg[&apos;OBX&apos;][i][&apos;OBX.5&apos;][&apos;OBX.5.8&apos;].toString() + &quot; &quot; + msg[&apos;OBX&apos;][i][&apos;OBX.5&apos;][&apos;OBX.5.9&apos;].toString() + &quot; &quot; + msg[&apos;OBX&apos;][i][&apos;OBX.5&apos;][&apos;OBX.5.10&apos;].toString() + &quot; &quot; + msg[&apos;OBX&apos;][i][&apos;OBX.5&apos;][&apos;OBX.5.11&apos;].toString() + &quot; &quot; + msg[&apos;OBX&apos;][i][&apos;OBX.5&apos;][&apos;OBX.5.12&apos;].toString() + &quot; &quot; + msg[&apos;OBX&apos;][i][&apos;OBX.5&apos;][&apos;OBX.5.13&apos;].toString() + &quot; &quot; + msg[&apos;OBX&apos;][i][&apos;OBX.5&apos;][&apos;OBX.5.14&apos;].toString();

			spm_obx_3_value = spm_obx_3_value.trim();
			spm_obx_5_value = spm_obx_5_value.trim();		
			
			msg[&apos;NTE&apos;][ntePosForSpmObx][&apos;NTE.1&apos;] = currCountForSpmObx;
	    	msg[&apos;NTE&apos;][ntePosForSpmObx][&apos;NTE.2&apos;] = &quot;C&quot;;
			msg[&apos;NTE&apos;][ntePosForSpmObx][&apos;NTE.3&apos;] = &quot;Observation Identifier: &quot; + spm_obx_3_value + &quot;; Observation Value: &quot; + spm_obx_5_value;
			

			logger.info (&quot;    Adding NTE for the SPM OBX (msg[&apos;OBX&apos;][&quot;+i+&quot;])  - msg[&apos;NTE&apos;][&quot;+ntePosForSpmObx+&quot;] :&quot;+msg[&apos;NTE&apos;][ntePosForSpmObx]);		
			
			ntePosForSpmObx++;
			currCountForSpmObx++;
		}
	
		i++;
	}	

	//PV1
	logger.info (&quot;Translating PV1 Segment.&quot;);
	if (msg[&apos;PV1&apos;].length() &gt; 0){
		msg[&apos;PV1&apos;][&apos;PV1.1&apos;][&apos;PV1.1.1&apos;] = &apos;1&apos;;
		
		//PV1-45 is repeating in 251 and not so in 231. Hence, deleting all the repetitions except the first one.
		while (msg[&apos;PV1&apos;][&apos;PV1.45&apos;][1] != null){
			delete msg[&apos;PV1&apos;][&apos;PV1.45&apos;][1];
		}
	}

	//PV2
	logger.info (&quot;Translating PV2 Segment.&quot;);
	if (msg[&apos;PV2&apos;].length() &gt; 0){
		delete msg[&apos;PV2&apos;][&apos;PV2.38&apos;];
		
		//PV2 39 - repeating in 251 and not exists in 231		
		while (msg[&apos;PV2&apos;][&apos;PV2.39&apos;][0] != null){
			delete msg[&apos;PV2&apos;][&apos;PV2.39&apos;][0];
		}

		delete msg[&apos;PV2&apos;][&apos;PV2.40&apos;];

		//PV2 41 - repeating in 251 and not exists in 231		
		while (msg[&apos;PV2&apos;][&apos;PV2.41&apos;][0] != null){
			delete msg[&apos;PV2&apos;][&apos;PV2.41&apos;][0];
		}

		delete msg[&apos;PV2&apos;][&apos;PV2.42&apos;];
		delete msg[&apos;PV2&apos;][&apos;PV2.43&apos;];
		delete msg[&apos;PV2&apos;][&apos;PV2.44&apos;];

		//PV2 45 - repeating in 251 and not exists in 231		
		while (msg[&apos;PV2&apos;][&apos;PV2.45&apos;][0] != null){
			delete msg[&apos;PV2&apos;][&apos;PV2.45&apos;][0];
		}

		delete msg[&apos;PV2&apos;][&apos;PV2.46&apos;];
		delete msg[&apos;PV2&apos;][&apos;PV2.47&apos;];
		delete msg[&apos;PV2&apos;][&apos;PV2.48&apos;];

		//PV2 49 - repeating in 251 and not exists in 231		
		while (msg[&apos;PV2&apos;][&apos;PV2.49&apos;][0] != null){
			delete msg[&apos;PV2&apos;][&apos;PV2.49&apos;][0];
		}

	}

	//Delete Segments that are not supported in 2.3.1
	if (msg[&apos;SFT&apos;].length() &gt; 0){
		logger.info (&quot;Deleting SFT Segment.&quot;);
		delete msg[&apos;SFT&apos;];
	}
	if (msg[&apos;SPM&apos;].length() &gt; 0){
		logger.info (&quot;Deleting SPM Segment.&quot;);
		delete msg[&apos;SPM&apos;];
	}
	if (msg[&apos;TQ1&apos;].length() &gt; 0){
		logger.info (&quot;Deleting TQ1 Segment.&quot;);
		delete msg[&apos;TQ1&apos;];
	}
	if (msg[&apos;TQ2&apos;].length() &gt; 0){
		logger.info (&quot;Deleting TQ2 Segment.&quot;);
		delete msg[&apos;TQ2&apos;];
	}
	if (msg[&apos;FT1&apos;].length() &gt; 0){
		logger.info (&quot;Deleting FT1 Segment.&quot;);
		delete msg[&apos;FT1&apos;];
	}	
	if (msg[&apos;CTD&apos;].length() &gt; 0){
		logger.info (&quot;Deleting CTD Segment.&quot;);
		delete msg[&apos;CTD&apos;];
	}
	if (msg[&apos;CTI&apos;].length() &gt; 0){
		logger.info (&quot;Deleting CTI Segment.&quot;);
		delete msg[&apos;CTI&apos;];
	}

	if (msg[&apos;NTE&apos;].length() &gt; 0){
		//Deleting all Patient-related NTEs
		logger.info (&quot;First Non-Patient related NTE seg : &quot;+ firstNonPatientRelatedNTESeg);
		if (firstNonPatientRelatedNTESeg &gt; 0) {
			logger.info (&quot;Deleting all Patient-related NTE segments - all NTEs present before the NTE seg : &quot;+ firstNonPatientRelatedNTESeg);
			for (i = 0; i &lt; firstNonPatientRelatedNTESeg; i++){
				delete msg[&apos;NTE&apos;][0]; //Keep deleting the first NTE segment until we hit non patient related NTEs.
			}
		}	
	}

	//delete all SPM related OBX
	if (spmRelatedFirstObx != -1 ){
		i = spmRelatedFirstObx;
		k = spmRelatedLastObx - spmRelatedFirstObx + 1; //k value determines the number of segments to be deleted starting at i
		logger.info (&quot;Deleting all OBXs following SPM i.e OBX[&quot;+spmRelatedFirstObx+&quot;] to OBX[&quot;+spmRelatedLastObx+&quot;]&quot; );
		var delCount = 0;
		while(msg[&apos;OBX&apos;][spmRelatedFirstObx] != null &amp;&amp; delCount &lt; k) 
    	{
			delete msg[&apos;OBX&apos;][spmRelatedFirstObx];
			i++;
			delCount++;
		}	
	}
  }
}

catch(e)
{
  logger.error(&quot;Error in Store transformed message to file Transformer: ORU R01 2.5.1 to 2.3.1 Transformation: &quot; + e.message);
  channelMap.put(&apos;componentErrors&apos;,  $(&apos;componentErrors&apos;) + &quot;Store transformed message to file Transformer: ORU R01 2.5.1 to 2.3.1 Transformation: \n&quot; + e.message + &quot; |\n&quot;);
}</script>
            <type>JavaScript</type>
            <data class="map">
              <entry>
                <string>Script</string>
                <string>try
{

  String.prototype.contains = function(it) { return this.indexOf(it) != -1; };

  // 2.5.1 to 2.3.1 ORU R01-specific MSH transformations
  if ( ($(&apos;translateToVersion&apos;) == &apos;2.3.1&apos;) &amp;&amp;
       ($(&apos;msgType&apos;) == &apos;ORU&apos;) &amp;&amp;
       ($(&apos;msgTriggerEvent&apos;) == &apos;R01&apos;) &amp;&amp;
       ($(&apos;msgHL7VersionID&apos;) == &apos;2.5.1&apos;) )
  {

    logger.info(&quot;Transforming ORU R01 2.5.1 message to 2.3.1&quot;);
	
	//Parsing the Original Message to determine the following:
		//first non- patient related NTE sequence Id
		//Number of NTEs following each OBR/OBX
		//Number of NTEs before OBX
		//Identify the OBXs following SPM 
		//Determine the sequence id for any potential new NTEs under each OBR/OBX segment.
		//etc.

	logger.info(&quot;Parsing the original Message.&quot;);
	var	originalMessage = messageObject.getRawData();
	var lines = new Array();
	lines = originalMessage.split(&quot;\\r&quot;);

	var nte_follows_obr = false;
	var nte_follows_obx = false;
	var obx_follows_spm = false;
	var obr_array = [];
	var obx_array = [];
	var len = lines.length;
	var obrSeg = 0;
	var obxSeg = 0;
	var nteSeg = 0;
	var spmRelatedFirstObx = -1; //Sequence id of  the first Spm related OBX, if any
	var spmRelatedLastObx = -1; //Sequence id of  the last Spm related OBX, if any
	var firstNonPatientRelatedNTESeg = -1; //Sequence id of the first non-patient related NTE 
	var numOfNTEsBeforeOBX = 0;
	var nextNteSegId = 0; //this is going to be the sequence id for the next NTE segment to be added

	for (var l=0;l&lt;len;l++) {
		if(lines[l].startsWith(&quot;OBR|&quot;)) {
		    nte_follows_obr = true;
			nte_follows_obx = false;
			obx_follows_spm = false;
	    	var obr = {};
			obr.segNum = obrSeg;
			obr.firstNteSeg = -1;
			obr.lastNteSeg = -1;
			obr.nextNteSegId = nteSeg;

		    obr_array.push(obr);

			obrSeg++;			
 	    }else if(lines[l].startsWith(&quot;OBX|&quot;) ){
 		    nte_follows_obx = true;
			nte_follows_obr = false;
	    	var i = obr_array.length - 1;
		    var obx = {};
			obx.segNum = obxSeg;
			obx.firstNteSeg = -1;
			obx.lastNteSeg = -1;
			obx.nextNteSegId = nteSeg;

			obx_array.push(obx);

			if (obx_follows_spm == true &amp;&amp; spmRelatedFirstObx == -1){
				spmRelatedFirstObx = obxSeg; //This keeps track of the first OBX segment id following SPM
			}	
			
			if (obx_follows_spm == true){
				spmRelatedLastObx = obxSeg; //This keeps track of the first OBX segment id following SPM
			}
	
			obxSeg++;
 		 } else if(lines[l].startsWith(&quot;NTE|&quot;) ){
		    var i = obr_array.length -1; // last element of obr array
			var k = obx_array.length -1; // last element of obx array

    	    if (nte_follows_obr) {
		      	// this nte is after obr
			  	if (obr_array[i].firstNteSeg == -1){
					obr_array[i].firstNteSeg = nteSeg;
				}
				obr_array[i].lastNteSeg = nteSeg;

				if (firstNonPatientRelatedNTESeg == -1){
					firstNonPatientRelatedNTESeg = nteSeg;
				}
				
				nteSeg ++;
				obr_array[i].nextNteSegId = nteSeg;

		    }  else if (nte_follows_obx) {
   		      	// this nte is after obx
				if (obx_array[k].firstNteSeg == -1){
					obx_array[k].firstNteSeg = nteSeg;
				}
				obx_array[k].lastNteSeg = nteSeg;

				if (firstNonPatientRelatedNTESeg == -1){
					firstNonPatientRelatedNTESeg = nteSeg;
				}

				if (numOfNTEsBeforeOBX == 0){
					numOfNTEsBeforeOBX = nteSeg;
				}
				nteSeg ++;
				obx_array[k].nextNteSegId = nteSeg;
		    } else{
				//this nte is after PID/PD1
				nteSeg++;
			}
			obx_follows_spm =  false;
	 	 }else if(lines[l].startsWith(&quot;SPM|&quot;) ){
			obx_follows_spm =  true;
	     }
	}

	logger.info (&quot; SPM related first obx = &quot; + spmRelatedFirstObx);
	logger.info (&quot; SPM related last obx = &quot; + spmRelatedLastObx);

	//MSH
	logger.info (&quot;Translating MSH Segment.&quot;);
	if (msg[&apos;MSH&apos;].length() &gt; 0){
		var msh_2 = msg[&apos;MSH&apos;][&apos;MSH.2&apos;].toString();
		if (msh_2.length&gt;=5) {
			msg[&apos;MSH&apos;][&apos;MSH.2&apos;] = msh_2.substring(0, 4);
		}
		msg[&apos;MSH&apos;][&apos;MSH.9&apos;] = &apos;ORU^R01&apos;;
		msg[&apos;MSH&apos;][&apos;MSH.12&apos;][&apos;MSH.12.1&apos;] = &apos;2.3.1&apos;;
		msg[&apos;MSH&apos;][&apos;MSH.13&apos;] = &apos;&apos;;
		msg[&apos;MSH&apos;][&apos;MSH.14&apos;] = &apos;&apos;;
		msg[&apos;MSH&apos;][&apos;MSH.15&apos;] = &apos;&apos;;
		msg[&apos;MSH&apos;][&apos;MSH.16&apos;] = &apos;&apos;;
		msg[&apos;MSH&apos;][&apos;MSH.17&apos;] = &apos;&apos;;
		
		//MSH-18 is repeating in 251 and is set to empty for 231. Hence, deleting all the repetitions except the first one and setting that one to empty.
		while (msg[&apos;MSH&apos;][&apos;MSH.18&apos;][1] != null){
			delete msg[&apos;MSH&apos;][&apos;MSH.18&apos;][1];
		}

		msg[&apos;MSH&apos;][&apos;MSH.18&apos;] = &apos;&apos;; 
		msg[&apos;MSH&apos;][&apos;MSH.19&apos;] = &apos;&apos;;
		msg[&apos;MSH&apos;][&apos;MSH.20&apos;] = &apos;&apos;;

		//MSH 21 - repeating in 251 and not exists in 231
		while (msg[&apos;MSH&apos;][&apos;MSH.21&apos;][0] != null){
			delete msg[&apos;MSH&apos;][&apos;MSH.21&apos;][0];	
		}
	}

	//PID
	logger.info (&quot;Translating PID Segment.&quot;);
	if (msg[&apos;PID&apos;].length() &gt; 0){
		msg[&apos;PID&apos;][&apos;PID.1&apos;][&apos;PID.1.1&apos;] = &apos;1&apos;;
		
		//PID 10 - Handle possible repetitions &amp; Translate Race Code
		j = 0;
		while (msg[&apos;PID&apos;][&apos;PID.10&apos;][j] != null){
			msg[&apos;PID&apos;][&apos;PID.10&apos;][j][&apos;PID.10.1&apos;] = $(&apos;translationMap&apos;).get_2_3_1Code(msg[&apos;PID&apos;][&apos;PID.10&apos;][j][&apos;PID.10.1&apos;].toString());
			msg[&apos;PID&apos;][&apos;PID.10&apos;][j][&apos;PID.10.3&apos;] = &apos;HL70005&apos;; //PID 10.3 always set to the literal &apos;HL70005&apos;
			j++;
		}

		//PID-15 is repeating in 251 and not so in 231. Hence, deleting all the repetitions except the first one.
		while (msg[&apos;PID&apos;][&apos;PID.15&apos;][1] != null){
			delete msg[&apos;PID&apos;][&apos;PID.15&apos;][1];
		}

		//PID 22 - Translate Ethnic Group Code
		j = 0;
		while (msg[&apos;PID&apos;][&apos;PID.22&apos;][j] != null){
			msg[&apos;PID&apos;][&apos;PID.22&apos;][j][&apos;PID.22.1&apos;] = $(&apos;translationMap&apos;).get_2_3_1Code(msg[&apos;PID&apos;][&apos;PID.22&apos;][j][&apos;PID.22.1&apos;].toString());
			msg[&apos;PID&apos;][&apos;PID.22&apos;][j][&apos;PID.22.3&apos;] = &apos;HL70189&apos;; //PID 22.3 always set to the literal &apos;HL70189&apos;
			j++;
		}

		delete msg[&apos;PID&apos;][&apos;PID.31&apos;];
		
		//PID 32 - repeating in 251 and not exists in 231
		while (msg[&apos;PID&apos;][&apos;PID.32&apos;][0] != null){
			delete msg[&apos;PID&apos;][&apos;PID.32&apos;][0];
		}

		delete msg[&apos;PID&apos;][&apos;PID.33&apos;];
		delete msg[&apos;PID&apos;][&apos;PID.34&apos;];
		delete msg[&apos;PID&apos;][&apos;PID.35&apos;];
		delete msg[&apos;PID&apos;][&apos;PID.36&apos;];
		delete msg[&apos;PID&apos;][&apos;PID.37&apos;];

		//PID 38 - repeating in 251 and not exists in 231
		while (msg[&apos;PID&apos;][&apos;PID.38&apos;][0] != null){
			delete msg[&apos;PID&apos;][&apos;PID.38&apos;][0];
		}

		//PID 39 - repeating in 251 and not exists in 231
		while (msg[&apos;PID&apos;][&apos;PID.39&apos;][0] != null){
			delete msg[&apos;PID&apos;][&apos;PID.39&apos;][0];
		}
	}


	//PD1
	logger.info (&quot;Translating PD1 Segment.&quot;);
	if (msg[&apos;PD1&apos;].length() &gt; 0){
		delete msg[&apos;PD1&apos;][&apos;PD1.13&apos;];

		//PD1 14 - repeating in 251 and not exists in 231		
		while (msg[&apos;PD1&apos;][&apos;PD1.14&apos;][0] != null){
			delete msg[&apos;PD1&apos;][&apos;PD1.14&apos;][0];
		}

		//PD1 15 - repeating in 251 and not exists in 231		
		while (msg[&apos;PD1&apos;][&apos;PD1.15&apos;][0] != null){
			delete msg[&apos;PD1&apos;][&apos;PD1.15&apos;][0];
		}

		delete msg[&apos;PD1&apos;][&apos;PD1.16&apos;];
		delete msg[&apos;PD1&apos;][&apos;PD1.17&apos;];
		delete msg[&apos;PD1&apos;][&apos;PD1.18&apos;];
		delete msg[&apos;PD1&apos;][&apos;PD1.19&apos;];
		delete msg[&apos;PD1&apos;][&apos;PD1.20&apos;];
		delete msg[&apos;PD1&apos;][&apos;PD1.21&apos;];
	}


	//NK1	
	logger.info (&quot;Translating NK1 Segment(s).&quot;);
	i=0;
	while(msg[&apos;NK1&apos;][i] != null) { 
		//NK1.2
		j = 0;
		while ( msg[&apos;NK1&apos;][i][&apos;NK1.2&apos;][j] != null) {
			var nk1_2_1_List = msg[&apos;NK1&apos;][i][&apos;NK1.2&apos;][j][&apos;NK1.2.1&apos;].toString().split(&quot;&amp;&quot;);
			var count = (msg[&apos;NK1&apos;][i][&apos;NK1.2&apos;][j][&apos;NK1.2.1&apos;].toString().split(&quot;&amp;&quot;).length - 1);
			if (count &gt;= 0){
				 msg[&apos;NK1&apos;][i][&apos;NK1.2&apos;][j][&apos;NK1.2.1&apos;] = &apos;&apos;;
 			 	msg[&apos;NK1&apos;][i][&apos;NK1.2&apos;][j][&apos;NK1.2.1&apos;] = nk1_2_1_List[0] ;
	   		}
			j++;
		}
		//NK1.6
		j = 0;
		while ( msg[&apos;NK1&apos;][i][&apos;NK1.6&apos;][j] != null) {
			msg[&apos;NK1&apos;][i][&apos;NK1.6&apos;][j] = &apos;&apos;;
			j++;
		}	
		msg[&apos;NK1&apos;][i][&apos;NK1.7&apos;] = &apos;&apos;;
		msg[&apos;NK1&apos;][i][&apos;NK1.8&apos;] = &apos;&apos;;
		msg[&apos;NK1&apos;][i][&apos;NK1.9&apos;] = &apos;&apos;;
		msg[&apos;NK1&apos;][i][&apos;NK1.10&apos;] = &apos;&apos;;
		msg[&apos;NK1&apos;][i][&apos;NK1.11&apos;] = &apos;&apos;;
		msg[&apos;NK1&apos;][i][&apos;NK1.12&apos;] = &apos;&apos;;

		//NK1.13
		j = 0;
		while ( msg[&apos;NK1&apos;][i][&apos;NK1.13&apos;][j] != null) {
			msg[&apos;NK1&apos;][i][&apos;NK1.13&apos;][j] = &apos;&apos;;
			j++;
		}
		msg[&apos;NK1&apos;][i][&apos;NK1.14&apos;] = &apos;&apos;;
		msg[&apos;NK1&apos;][i][&apos;NK1.15&apos;] = &apos;&apos;;
		msg[&apos;NK1&apos;][i][&apos;NK1.16&apos;] = &apos;&apos;;
		msg[&apos;NK1&apos;][i][&apos;NK1.17&apos;] = &apos;&apos;;
		msg[&apos;NK1&apos;][i][&apos;NK1.18&apos;] = &apos;&apos;;
		msg[&apos;NK1&apos;][i][&apos;NK1.19&apos;] = &apos;&apos;;
		msg[&apos;NK1&apos;][i][&apos;NK1.20&apos;] = &apos;&apos;;
		msg[&apos;NK1&apos;][i][&apos;NK1.21&apos;] = &apos;&apos;;
		msg[&apos;NK1&apos;][i][&apos;NK1.22&apos;] = &apos;&apos;;
		msg[&apos;NK1&apos;][i][&apos;NK1.23&apos;] = &apos;&apos;;
		msg[&apos;NK1&apos;][i][&apos;NK1.24&apos;] = &apos;&apos;;
		msg[&apos;NK1&apos;][i][&apos;NK1.25&apos;] = &apos;&apos;;
		msg[&apos;NK1&apos;][i][&apos;NK1.26&apos;] = &apos;&apos;;
		msg[&apos;NK1&apos;][i][&apos;NK1.27&apos;] = &apos;&apos;;	
		msg[&apos;NK1&apos;][i][&apos;NK1.28&apos;] = &apos;&apos;;
		msg[&apos;NK1&apos;][i][&apos;NK1.29&apos;] = &apos;&apos;;
		msg[&apos;NK1&apos;][i][&apos;NK1.30&apos;] = &apos;&apos;;
		msg[&apos;NK1&apos;][i][&apos;NK1.31&apos;] = &apos;&apos;;
		msg[&apos;NK1&apos;][i][&apos;NK1.32&apos;] = &apos;&apos;;
		msg[&apos;NK1&apos;][i][&apos;NK1.33&apos;] = &apos;&apos;;
		msg[&apos;NK1&apos;][i][&apos;NK1.34&apos;] = &apos;&apos;;
		msg[&apos;NK1&apos;][i][&apos;NK1.35&apos;] = &apos;&apos;;
		msg[&apos;NK1&apos;][i][&apos;NK1.36&apos;] = &apos;&apos;;
		msg[&apos;NK1&apos;][i][&apos;NK1.37&apos;] = &apos;&apos;;	
		delete msg[&apos;NK1&apos;][&apos;NK1.38&apos;];
		delete msg[&apos;NK1&apos;][&apos;NK1.39&apos;];
		i++; 
	}


	//OBR
	logger.info (&quot;Translating OBR Segment(s).&quot;);
	i=0;
	while(msg[&apos;OBR&apos;][i] != null) { 
		
		if (i == 0) {
			// Moving SPM data to the first OBR 
			//OBR 2 (SPM 2.1 =&gt; OBR 2)
			var spm_2_1_List = msg[&apos;SPM&apos;][&apos;SPM.2&apos;][&apos;SPM.2.1&apos;].toString().split(&quot;&amp;&quot;);
			var count = (msg[&apos;SPM&apos;][&apos;SPM.2&apos;][&apos;SPM.2.1&apos;].toString().split(&quot;&amp;&quot;).length - 1);
		    if (count &gt;= 0){
			  msg[&apos;OBR&apos;][i][&apos;OBR.2&apos;][&apos;OBR.2.1&apos;] = spm_2_1_List[0] ; // OBR.15.1.1
			}
			if (count &gt;= 1){
			  msg[&apos;OBR&apos;][i][&apos;OBR.2&apos;][&apos;OBR.2.2&apos;] = spm_2_1_List[1]; // OBR.15.1.2
			}
			if (count &gt;= 2){
    		  msg[&apos;OBR&apos;][i][&apos;OBR.2&apos;][&apos;OBR.2.3&apos;] = spm_2_1_List[2]; // OBR.15.1.3
			}
			if (count &gt;= 3){
	    	  msg[&apos;OBR&apos;][i][&apos;OBR.2&apos;][&apos;OBR.2.4&apos;] = spm_2_1_List[3]; // OBR.15.1.1
			}

			//OBR 3 (SPM 2.2 =&gt; OBR 3)
			var spm_2_2_List = msg[&apos;SPM&apos;][&apos;SPM.2&apos;][&apos;SPM.2.2&apos;].toString().split(&quot;&amp;&quot;);
			var count = (msg[&apos;SPM&apos;][&apos;SPM.2&apos;][&apos;SPM.2.2&apos;].toString().split(&quot;&amp;&quot;).length - 1);
    		if (count &gt;= 0){
			  msg[&apos;OBR&apos;][i][&apos;OBR.3&apos;][&apos;OBR.3.1&apos;] = spm_2_2_List[0] ;
			}
			if (count &gt;= 1){
			  msg[&apos;OBR&apos;][i][&apos;OBR.3&apos;][&apos;OBR.3.2&apos;] = spm_2_2_List[1]; 
			}
			if (count &gt;= 2){
	    	  msg[&apos;OBR&apos;][i][&apos;OBR.3&apos;][&apos;OBR.3.3&apos;] = spm_2_2_List[2]; 
			}
			if (count &gt;= 3){
    		  msg[&apos;OBR&apos;][i][&apos;OBR.3&apos;][&apos;OBR.3.4&apos;] = spm_2_2_List[3]; 
			}
		}
		

		msg[&apos;OBR&apos;][i][&apos;OBR.5&apos;] = &apos;&apos;;
		msg[&apos;OBR&apos;][i][&apos;OBR.6&apos;] = &apos;&apos;;

		if (i == 0) {
			// Moving SPM data to the first OBR 
			//OBR 9.1 (SPM 12.1 =&gt; OBR 9.1)
			msg[&apos;OBR&apos;][i][&apos;OBR.9&apos;][&apos;OBR.9.1&apos;] = msg[&apos;SPM&apos;][&apos;SPM.12&apos;][&apos;SPM.12.1&apos;].toString();

			//OBR 9.2 (SPM 12.2 =&gt; OBR 9.2)
			msg[&apos;OBR&apos;][i][&apos;OBR.9&apos;][&apos;OBR.9.2&apos;] = msg[&apos;SPM&apos;][&apos;SPM.12&apos;][&apos;SPM.12.2&apos;].toString();			
		}
	
		msg[&apos;OBR&apos;][i][&apos;OBR.11&apos;] = &apos;&apos;;
		msg[&apos;OBR&apos;][i][&apos;OBR.12&apos;] = &apos;&apos;;
	
		if (i == 0) {
			// Moving SPM data to the first OBR 
			//OBR 14 (SPM 18.1 =&gt; OBR 14.1)
			msg[&apos;OBR&apos;][i][&apos;OBR.14&apos;][&apos;OBR.14.1&apos;] = msg[&apos;SPM&apos;][&apos;SPM.18&apos;][&apos;SPM.18.1&apos;].toString();
	
			//OBR 15.1 (SPM 4 =&gt; OBR 15.1)
			msg[&apos;OBR&apos;][i][&apos;OBR.15&apos;][&apos;OBR.15.1&apos;] = msg[&apos;SPM&apos;][&apos;SPM.4&apos;][&apos;SPM.4.1&apos;].toString() + &quot;&amp;&quot; +
                                     msg[&apos;SPM&apos;][&apos;SPM.4&apos;][&apos;SPM.4.2&apos;].toString() + &quot;&amp;&quot; +
                                     msg[&apos;SPM&apos;][&apos;SPM.4&apos;][&apos;SPM.4.3&apos;].toString() + &quot;&amp;&quot; +
                                     msg[&apos;SPM&apos;][&apos;SPM.4&apos;][&apos;SPM.4.4&apos;].toString()+ &quot;&amp;&quot; +
                                     msg[&apos;SPM&apos;][&apos;SPM.4&apos;][&apos;SPM.4.5&apos;].toString() + &quot;&amp;&quot; +
                                     msg[&apos;SPM&apos;][&apos;SPM.4&apos;][&apos;SPM.4.6&apos;].toString();

			//OBR 15.2 (SPM 6.2 =&gt; OBR 15.2)
			if (msg[&apos;SPM&apos;][&apos;SPM.6&apos;].length() &gt; 0){
				msg[&apos;OBR&apos;][i][&apos;OBR.15&apos;][&apos;OBR.15.2&apos;] = msg[&apos;SPM&apos;][&apos;SPM.6&apos;][0][&apos;SPM.6.2&apos;].toString();
			}

			//OBR 15.3 (SPM 14 =&gt; OBR 15.3)
			if (msg[&apos;SPM&apos;][&apos;SPM.14&apos;].length() &gt; 0){
				msg[&apos;OBR&apos;][i][&apos;OBR.15&apos;][&apos;OBR.15.3&apos;] = msg[&apos;SPM&apos;][&apos;SPM.14&apos;][0][&apos;SPM.14.1&apos;].toString();
			}

			//OBR 15.4 (SPM 8 =&gt; OBR 15.4)
			msg[&apos;OBR&apos;][i][&apos;OBR.15&apos;][&apos;OBR.15.4&apos;] = msg[&apos;SPM&apos;][&apos;SPM.8&apos;][&apos;SPM.8.1&apos;].toString() + &quot;&amp;&quot; +
                                     msg[&apos;SPM&apos;][&apos;SPM.8&apos;][&apos;SPM.8.2&apos;].toString() + &quot;&amp;&quot; +
                                     msg[&apos;SPM&apos;][&apos;SPM.8&apos;][&apos;SPM.8.3&apos;].toString() + &quot;&amp;&quot; +
                                     msg[&apos;SPM&apos;][&apos;SPM.8&apos;][&apos;SPM.8.4&apos;].toString()+ &quot;&amp;&quot; +
                                     msg[&apos;SPM&apos;][&apos;SPM.8&apos;][&apos;SPM.8.5&apos;].toString() + &quot;&amp;&quot; +
                                     msg[&apos;SPM&apos;][&apos;SPM.8&apos;][&apos;SPM.8.6&apos;].toString();

			//OBR 15.5 (SPM 9 =&gt; OBR 15.5) 
			if (msg[&apos;SPM&apos;][&apos;SPM.9&apos;].length() &gt; 0){
				msg[&apos;OBR&apos;][i][&apos;OBR.15&apos;][&apos;OBR.15.5&apos;] = msg[&apos;SPM&apos;][&apos;SPM.9&apos;][0][&apos;SPM.9.1&apos;].toString() + &quot;&amp;&quot; +
                                     msg[&apos;SPM&apos;][&apos;SPM.9&apos;][0][&apos;SPM.9.2&apos;].toString() + &quot;&amp;&quot; +
                                     msg[&apos;SPM&apos;][&apos;SPM.9&apos;][0][&apos;SPM.9.3&apos;].toString() + &quot;&amp;&quot; +
                                     msg[&apos;SPM&apos;][&apos;SPM.9&apos;][0][&apos;SPM.9.4&apos;].toString()+ &quot;&amp;&quot; +
                                     msg[&apos;SPM&apos;][&apos;SPM.9&apos;][0][&apos;SPM.9.5&apos;].toString() + &quot;&amp;&quot; +
                                     msg[&apos;SPM&apos;][&apos;SPM.9&apos;][0][&apos;SPM.9.6&apos;].toString();
			}

			//OBR 15.6 (SPM 7 =&gt; OBR 15.6)			
			msg[&apos;OBR&apos;][i][&apos;OBR.15&apos;][&apos;OBR.15.6&apos;] = msg[&apos;SPM&apos;][&apos;SPM.7&apos;][&apos;SPM.7.1&apos;].toString() + &quot;&amp;&quot; +
                                     msg[&apos;SPM&apos;][&apos;SPM.7&apos;][&apos;SPM.7.2&apos;].toString() + &quot;&amp;&quot; +
                                     msg[&apos;SPM&apos;][&apos;SPM.7&apos;][&apos;SPM.7.3&apos;].toString() + &quot;&amp;&quot; +
                                     msg[&apos;SPM&apos;][&apos;SPM.7&apos;][&apos;SPM.7.4&apos;].toString()+ &quot;&amp;&quot; +
                                     msg[&apos;SPM&apos;][&apos;SPM.7&apos;][&apos;SPM.7.5&apos;].toString() + &quot;&amp;&quot; +
                                     msg[&apos;SPM&apos;][&apos;SPM.7&apos;][&apos;SPM.7.6&apos;].toString();
		
		}

		msg[&apos;OBR&apos;][i][&apos;OBR.18&apos;] = &apos;&apos;;
		msg[&apos;OBR&apos;][i][&apos;OBR.19&apos;] = &apos;&apos;;
		msg[&apos;OBR&apos;][i][&apos;OBR.20&apos;] = &apos;&apos;;
		msg[&apos;OBR&apos;][i][&apos;OBR.21&apos;] = &apos;&apos;;
		msg[&apos;OBR&apos;][i][&apos;OBR.23&apos;] = &apos;&apos;;
		msg[&apos;OBR&apos;][i][&apos;OBR.24&apos;] = &apos;&apos;;
		msg[&apos;OBR&apos;][i][&apos;OBR.27&apos;] = &apos;&apos;;

		//OBR 28 - Infinitely repeating in 251 and only 5 repetitions allowed in 2.3.1
		while (msg[&apos;OBR&apos;][i][&apos;OBR.28&apos;][5] != null){
			delete msg[&apos;OBR&apos;][i][&apos;OBR.28&apos;][5];
		}

		if (i ==0) {
			// Moving SPM data to the first OBR
			//OBR 29 (SPM 3 =&gt; OBR 29)
			if (msg[&apos;SPM&apos;][&apos;SPM.3&apos;].length() &gt; 0){
				msg[&apos;OBR&apos;][i][&apos;OBR.29&apos;] = msg[&apos;SPM&apos;][&apos;SPM.3&apos;][0][&apos;SPM.3.1&apos;].toString() + &quot;^&quot; + msg[&apos;SPM&apos;][&apos;SPM.3&apos;][0][&apos;SPM.3.2&apos;].toString();			
			}
		}
		
		msg[&apos;OBR&apos;][i][&apos;OBR.30&apos;]= &apos;&apos;;
		msg[&apos;OBR&apos;][i][&apos;OBR.36&apos;] = &apos;&apos;;

		if (i == 0){
			// Moving SPM data to the first OBR
			//OBR 37 (SPM 26 =&gt; OBR 37)
			msg[&apos;OBR&apos;][i][&apos;OBR.37&apos;][&apos;OBR.37.1&apos;] = msg[&apos;SPM&apos;][&apos;SPM.26&apos;][&apos;SPM.26.1&apos;].toString();
		}
	
		msg[&apos;OBR&apos;][i][&apos;OBR.38&apos;] = &apos;&apos;;
		msg[&apos;OBR&apos;][i][&apos;OBR.39&apos;] = &apos;&apos;;
		msg[&apos;OBR&apos;][i][&apos;OBR.40&apos;] = &apos;&apos;;
		msg[&apos;OBR&apos;][i][&apos;OBR.41&apos;] = &apos;&apos;;
		msg[&apos;OBR&apos;][i][&apos;OBR.42&apos;] = &apos;&apos;;
		msg[&apos;OBR&apos;][i][&apos;OBR.43&apos;] = &apos;&apos;;
		msg[&apos;OBR&apos;][i][&apos;OBR.44&apos;] = &apos;&apos;;
		msg[&apos;OBR&apos;][i][&apos;OBR.45&apos;] = &apos;&apos;;

		//OBR - 46 - repeating in 251 and not exists in 231		
		while (msg[&apos;OBR&apos;][i][&apos;OBR.46&apos;][0] != null){
			delete msg[&apos;OBR&apos;][i][&apos;OBR.46&apos;][0];
		}
		
		//OBR - 47 - repeating in 251 and not exists in 231		
		while (msg[&apos;OBR&apos;][i][&apos;OBR.47&apos;][0] != null){
			delete msg[&apos;OBR&apos;][i][&apos;OBR.47&apos;][0];
		}

		delete msg[&apos;OBR&apos;][i][&apos;OBR.48&apos;];
		delete msg[&apos;OBR&apos;][i][&apos;OBR.49&apos;];
		delete msg[&apos;OBR&apos;][i][&apos;OBR.50&apos;];

		i++;
	}


	//ORC	
	logger.info (&quot;Translating ORC Segment.&quot;);
	if (msg[&apos;ORC&apos;].length() &gt; 0){
		msg[&apos;ORC&apos;][&apos;ORC.1&apos;] = &apos;&apos;;
		msg[&apos;ORC&apos;][&apos;ORC.2&apos;] = &apos;&apos;;
		msg[&apos;ORC&apos;][&apos;ORC.3&apos;] = &apos;&apos;;
		msg[&apos;ORC&apos;][&apos;ORC.4&apos;] = &apos;&apos;;
		msg[&apos;ORC&apos;][&apos;ORC.5&apos;] = &apos;&apos;;
		msg[&apos;ORC&apos;][&apos;ORC.6&apos;] = &apos;&apos;;
		msg[&apos;ORC&apos;][&apos;ORC.7&apos;] = &apos;&apos;;
		msg[&apos;ORC&apos;][&apos;ORC.8&apos;] = &apos;&apos;;
		msg[&apos;ORC&apos;][&apos;ORC.9&apos;] = &apos;&apos;;
		msg[&apos;ORC&apos;][&apos;ORC.10&apos;] = &apos;&apos;;
		msg[&apos;ORC&apos;][&apos;ORC.11&apos;] = &apos;&apos;;
		msg[&apos;ORC&apos;][&apos;ORC.12&apos;] = &apos;&apos;;
		msg[&apos;ORC&apos;][&apos;ORC.13&apos;] = &apos;&apos;;

		//ORC 14 - Infinitely repeating in 251 and only 2 repetitions allowed in 2.3.1
		while (msg[&apos;ORC&apos;][&apos;ORC.14&apos;][2] != null){
			delete msg[&apos;ORC&apos;][&apos;ORC.14&apos;][2];
		}

		msg[&apos;ORC&apos;][&apos;ORC.14&apos;] = &apos;&apos;;
		msg[&apos;ORC&apos;][&apos;ORC.15&apos;] = &apos;&apos;;
		msg[&apos;ORC&apos;][&apos;ORC.16&apos;] = &apos;&apos;;
		msg[&apos;ORC&apos;][&apos;ORC.17&apos;] = &apos;&apos;;
		msg[&apos;ORC&apos;][&apos;ORC.18&apos;] = &apos;&apos;;
		msg[&apos;ORC&apos;][&apos;ORC.19&apos;] = &apos;&apos;;
		msg[&apos;ORC&apos;][&apos;ORC.20&apos;] = &apos;&apos;;
		delete msg[&apos;ORC&apos;][&apos;ORC.25&apos;];
		delete msg[&apos;ORC&apos;][&apos;ORC.26&apos;];
		delete msg[&apos;ORC&apos;][&apos;ORC.27&apos;];
		delete msg[&apos;ORC&apos;][&apos;ORC.28&apos;];
		delete msg[&apos;ORC&apos;][&apos;ORC.29&apos;];
		delete msg[&apos;ORC&apos;][&apos;ORC.30&apos;];
		delete msg[&apos;ORC&apos;][&apos;ORC.31&apos;];
	}

	//OBX
	logger.info (&quot;Translating OBX Segment(s).&quot;);
	var nteCount = -1; //Count to keep track of the last NTE segment accessed or added.
	var countNewNTESeg = 0; // count to keep track of the new NTE segments added
	var currCountForSpmObx = 0;// count to keep track of the current set id.
	var ntePosForSpmObx = 0; //to determine the right position to place the NTEs (the ones created for the SPM related OBXs)
	i=0;
	while(msg[&apos;OBX&apos;][i] != null) 
    { 	
		if (spmRelatedFirstObx == -1 || (i &lt; spmRelatedFirstObx || i &gt; spmRelatedLastObx )){
			
			var obx_2_1 = msg[&apos;OBX&apos;][i][&apos;OBX.2&apos;][&apos;OBX.2.1&apos;].toString();	
			if (!(obx_2_1 == &quot;SN&quot; || obx_2_1 == &quot;TX&quot; || obx_2_1 == &quot;CE&quot; || obx_2_1 == &quot;TS&quot; )){//No need to map if it already has a 231 value
				msg[&apos;OBX&apos;][i][&apos;OBX.2&apos;][&apos;OBX.2.1&apos;] = $(&apos;translationMap&apos;).get_2_3_1Code(obx_2_1);
			}

			//OBX 5
			j=0;
			while (msg[&apos;OBX&apos;][i][&apos;OBX.5&apos;][j]!= null){
				var obx_5_1 = msg[&apos;OBX&apos;][i][&apos;OBX.5&apos;][j][&apos;OBX.5.1&apos;].toString();
				obx_5_1 = String(obx_5_1);
				if (obx_2_1 == &apos;NM&apos;) {//Handling NM component
					if (obx_5_1) {
						msg[&apos;OBX&apos;][i][&apos;OBX.5&apos;][j][&apos;OBX.5.1&apos;] = &quot;^&quot; + obx_5_1;
					}
				}
				if (obx_2_1 == &apos;CWE&apos;){//Handling CWE component
					delete msg[&apos;OBX&apos;][i][&apos;OBX.5&apos;][j][&apos;OBX.5.7&apos;];
					delete msg[&apos;OBX&apos;][i][&apos;OBX.5&apos;][j][&apos;OBX.5.8&apos;];
					delete msg[&apos;OBX&apos;][i][&apos;OBX.5&apos;][j][&apos;OBX.5.9&apos;];
					delete msg[&apos;OBX&apos;][i][&apos;OBX.5&apos;][j][&apos;OBX.5.10&apos;];
					delete msg[&apos;OBX&apos;][i][&apos;OBX.5&apos;][j][&apos;OBX.5.11&apos;];
					delete msg[&apos;OBX&apos;][i][&apos;OBX.5&apos;][j][&apos;OBX.5.12&apos;];
					delete msg[&apos;OBX&apos;][i][&apos;OBX.5&apos;][j][&apos;OBX.5.13&apos;];
					delete msg[&apos;OBX&apos;][i][&apos;OBX.5&apos;][j][&apos;OBX.5.14&apos;];
					delete msg[&apos;OBX&apos;][i][&apos;OBX.5&apos;][j][&apos;OBX.5.15&apos;];
					delete msg[&apos;OBX&apos;][i][&apos;OBX.5&apos;][j][&apos;OBX.5.16&apos;];
				}
				j++;
			}
		
			//OBX 8
			j=0;
			while (msg[&apos;OBX&apos;][i][&apos;OBX.8&apos;][j]!= null){
				if ( j&lt; 5 ) {
					var obx_8 = msg[&apos;OBX&apos;][i][&apos;OBX.8&apos;][j].toString();
					if (obx_8.contains(&quot;HL70078&quot;))
					{
						var obx_8_1 = msg[&apos;OBX&apos;][i][&apos;OBX.8&apos;][j][&apos;OBX.8.1&apos;].toString();
						msg[&apos;OBX&apos;][i][&apos;OBX.8&apos;][j] = &apos;&apos;;
						msg[&apos;OBX&apos;][i][&apos;OBX.8&apos;][j][&apos;OBX.8.1&apos;] = obx_8_1;
					}
					else
					{
						var obx_8_9 = msg[&apos;OBX&apos;][i][&apos;OBX.8&apos;][j][&apos;OBX.8.9&apos;].toString();
						msg[&apos;OBX&apos;][i][&apos;OBX.8&apos;][j] = &apos;&apos;;
						msg[&apos;OBX&apos;][i][&apos;OBX.8&apos;][j][&apos;OBX.8.1&apos;] = obx_8_9;
					}
				}else{
						//OBX 8 - Infinitely repeating in 251 and only 5 repetitions allowed in 2.3.1
						delete msg[&apos;OBX&apos;][i][&apos;OBX.8&apos;][j];
				}
				j++;
			}

			msg[&apos;OBX&apos;][i][&apos;OBX.14&apos;][&apos;OBX.14.1&apos;] = msg[&apos;OBX&apos;][i][&apos;OBX.19&apos;][&apos;OBX.19.1&apos;].toString();
		
			//OBX 15.1 &amp; 15.2
			msg[&apos;OBX&apos;][i][&apos;OBX.15&apos;][&apos;OBX.15.1&apos;] = msg[&apos;OBX&apos;][i][&apos;OBX.23&apos;][&apos;OBX.23.10&apos;].toString();
			msg[&apos;OBX&apos;][i][&apos;OBX.15&apos;][&apos;OBX.15.2&apos;] = msg[&apos;OBX&apos;][i][&apos;OBX.23&apos;][&apos;OBX.23.1&apos;].toString();
			msg[&apos;OBX&apos;][i][&apos;OBX.15&apos;][&apos;OBX.15.3&apos;] = msg[&apos;OBX&apos;][i][&apos;OBX.23&apos;][&apos;OBX.23.6&apos;].toString();
 
			//OBX - 18 - repeating in 251 and not exists in 231		
			while (msg[&apos;OBX&apos;][i][&apos;OBX.18&apos;][0] != null){
				delete msg[&apos;OBX&apos;][i][&apos;OBX.18&apos;][0];
			}

			delete msg[&apos;OBX&apos;][i][&apos;OBX.19&apos;];
			delete msg[&apos;OBX&apos;][i][&apos;OBX.20&apos;];
			delete msg[&apos;OBX&apos;][i][&apos;OBX.21&apos;];
			delete msg[&apos;OBX&apos;][i][&apos;OBX.22&apos;];
			delete msg[&apos;OBX&apos;][i][&apos;OBX.23&apos;];

			var currCount = 0;
			// determine the number id of the next NTE to be added
			if (obx_array[i].nextNteSegId &gt; 0){
				nteCount = obx_array[i].nextNteSegId -1 + countNewNTESeg;
			}else if (countNewNTESeg &gt; 0){
				nteCount = countNewNTESeg -1;
			}
			//logger.info (&quot;    nteCount :&quot;+nteCount);

			if (msg[&apos;OBX&apos;][i][&apos;OBX.24&apos;][&apos;OBX.24.1&apos;].toString()!=&apos;&apos;){

				var newNTE = &apos;&apos;;
				newNTE = createSegment(&apos;NTE&apos;);

			    // workaround to put the new segment after the existing NTE, if another exists, otherwise after MSH
		    	if (obx_array[i].lastNteSeg == -1)
    			{
	    	  		msg[&apos;OBX&apos;][i] += newNTE;
    			}
		    	else
    			{
	    	  		msg[&apos;NTE&apos;][nteCount] += newNTE;
    			}
				nteCount ++;

				//Determine the last NTE segment id under the current OBX
				if (obx_array[i].lastNteSeg != -1 &amp;&amp; nteCount &gt; 0 ){
					var id = nteCount - 1;
					currCount = msg[&apos;NTE&apos;][id][&apos;NTE.1&apos;][&apos;NTE.1.1&apos;].toString();
				} 
				currCount++;

				var obx_24_1_List = msg[&apos;OBX&apos;][i][&apos;OBX.24&apos;][&apos;OBX.24.1&apos;].toString().split(&quot;&amp;&quot;);
				var count = (msg[&apos;OBX&apos;][i][&apos;OBX.24&apos;][&apos;OBX.24.1&apos;].toString().split(&quot;&amp;&quot;).length - 1);
				var obx_24_1_1 = &apos;&apos;;
			    if (count &gt;= 0){
				  obx_24_1_1 = obx_24_1_List[0] ; // OBR.15.1.1
				}

				msg[&apos;NTE&apos;][nteCount][&apos;NTE.1&apos;] = currCount;
		    	msg[&apos;NTE&apos;][nteCount][&apos;NTE.2&apos;] = &quot;L&quot;;
				msg[&apos;NTE&apos;][nteCount][&apos;NTE.3&apos;] = &quot;Performing Lab Address: &quot; + obx_24_1_1 + &quot;, &quot; + msg[&apos;OBX&apos;][i][&apos;OBX.24&apos;][&apos;OBX.24.3&apos;].toString() + &quot;, &quot; +
				msg[&apos;OBX&apos;][i][&apos;OBX.24&apos;][&apos;OBX.24.4&apos;].toString() + &quot;  &quot; + msg[&apos;OBX&apos;][i][&apos;OBX.24&apos;][&apos;OBX.24.5&apos;].toString();

				logger.info (&quot;    Adding NTE for msg[&apos;OBX&apos;][&quot;+i+&quot;][&apos;OBX.24&apos;] - msg[&apos;NTE&apos;][&quot;+nteCount+&quot;] :&quot;+msg[&apos;NTE&apos;][nteCount]);	
				
				countNewNTESeg++;
			}

			if (msg[&apos;OBX&apos;][i][&apos;OBX.25&apos;][&apos;OBX.25.1&apos;].toString()!=&apos;&apos;){
	
				var newNTE = &apos;&apos;;
				newNTE = createSegment(&apos;NTE&apos;);

		    	// workaround to put the new segment after the existing NTE, if another exists, otherwise after MSH
		    	if (obx_array[i].lastNteSeg == -1 &amp;&amp; currCount == 0)
    			{
	    	  		msg[&apos;OBX&apos;][i] += newNTE;
    			}
		    	else
    			{
	    	  		msg[&apos;NTE&apos;][nteCount] += newNTE;
    			}
				nteCount ++;

				//Determine the last NTE segment id under the current OBX
				if (obx_array[i].lastNteSeg != -1 &amp;&amp; currCount == 0 &amp;&amp; nteCount &gt; 0 ){
					var id = nteCount - 1;
					currCount = msg[&apos;NTE&apos;][id][&apos;NTE.1&apos;][&apos;NTE.1.1&apos;].toString();
				} 
				currCount++;

				var obx_25_2_List = msg[&apos;OBX&apos;][i][&apos;OBX.25&apos;][&apos;OBX.25.2&apos;].toString().split(&quot;&amp;&quot;);
				var count = (msg[&apos;OBX&apos;][i][&apos;OBX.25&apos;][&apos;OBX.25.2&apos;].toString().split(&quot;&amp;&quot;).length - 1);
				var obx_25_2_1 = &apos;&apos;;
			    if (count &gt;= 0){
				  obx_25_2_1 = obx_25_2_List[0] ; // OBR.15.1.1
				}

				msg[&apos;NTE&apos;][nteCount][&apos;NTE.1&apos;] = currCount;
		    	msg[&apos;NTE&apos;][nteCount][&apos;NTE.2&apos;] = &quot;L&quot;;
				msg[&apos;NTE&apos;][nteCount][&apos;NTE.3&apos;] = &quot;Performing Lab Medical Director: &quot; + obx_25_2_1 + &quot;, &quot; +
				msg[&apos;OBX&apos;][i][&apos;OBX.25&apos;][&apos;OBX.25.3&apos;].toString() + &quot; &quot; + msg[&apos;OBX&apos;][i][&apos;OBX.25&apos;][&apos;OBX.25.4&apos;].toString();

				logger.info (&quot;    Adding NTE for msg[&apos;OBX&apos;][&quot;+i+&quot;][&apos;OBX.25&apos;] - msg[&apos;NTE&apos;][&quot;+nteCount+&quot;] :&quot;+msg[&apos;NTE&apos;][nteCount]);	
				countNewNTESeg++;
			}

			//Determining the next NTE position under the first OBX segment which is to be used by the OBX following SPM
			if (i == 0 &amp;&amp; spmRelatedFirstObx != -1){

				if (obx_array[0].nextNteSegId &gt; 0){
					ntePosForSpmObx = obx_array[i].nextNteSegId + countNewNTESeg;
				}else if (countNewNTESeg &gt; 0){
					ntePosForSpmObx = countNewNTESeg;
				}
				currCountForSpmObx = currCount + 1;
				//logger.info (&quot;    ntePosForSpmObx :&quot;+ntePosForSpmObx);

			}
	
			delete msg[&apos;OBX&apos;][i][&apos;OBX.24&apos;];
			delete msg[&apos;OBX&apos;][i][&apos;OBX.25&apos;];
		
		// End of processing of all the OBXS before SPM

		}
		else{ //Processing of OBXs following SPM
			
			//Create an NTE for the OBX following SPM and add it under the first OBX NTEs
			
			var newNTE = &apos;&apos;;
			newNTE = createSegment(&apos;NTE&apos;);
			var lastNteId = ntePosForSpmObx - 1;		

		    // workaround to put the new segment after the existing NTE, if another exists, otherwise immediately after the first OBX
	    	if (lastNteId == -1)
    		{
	    		msg[&apos;OBX&apos;][0] += newNTE;
    		}
	    	else
   			{
    	  		msg[&apos;NTE&apos;][lastNteId] += newNTE;
   			}

			var spm_obx_3_value = msg[&apos;OBX&apos;][i][&apos;OBX.3&apos;][&apos;OBX.3.1&apos;].toString() + &quot; &quot; + msg[&apos;OBX&apos;][i][&apos;OBX.3&apos;][&apos;OBX.3.2&apos;].toString() + &quot; &quot; + msg[&apos;OBX&apos;][i][&apos;OBX.3&apos;][&apos;OBX.3.3&apos;].toString() + &quot; &quot; + msg[&apos;OBX&apos;][i][&apos;OBX.3&apos;][&apos;OBX.3.4&apos;].toString() + &quot; &quot; + msg[&apos;OBX&apos;][i][&apos;OBX.3&apos;][&apos;OBX.3.5&apos;].toString() + &quot; &quot; + msg[&apos;OBX&apos;][i][&apos;OBX.3&apos;][&apos;OBX.3.6&apos;].toString() + &quot; &quot; + msg[&apos;OBX&apos;][i][&apos;OBX.3&apos;][&apos;OBX.3.7&apos;].toString() + &quot; &quot; + msg[&apos;OBX&apos;][i][&apos;OBX.3&apos;][&apos;OBX.3.8&apos;].toString() + &quot; &quot; + msg[&apos;OBX&apos;][i][&apos;OBX.3&apos;][&apos;OBX.3.9&apos;].toString() + &quot; &quot; + msg[&apos;OBX&apos;][i][&apos;OBX.3&apos;][&apos;OBX.3.10&apos;].toString() + &quot; &quot; + msg[&apos;OBX&apos;][i][&apos;OBX.3&apos;][&apos;OBX.3.11&apos;].toString() + &quot; &quot; + msg[&apos;OBX&apos;][i][&apos;OBX.3&apos;][&apos;OBX.3.12&apos;].toString() + &quot; &quot; + msg[&apos;OBX&apos;][i][&apos;OBX.3&apos;][&apos;OBX.3.13&apos;].toString() + &quot; &quot; + msg[&apos;OBX&apos;][i][&apos;OBX.3&apos;][&apos;OBX.3.14&apos;].toString();
			var spm_obx_5_value = msg[&apos;OBX&apos;][i][&apos;OBX.5&apos;][&apos;OBX.5.1&apos;].toString() + &quot; &quot; + msg[&apos;OBX&apos;][i][&apos;OBX.5&apos;][&apos;OBX.5.2&apos;].toString() + &quot; &quot; + msg[&apos;OBX&apos;][i][&apos;OBX.5&apos;][&apos;OBX.5.3&apos;].toString() + &quot; &quot; + msg[&apos;OBX&apos;][i][&apos;OBX.5&apos;][&apos;OBX.5.4&apos;].toString() + &quot; &quot; + msg[&apos;OBX&apos;][i][&apos;OBX.5&apos;][&apos;OBX.5.5&apos;].toString() + &quot; &quot; + msg[&apos;OBX&apos;][i][&apos;OBX.5&apos;][&apos;OBX.5.6&apos;].toString() + &quot; &quot; + msg[&apos;OBX&apos;][i][&apos;OBX.5&apos;][&apos;OBX.5.7&apos;].toString() + &quot; &quot; + msg[&apos;OBX&apos;][i][&apos;OBX.5&apos;][&apos;OBX.5.8&apos;].toString() + &quot; &quot; + msg[&apos;OBX&apos;][i][&apos;OBX.5&apos;][&apos;OBX.5.9&apos;].toString() + &quot; &quot; + msg[&apos;OBX&apos;][i][&apos;OBX.5&apos;][&apos;OBX.5.10&apos;].toString() + &quot; &quot; + msg[&apos;OBX&apos;][i][&apos;OBX.5&apos;][&apos;OBX.5.11&apos;].toString() + &quot; &quot; + msg[&apos;OBX&apos;][i][&apos;OBX.5&apos;][&apos;OBX.5.12&apos;].toString() + &quot; &quot; + msg[&apos;OBX&apos;][i][&apos;OBX.5&apos;][&apos;OBX.5.13&apos;].toString() + &quot; &quot; + msg[&apos;OBX&apos;][i][&apos;OBX.5&apos;][&apos;OBX.5.14&apos;].toString();

			spm_obx_3_value = spm_obx_3_value.trim();
			spm_obx_5_value = spm_obx_5_value.trim();		
			
			msg[&apos;NTE&apos;][ntePosForSpmObx][&apos;NTE.1&apos;] = currCountForSpmObx;
	    	msg[&apos;NTE&apos;][ntePosForSpmObx][&apos;NTE.2&apos;] = &quot;C&quot;;
			msg[&apos;NTE&apos;][ntePosForSpmObx][&apos;NTE.3&apos;] = &quot;Observation Identifier: &quot; + spm_obx_3_value + &quot;; Observation Value: &quot; + spm_obx_5_value;
			

			logger.info (&quot;    Adding NTE for the SPM OBX (msg[&apos;OBX&apos;][&quot;+i+&quot;])  - msg[&apos;NTE&apos;][&quot;+ntePosForSpmObx+&quot;] :&quot;+msg[&apos;NTE&apos;][ntePosForSpmObx]);		
			
			ntePosForSpmObx++;
			currCountForSpmObx++;
		}
	
		i++;
	}	

	//PV1
	logger.info (&quot;Translating PV1 Segment.&quot;);
	if (msg[&apos;PV1&apos;].length() &gt; 0){
		msg[&apos;PV1&apos;][&apos;PV1.1&apos;][&apos;PV1.1.1&apos;] = &apos;1&apos;;
		
		//PV1-45 is repeating in 251 and not so in 231. Hence, deleting all the repetitions except the first one.
		while (msg[&apos;PV1&apos;][&apos;PV1.45&apos;][1] != null){
			delete msg[&apos;PV1&apos;][&apos;PV1.45&apos;][1];
		}
	}

	//PV2
	logger.info (&quot;Translating PV2 Segment.&quot;);
	if (msg[&apos;PV2&apos;].length() &gt; 0){
		delete msg[&apos;PV2&apos;][&apos;PV2.38&apos;];
		
		//PV2 39 - repeating in 251 and not exists in 231		
		while (msg[&apos;PV2&apos;][&apos;PV2.39&apos;][0] != null){
			delete msg[&apos;PV2&apos;][&apos;PV2.39&apos;][0];
		}

		delete msg[&apos;PV2&apos;][&apos;PV2.40&apos;];

		//PV2 41 - repeating in 251 and not exists in 231		
		while (msg[&apos;PV2&apos;][&apos;PV2.41&apos;][0] != null){
			delete msg[&apos;PV2&apos;][&apos;PV2.41&apos;][0];
		}

		delete msg[&apos;PV2&apos;][&apos;PV2.42&apos;];
		delete msg[&apos;PV2&apos;][&apos;PV2.43&apos;];
		delete msg[&apos;PV2&apos;][&apos;PV2.44&apos;];

		//PV2 45 - repeating in 251 and not exists in 231		
		while (msg[&apos;PV2&apos;][&apos;PV2.45&apos;][0] != null){
			delete msg[&apos;PV2&apos;][&apos;PV2.45&apos;][0];
		}

		delete msg[&apos;PV2&apos;][&apos;PV2.46&apos;];
		delete msg[&apos;PV2&apos;][&apos;PV2.47&apos;];
		delete msg[&apos;PV2&apos;][&apos;PV2.48&apos;];

		//PV2 49 - repeating in 251 and not exists in 231		
		while (msg[&apos;PV2&apos;][&apos;PV2.49&apos;][0] != null){
			delete msg[&apos;PV2&apos;][&apos;PV2.49&apos;][0];
		}

	}

	//Delete Segments that are not supported in 2.3.1
	if (msg[&apos;SFT&apos;].length() &gt; 0){
		logger.info (&quot;Deleting SFT Segment.&quot;);
		delete msg[&apos;SFT&apos;];
	}
	if (msg[&apos;SPM&apos;].length() &gt; 0){
		logger.info (&quot;Deleting SPM Segment.&quot;);
		delete msg[&apos;SPM&apos;];
	}
	if (msg[&apos;TQ1&apos;].length() &gt; 0){
		logger.info (&quot;Deleting TQ1 Segment.&quot;);
		delete msg[&apos;TQ1&apos;];
	}
	if (msg[&apos;TQ2&apos;].length() &gt; 0){
		logger.info (&quot;Deleting TQ2 Segment.&quot;);
		delete msg[&apos;TQ2&apos;];
	}
	if (msg[&apos;FT1&apos;].length() &gt; 0){
		logger.info (&quot;Deleting FT1 Segment.&quot;);
		delete msg[&apos;FT1&apos;];
	}	
	if (msg[&apos;CTD&apos;].length() &gt; 0){
		logger.info (&quot;Deleting CTD Segment.&quot;);
		delete msg[&apos;CTD&apos;];
	}
	if (msg[&apos;CTI&apos;].length() &gt; 0){
		logger.info (&quot;Deleting CTI Segment.&quot;);
		delete msg[&apos;CTI&apos;];
	}

	if (msg[&apos;NTE&apos;].length() &gt; 0){
		//Deleting all Patient-related NTEs
		logger.info (&quot;First Non-Patient related NTE seg : &quot;+ firstNonPatientRelatedNTESeg);
		if (firstNonPatientRelatedNTESeg &gt; 0) {
			logger.info (&quot;Deleting all Patient-related NTE segments - all NTEs present before the NTE seg : &quot;+ firstNonPatientRelatedNTESeg);
			for (i = 0; i &lt; firstNonPatientRelatedNTESeg; i++){
				delete msg[&apos;NTE&apos;][0]; //Keep deleting the first NTE segment until we hit non patient related NTEs.
			}
		}	
	}

	//delete all SPM related OBX
	if (spmRelatedFirstObx != -1 ){
		i = spmRelatedFirstObx;
		k = spmRelatedLastObx - spmRelatedFirstObx + 1; //k value determines the number of segments to be deleted starting at i
		logger.info (&quot;Deleting all OBXs following SPM i.e OBX[&quot;+spmRelatedFirstObx+&quot;] to OBX[&quot;+spmRelatedLastObx+&quot;]&quot; );
		var delCount = 0;
		while(msg[&apos;OBX&apos;][spmRelatedFirstObx] != null &amp;&amp; delCount &lt; k) 
    	{
			delete msg[&apos;OBX&apos;][spmRelatedFirstObx];
			i++;
			delCount++;
		}	
	}
  }
}

catch(e)
{
  logger.error(&quot;Error in Store transformed message to file Transformer: ORU R01 2.5.1 to 2.3.1 Transformation: &quot; + e.message);
  channelMap.put(&apos;componentErrors&apos;,  $(&apos;componentErrors&apos;) + &quot;Store transformed message to file Transformer: ORU R01 2.5.1 to 2.3.1 Transformation: \n&quot; + e.message + &quot; |\n&quot;);
}</string>
              </entry>
            </data>
          </step>
          <step>
            <sequenceNumber>6</sequenceNumber>
            <name>Data Type Transformations for 2.5.1 to 2.3.1 Translator</name>
            <script>try
{

  // 2.5.1 to 2.3.1 ORU R01-specific MSH transformations
  if ( ($(&apos;translateToVersion&apos;) == &apos;2.3.1&apos;) &amp;&amp;
       ($(&apos;msgType&apos;) == &apos;ORU&apos;) &amp;&amp;
       ($(&apos;msgTriggerEvent&apos;) == &apos;R01&apos;) &amp;&amp;
       ($(&apos;msgHL7VersionID&apos;) == &apos;2.5.1&apos;) )
  {

    logger.info(&quot;Handling DataType Transformations for 2.5.1 to 2.3.1..&quot;);
	
	//MSH
	logger.info(&quot;Handling DataType Transformation for MSH Segment.&quot;);
	if (msg[&apos;MSH&apos;].length() &gt; 0){
		//MSH 19 - Handling CWE DataType Transformations - The first 6 components are mapped to the CE datatype. If all of these fields are empty, meaning there is no coded data, map CWE.9-Original Text to CWE.2
		var msh_19 = msg[&apos;MSH&apos;][&apos;MSH.19&apos;][&apos;MSH.19.1&apos;] + &quot;^&quot; + 
					 msg[&apos;MSH&apos;][&apos;MSH.19&apos;][&apos;MSH.19.2&apos;] + &quot;^&quot; + 
					 msg[&apos;MSH&apos;][&apos;MSH.19&apos;][&apos;MSH.19.3&apos;] + &quot;^&quot; + 
			         msg[&apos;MSH&apos;][&apos;MSH.19&apos;][&apos;MSH.19.4&apos;] + &quot;^&quot; + 
					 msg[&apos;MSH&apos;][&apos;MSH.19&apos;][&apos;MSH.19.5&apos;] + &quot;^&quot; + 
					 msg[&apos;MSH&apos;][&apos;MSH.19&apos;][&apos;MSH.19.6&apos;];	
		var msh_19_9 = msg[&apos;MSH&apos;][&apos;MSH.19&apos;][&apos;MSH.19.9&apos;];
		msg[&apos;MSH&apos;][&apos;MSH.19&apos;] = &apos;&apos;;	
		if (msh_19 == &apos;^^^^^&apos;){
			msh_19 = &apos;^&apos; + msh_19_9 + &apos;^^^^&apos;;
		}
		msg[&apos;MSH&apos;][&apos;MSH.19&apos;] = msh_19;
	} 

	//PID
	logger.info(&quot;Handling DataType Transformations for PID Segment&quot;);
	if (msg[&apos;PID&apos;].length() &gt; 0){
		//PID 2 - Handling CX DataType Transformations - 7 through 10 components are not mapped
		delete msg[&apos;PID&apos;][&apos;PID.2&apos;][&apos;PID.2.7&apos;];
		delete msg[&apos;PID&apos;][&apos;PID.2&apos;][&apos;PID.2.8&apos;];
		delete msg[&apos;PID&apos;][&apos;PID.2&apos;][&apos;PID.2.9&apos;];
		delete msg[&apos;PID&apos;][&apos;PID.2&apos;][&apos;PID.2.10&apos;];
	
		//PID 3 - Handling CX DataType Transformations - 7 through 10 components are not mapped
		j = 0;
		while (msg[&apos;PID&apos;][&apos;PID.3&apos;][j] != null){
			delete msg[&apos;PID&apos;][&apos;PID.3&apos;][j][&apos;PID.3.7&apos;];
			delete msg[&apos;PID&apos;][&apos;PID.3&apos;][j][&apos;PID.3.8&apos;];
			delete msg[&apos;PID&apos;][&apos;PID.3&apos;][j][&apos;PID.3.9&apos;];
			delete msg[&apos;PID&apos;][&apos;PID.3&apos;][j][&apos;PID.3.10&apos;];
			j++;
		}

		//PID 4 - Handling CX DataType Transformations - 7 through 10 components are not mapped
		delete msg[&apos;PID&apos;][&apos;PID.4&apos;][&apos;PID.4.7&apos;];
		delete msg[&apos;PID&apos;][&apos;PID.4&apos;][&apos;PID.4.8&apos;];
		delete msg[&apos;PID&apos;][&apos;PID.4&apos;][&apos;PID.4.9&apos;];
		delete msg[&apos;PID&apos;][&apos;PID.4&apos;][&apos;PID.4.10&apos;];
		
		//PID 5 - Handling XPN DataType Transformations - strip out the 2nd through 6th sub-components of the FamilyName in component 1, as well as removing components 9 through 14. Fields affected
		//PID 5.1 - FN DataType
		j = 0;
		while (msg[&apos;PID&apos;][&apos;PID.5&apos;][j] != null){
			var pid_5_1_List = msg[&apos;PID&apos;][&apos;PID.5&apos;][j][&apos;PID.5.1&apos;].toString().split(&quot;&amp;&quot;);
			var count = (msg[&apos;PID&apos;][&apos;PID.5&apos;][j][&apos;PID.5.1&apos;].toString().split(&quot;&amp;&quot;).length - 1);
			msg[&apos;PID&apos;][&apos;PID.5&apos;][j][&apos;PID.5.1&apos;] = &apos;&apos;;
			if (count &gt;= 0){
			  msg[&apos;PID&apos;][&apos;PID.5&apos;][j][&apos;PID.5.1&apos;] = pid_5_1_List[0] ;
    		}
			delete msg[&apos;PID&apos;][&apos;PID.5&apos;][j][&apos;PID.5.9&apos;];
			delete msg[&apos;PID&apos;][&apos;PID.5&apos;][j][&apos;PID.5.10&apos;];
			delete msg[&apos;PID&apos;][&apos;PID.5&apos;][j][&apos;PID.5.11&apos;];
			delete msg[&apos;PID&apos;][&apos;PID.5&apos;][j][&apos;PID.5.12&apos;];
			delete msg[&apos;PID&apos;][&apos;PID.5&apos;][j][&apos;PID.5.13&apos;];
			delete msg[&apos;PID&apos;][&apos;PID.5&apos;][j][&apos;PID.5.14&apos;];
			j++;
		}
	
		//PID 6 - Handling XPN DataType Transformations - strip out the 2nd through 6th sub-components of the FamilyName in component 1, as well as removing components 9 through 14. Fields affected
		//PID 6.1 - FN DataType
		var pid_6_1_List = msg[&apos;PID&apos;][&apos;PID.6&apos;][&apos;PID.6.1&apos;].toString().split(&quot;&amp;&quot;);
		var count = (msg[&apos;PID&apos;][&apos;PID.6&apos;][&apos;PID.6.1&apos;].toString().split(&quot;&amp;&quot;).length - 1);
		msg[&apos;PID&apos;][&apos;PID.6&apos;][&apos;PID.6.1&apos;] = &apos;&apos;;
		if (count &gt;= 0){
		  msg[&apos;PID&apos;][&apos;PID.6&apos;][&apos;PID.6.1&apos;] = pid_6_1_List[0] ;
    	}
		delete msg[&apos;PID&apos;][&apos;PID.6&apos;][&apos;PID.6.9&apos;];
		delete msg[&apos;PID&apos;][&apos;PID.6&apos;][&apos;PID.6.10&apos;];
		delete msg[&apos;PID&apos;][&apos;PID.6&apos;][&apos;PID.6.11&apos;];
		delete msg[&apos;PID&apos;][&apos;PID.6&apos;][&apos;PID.6.12&apos;];
		delete msg[&apos;PID&apos;][&apos;PID.6&apos;][&apos;PID.6.13&apos;];
		delete msg[&apos;PID&apos;][&apos;PID.6&apos;][&apos;PID.6.14&apos;];

		//PID 9 - Handling XPN DataType Transformations - strip out the 2nd through 6th sub-components of the FamilyName in component 1, as well as removing components 9 through 14. Fields affected
		//PID 9.1 - FN DataType
		var pid_9_1_List = msg[&apos;PID&apos;][&apos;PID.9&apos;][&apos;PID.9.1&apos;].toString().split(&quot;&amp;&quot;);
		var count = (msg[&apos;PID&apos;][&apos;PID.9&apos;][&apos;PID.9.1&apos;].toString().split(&quot;&amp;&quot;).length - 1);
		msg[&apos;PID&apos;][&apos;PID.9&apos;][&apos;PID.9.1&apos;] = &apos;&apos;;
		if (count &gt;= 0){
		  msg[&apos;PID&apos;][&apos;PID.9&apos;][&apos;PID.9.1&apos;] = pid_9_1_List[0] ;
    	}
		delete msg[&apos;PID&apos;][&apos;PID.9&apos;][&apos;PID.9.9&apos;];
		delete msg[&apos;PID&apos;][&apos;PID.9&apos;][&apos;PID.9.10&apos;];
		delete msg[&apos;PID&apos;][&apos;PID.9&apos;][&apos;PID.9.11&apos;];
		delete msg[&apos;PID&apos;][&apos;PID.9&apos;][&apos;PID.9.12&apos;];
		delete msg[&apos;PID&apos;][&apos;PID.9&apos;][&apos;PID.9.13&apos;];
		delete msg[&apos;PID&apos;][&apos;PID.9&apos;][&apos;PID.9.14&apos;];

		//PID 10 - Handling CWE DataType Transformations - The first 6 components are mapped to the CE datatype. If all of these fields are empty, meaning there is no coded data, map CWE.9-Original Text to CWE.2
		j = 0;
		while (msg[&apos;PID&apos;][&apos;PID.10&apos;][j] != null){
			var pid_10 = msg[&apos;PID&apos;][&apos;PID.10&apos;][j][&apos;PID.10.1&apos;] + &quot;^&quot; + 
					 msg[&apos;PID&apos;][&apos;PID.10&apos;][j][&apos;PID.10.2&apos;] + &quot;^&quot; + 
					 msg[&apos;PID&apos;][&apos;PID.10&apos;][j][&apos;PID.10.3&apos;] + &quot;^&quot; + 
			         msg[&apos;PID&apos;][&apos;PID.10&apos;][j][&apos;PID.10.4&apos;] + &quot;^&quot; + 
					 msg[&apos;PID&apos;][&apos;PID.10&apos;][j][&apos;PID.10.5&apos;] + &quot;^&quot; + 
                     msg[&apos;PID&apos;][&apos;PID.10&apos;][j][&apos;PID.10.6&apos;];
			var pid_10_9 = msg[&apos;PID&apos;][&apos;PID.10&apos;][j][&apos;PID.10.9&apos;];
			msg[&apos;PID&apos;][&apos;PID.10&apos;][j] = &apos;&apos;;
			if (pid_10 == &apos;^^^^^&apos;){
				pid_10 = &apos;^&apos; + pid_10_9 + &apos;^^^^&apos;;
			}
			msg[&apos;PID&apos;][&apos;PID.10&apos;][j] = pid_10;
			j ++;
		}

		//PID 11 - Handling XAD DataType Transformations - strip out the 2nd through 3rd sub-components of the Street Address in component 1 as well as removing components 12 through 14.
		//PID 11.1 - SAD DataType
		j = 0;
		while (msg[&apos;PID&apos;][&apos;PID.11&apos;][j] != null){
			var pid_11_1_List = msg[&apos;PID&apos;][&apos;PID.11&apos;][j][&apos;PID.11.1&apos;].toString().split(&quot;&amp;&quot;);
			var count = (msg[&apos;PID&apos;][&apos;PID.11&apos;][j][&apos;PID.11.1&apos;].toString().split(&quot;&amp;&quot;).length - 1);
			msg[&apos;PID&apos;][&apos;PID.11&apos;][j][&apos;PID.11.1&apos;] = &apos;&apos;;
			if (count &gt;= 0){
			  msg[&apos;PID&apos;][&apos;PID.11&apos;][j][&apos;PID.11.1&apos;] = pid_11_1_List[0] ;
    		}
			delete msg[&apos;PID&apos;][&apos;PID.11&apos;][j][&apos;PID.11.12&apos;];
			delete msg[&apos;PID&apos;][&apos;PID.11&apos;][j][&apos;PID.11.13&apos;];
			delete msg[&apos;PID&apos;][&apos;PID.11&apos;][j][&apos;PID.11.14&apos;];
			j++;
		}	

		//PID 15 - Handling CWE DataType Transformations - The first 6 components are mapped to the CE datatype. If all of these fields are empty, meaning there is no coded data, map CWE.9-Original Text to CWE.2
		var pid_15 = msg[&apos;PID&apos;][&apos;PID.15&apos;][&apos;PID.15.1&apos;] + &quot;^&quot; + 
					 msg[&apos;PID&apos;][&apos;PID.15&apos;][&apos;PID.15.2&apos;] + &quot;^&quot; + 
					 msg[&apos;PID&apos;][&apos;PID.15&apos;][&apos;PID.15.3&apos;] + &quot;^&quot; + 
			         msg[&apos;PID&apos;][&apos;PID.15&apos;][&apos;PID.15.4&apos;] + &quot;^&quot; + 
					 msg[&apos;PID&apos;][&apos;PID.15&apos;][&apos;PID.15.5&apos;] + &quot;^&quot; + 
                     msg[&apos;PID&apos;][&apos;PID.15&apos;][&apos;PID.15.6&apos;];
		var pid_15_9 = msg[&apos;PID&apos;][&apos;PID.15&apos;][&apos;PID.15.9&apos;];
		msg[&apos;PID&apos;][&apos;PID.15&apos;] = &apos;&apos;;
		if (pid_15 == &apos;^^^^^&apos;){
			pid_15 = &apos;^&apos; + pid_15_9 + &apos;^^^^&apos;;
		}
		msg[&apos;PID&apos;][&apos;PID.15&apos;] = pid_15;

		//PID 16 - Handling CWE DataType Transformations - The first 6 components are mapped to the CE datatype. If all of these fields are empty, meaning there is no coded data, map CWE.9-Original Text to CWE.2
		var pid_16 = msg[&apos;PID&apos;][&apos;PID.16&apos;][&apos;PID.16.1&apos;] + &quot;^&quot; + 
					 msg[&apos;PID&apos;][&apos;PID.16&apos;][&apos;PID.16.2&apos;] + &quot;^&quot; + 
					 msg[&apos;PID&apos;][&apos;PID.16&apos;][&apos;PID.16.3&apos;] + &quot;^&quot; + 
			         msg[&apos;PID&apos;][&apos;PID.16&apos;][&apos;PID.16.4&apos;] + &quot;^&quot; + 
					 msg[&apos;PID&apos;][&apos;PID.16&apos;][&apos;PID.16.5&apos;] + &quot;^&quot; + 
                     msg[&apos;PID&apos;][&apos;PID.16&apos;][&apos;PID.16.6&apos;];
		var pid_16_9 = msg[&apos;PID&apos;][&apos;PID.16&apos;][&apos;PID.16.9&apos;] ;
		msg[&apos;PID&apos;][&apos;PID.16&apos;] = &apos;&apos;;		
		if (pid_16 == &apos;^^^^^&apos;){
			pid_16 = &apos;^&apos; + pid_16_9 + &apos;^^^^&apos;;
		}
		msg[&apos;PID&apos;][&apos;PID.16&apos;] = pid_16;

		//PID 18- Handling CX DataType Transformations - 7 through 10 components are not mapped
		delete msg[&apos;PID&apos;][&apos;PID.18&apos;][&apos;PID.18.7&apos;];
		delete msg[&apos;PID&apos;][&apos;PID.18&apos;][&apos;PID.18.8&apos;];
		delete msg[&apos;PID&apos;][&apos;PID.18&apos;][&apos;PID.18.9&apos;];
		delete msg[&apos;PID&apos;][&apos;PID.18&apos;][&apos;PID.18.10&apos;];

		//PID 21 - Handling CX DataType Transformations - 7 through 10 components are not mapped
		delete msg[&apos;PID&apos;][&apos;PID.21&apos;][&apos;PID.21.7&apos;];
		delete msg[&apos;PID&apos;][&apos;PID.21&apos;][&apos;PID.21.8&apos;];
		delete msg[&apos;PID&apos;][&apos;PID.21&apos;][&apos;PID.21.9&apos;];
		delete msg[&apos;PID&apos;][&apos;PID.21&apos;][&apos;PID.21.10&apos;];

		//PID 26 - Handling CWE DataType Transformations - The first 6 components are mapped to the CE datatype. If all of these fields are empty, meaning there is no coded data, map CWE.9-Original Text to CWE.2
		j = 0;
		while (msg[&apos;PID&apos;][&apos;PID.26&apos;][j] != null){
			var pid_26 = msg[&apos;PID&apos;][&apos;PID.26&apos;][j][&apos;PID.26.1&apos;] + &quot;^&quot; + 
						 msg[&apos;PID&apos;][&apos;PID.26&apos;][j][&apos;PID.26.2&apos;] + &quot;^&quot; + 
						 msg[&apos;PID&apos;][&apos;PID.26&apos;][j][&apos;PID.26.3&apos;] + &quot;^&quot; + 
			    	     msg[&apos;PID&apos;][&apos;PID.26&apos;][j][&apos;PID.26.4&apos;] + &quot;^&quot; + 
						 msg[&apos;PID&apos;][&apos;PID.26&apos;][j][&apos;PID.26.5&apos;] + &quot;^&quot; + 
	                     msg[&apos;PID&apos;][&apos;PID.26&apos;][j][&apos;PID.26.6&apos;];
			var pid_26_9 = msg[&apos;PID&apos;][&apos;PID.26&apos;][j][&apos;PID.26.9&apos;];
			msg[&apos;PID&apos;][&apos;PID.26&apos;][j] = &apos;&apos;;
			if (pid_26 == &apos;^^^^^&apos;){
				pid_26 = &apos;^&apos; + pid_26_9 + &apos;^^^^&apos;;
			}
			msg[&apos;PID&apos;][&apos;PID.26&apos;][j] = pid_26;
			j++;
		}
		
		//PID 27 - Handling CWE DataType Transformations - The first 6 components are mapped to the CE datatype. If all of these fields are empty, meaning there is no coded data, map CWE.9-Original Text to CWE.2
		var pid_27 = msg[&apos;PID&apos;][&apos;PID.27&apos;][&apos;PID.27.1&apos;] + &quot;^&quot; + 
					 msg[&apos;PID&apos;][&apos;PID.27&apos;][&apos;PID.27.2&apos;] + &quot;^&quot; + 
					 msg[&apos;PID&apos;][&apos;PID.27&apos;][&apos;PID.27.3&apos;] + &quot;^&quot; + 
			         msg[&apos;PID&apos;][&apos;PID.27&apos;][&apos;PID.27.4&apos;] + &quot;^&quot; + 
					 msg[&apos;PID&apos;][&apos;PID.27&apos;][&apos;PID.27.5&apos;] + &quot;^&quot; + 
                     msg[&apos;PID&apos;][&apos;PID.27&apos;][&apos;PID.27.6&apos;];
		var pid_27_9 = msg[&apos;PID&apos;][&apos;PID.27&apos;][&apos;PID.27.9&apos;];
		msg[&apos;PID&apos;][&apos;PID.27&apos;] = &apos;&apos;;
		if (pid_27 == &apos;^^^^^&apos;){
			pid_27 = &apos;^&apos; + pid_27_9 + &apos;^^^^&apos;;
		}
		msg[&apos;PID&apos;][&apos;PID.27&apos;] = pid_27;

		//PID 28 - Handling CWE DataType Transformations - The first 6 components are mapped to the CE datatype. If all of these fields are empty, meaning there is no coded data, map CWE.9-Original Text to CWE.2
		var pid_28 = msg[&apos;PID&apos;][&apos;PID.28&apos;][&apos;PID.28.1&apos;] + &quot;^&quot; + 
					 msg[&apos;PID&apos;][&apos;PID.28&apos;][&apos;PID.28.2&apos;] + &quot;^&quot; + 
					 msg[&apos;PID&apos;][&apos;PID.28&apos;][&apos;PID.28.3&apos;] + &quot;^&quot; + 
			         msg[&apos;PID&apos;][&apos;PID.28&apos;][&apos;PID.28.4&apos;] + &quot;^&quot; + 
					 msg[&apos;PID&apos;][&apos;PID.28&apos;][&apos;PID.28.5&apos;] + &quot;^&quot; + 
                     msg[&apos;PID&apos;][&apos;PID.28&apos;][&apos;PID.28.6&apos;];
		var pid_28_9 = msg[&apos;PID&apos;][&apos;PID.28&apos;][&apos;PID.28.9&apos;];
		msg[&apos;PID&apos;][&apos;PID.28&apos;] =  &apos;&apos;;
		if (pid_28 == &apos;^^^^^&apos;){
			pid_28 = &apos;^&apos; + pid_28_9 + &apos;^^^^&apos;;
		}
		msg[&apos;PID&apos;][&apos;PID.28&apos;] = pid_28;
	}

	//PD1
	logger.info(&quot;Handling DataType Transformations for PD1 Segment&quot;);
	if (msg[&apos;PD1&apos;].length() &gt; 0){
		//PD1 3 - Handling XON DataType Transformations - Removing component 10
		j = 0;
		while (msg[&apos;PD1&apos;][&apos;PD1.3&apos;][j] != null){
			delete msg[&apos;PD1&apos;][&apos;PD1.3&apos;][j][&apos;PD1.3.10&apos;];
			j++;
		}

		//PD1 4 - Handling XCN DataType Transformations - strip out the 2nd through 6th sub-components of the FamilyName in component 2, as well as removing components 16 through 23.
		//PD1 4.2 - FN DataType
		j = 0;
		while (msg[&apos;PD1&apos;][&apos;PD1.4&apos;][j] != null){
			var pd1_4_2_List = msg[&apos;PD1&apos;][&apos;PD1.4&apos;][j][&apos;PD1.4.2&apos;].toString().split(&quot;&amp;&quot;);
			var count = (msg[&apos;PD1&apos;][&apos;PD1.4&apos;][j][&apos;PD1.4.2&apos;].toString().split(&quot;&amp;&quot;).length - 1);
			msg[&apos;PD1&apos;][&apos;PD1.4&apos;][j][&apos;PD1.4.2&apos;] = &apos;&apos;;
			if (count &gt;= 0){
			  msg[&apos;PD1&apos;][&apos;PD1.4&apos;][j][&apos;PD1.4.2&apos;] = pd1_4_2_List[0] ;
    		}		
			delete msg[&apos;PD1&apos;][&apos;PD1.4&apos;][j][&apos;PD1.4.16&apos;];
			delete msg[&apos;PD1&apos;][&apos;PD1.4&apos;][j][&apos;PD1.4.17&apos;];
			delete msg[&apos;PD1&apos;][&apos;PD1.4&apos;][j][&apos;PD1.4.18&apos;];
			delete msg[&apos;PD1&apos;][&apos;PD1.4&apos;][j][&apos;PD1.4.19&apos;];
			delete msg[&apos;PD1&apos;][&apos;PD1.4&apos;][j][&apos;PD1.4.20&apos;];
			delete msg[&apos;PD1&apos;][&apos;PD1.4&apos;][j][&apos;PD1.4.21&apos;];
			delete msg[&apos;PD1&apos;][&apos;PD1.4&apos;][j][&apos;PD1.4.22&apos;];
			delete msg[&apos;PD1&apos;][&apos;PD1.4&apos;][j][&apos;PD1.4.23&apos;];
			j++;
		}

		//PD1 10 - Handling CX DataType Transformations - 7 through 10 components are not mapped
		j = 0;
		while (msg[&apos;PD1&apos;][&apos;PD1.10&apos;][j] != null){
			delete msg[&apos;PD1&apos;][&apos;PD1.10&apos;][j][&apos;PD1.10.7&apos;];
			delete msg[&apos;PD1&apos;][&apos;PD1.10&apos;][j][&apos;PD1.10.8&apos;];
			delete msg[&apos;PD1&apos;][&apos;PD1.10&apos;][j][&apos;PD1.10.9&apos;];
			delete msg[&apos;PD1&apos;][&apos;PD1.10&apos;][j][&apos;PD1.10.10&apos;];
			j++;
		}

		//PD1 11 - Handling CWE DataType Transformations - The first 6 components are mapped to the CE datatype. If all of these fields are empty, meaning there is no coded data, map CWE.9-Original Text to CWE.2
		var pd1_11 = msg[&apos;PD1&apos;][&apos;PD1.11&apos;][&apos;PD1.11.1&apos;] + &quot;^&quot; + 
					 msg[&apos;PD1&apos;][&apos;PD1.11&apos;][&apos;PD1.11.2&apos;] + &quot;^&quot; + 
					 msg[&apos;PD1&apos;][&apos;PD1.11&apos;][&apos;PD1.11.3&apos;] + &quot;^&quot; + 
			         msg[&apos;PD1&apos;][&apos;PD1.11&apos;][&apos;PD1.11.4&apos;] + &quot;^&quot; + 
					 msg[&apos;PD1&apos;][&apos;PD1.11&apos;][&apos;PD1.11.5&apos;] + &quot;^&quot; + 
                     msg[&apos;PD1&apos;][&apos;PD1.11&apos;][&apos;PD1.11.6&apos;];
		var pid_11_9 = msg[&apos;PD1&apos;][&apos;PD1.11&apos;][&apos;PD1.11.9&apos;];
		msg[&apos;PD1&apos;][&apos;PD1.11&apos;] = &apos;&apos;;
		if (pd1_11 == &apos;^^^^^&apos;){
			pd1_11 = &apos;^&apos; + pid_11_9 + &apos;^^^^&apos;;
		}
		msg[&apos;PD1&apos;][&apos;PD1.11&apos;] = pd1_11;		
	}

	//PV1
	logger.info(&quot;Handling DataType Transformations for PV1 Segment&quot;);
	if (msg[&apos;PV1&apos;].length() &gt; 0){
		//PV1 3 - Handling PL DataType Transformations - 10 and 11 components are not mapped
		delete msg[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.10&apos;];
		delete msg[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.11&apos;];

		//PV1 5 - Handling CX DataType Transformations - 7 through 10 components are not mapped
		delete msg[&apos;PV1&apos;][&apos;PV1.5&apos;][&apos;PV1.5.7&apos;];
		delete msg[&apos;PV1&apos;][&apos;PV1.5&apos;][&apos;PV1.5.8&apos;];
		delete msg[&apos;PV1&apos;][&apos;PV1.5&apos;][&apos;PV1.5.9&apos;];
		delete msg[&apos;PV1&apos;][&apos;PV1.5&apos;][&apos;PV1.5.10&apos;];
		
		//PV1 6 - Handling PL DataType Transformations - 10 and 11 components are not mapped
		delete msg[&apos;PV1&apos;][&apos;PV1.6&apos;][&apos;PV1.6.10&apos;];
		delete msg[&apos;PV1&apos;][&apos;PV1.6&apos;][&apos;PV1.6.11&apos;];

		//PV1 7 - Handling XCN DataType Transformations - strip out the 2nd through 6th sub-components of the FamilyName in component 2, as well as removing components 16 through 23.
		//PV1 7.2 - FN DataType
		j = 0;
		while (msg[&apos;PV1&apos;][&apos;PV1.7&apos;][j] != null){
			var pv1_7_2_List = msg[&apos;PV1&apos;][&apos;PV1.7&apos;][j][&apos;PV1.7.2&apos;].toString().split(&quot;&amp;&quot;);
			var count = (msg[&apos;PV1&apos;][&apos;PV1.7&apos;][j][&apos;PV1.7.2&apos;].toString().split(&quot;&amp;&quot;).length - 1);
			msg[&apos;PV1&apos;][&apos;PV1.7&apos;][j][&apos;PV1.7.2&apos;] = &apos;&apos;;
			if (count &gt;= 0){
			  msg[&apos;PV1&apos;][&apos;PV1.7&apos;][j][&apos;PV1.7.2&apos;] = pv1_7_2_List[0] ;
    		}
			delete msg[&apos;PV1&apos;][&apos;PV1.7&apos;][j][&apos;PV1.7.16&apos;];
			delete msg[&apos;PV1&apos;][&apos;PV1.7&apos;][j][&apos;PV1.7.17&apos;];
			delete msg[&apos;PV1&apos;][&apos;PV1.7&apos;][j][&apos;PV1.7.18&apos;];
			delete msg[&apos;PV1&apos;][&apos;PV1.7&apos;][j][&apos;PV1.7.19&apos;];
			delete msg[&apos;PV1&apos;][&apos;PV1.7&apos;][j][&apos;PV1.7.20&apos;];
			delete msg[&apos;PV1&apos;][&apos;PV1.7&apos;][j][&apos;PV1.7.21&apos;];
			delete msg[&apos;PV1&apos;][&apos;PV1.7&apos;][j][&apos;PV1.7.22&apos;];
			delete msg[&apos;PV1&apos;][&apos;PV1.7&apos;][j][&apos;PV1.7.23&apos;];
			j++;
		}

		//PV1 8 - Handling XCN DataType Transformations - strip out the 2nd through 6th sub-components of the FamilyName in component 2, as well as removing components 16 through 23.
		//PV1 8.2 - FN DataType
		j = 0;
		while (msg[&apos;PV1&apos;][&apos;PV1.8&apos;][j] != null){
			var pv1_8_2_List = msg[&apos;PV1&apos;][&apos;PV1.8&apos;][j][&apos;PV1.8.2&apos;].toString().split(&quot;&amp;&quot;);
			var count = (msg[&apos;PV1&apos;][&apos;PV1.8&apos;][j][&apos;PV1.8.2&apos;].toString().split(&quot;&amp;&quot;).length - 1);
			msg[&apos;PV1&apos;][&apos;PV1.8&apos;][j][&apos;PV1.8.2&apos;] = &apos;&apos;;
			if (count &gt;= 0){
			  msg[&apos;PV1&apos;][&apos;PV1.8&apos;][j][&apos;PV1.8.2&apos;] = pv1_8_2_List[0] ;
    		}
			delete msg[&apos;PV1&apos;][&apos;PV1.8&apos;][j][&apos;PV1.8.16&apos;];
			delete msg[&apos;PV1&apos;][&apos;PV1.8&apos;][j][&apos;PV1.8.17&apos;];
			delete msg[&apos;PV1&apos;][&apos;PV1.8&apos;][j][&apos;PV1.8.18&apos;];
			delete msg[&apos;PV1&apos;][&apos;PV1.8&apos;][j][&apos;PV1.8.19&apos;];
			delete msg[&apos;PV1&apos;][&apos;PV1.8&apos;][j][&apos;PV1.8.20&apos;];
			delete msg[&apos;PV1&apos;][&apos;PV1.8&apos;][j][&apos;PV1.8.21&apos;];
			delete msg[&apos;PV1&apos;][&apos;PV1.8&apos;][j][&apos;PV1.8.22&apos;];
			delete msg[&apos;PV1&apos;][&apos;PV1.8&apos;][j][&apos;PV1.8.23&apos;];
			j++;
		}

		//PV1 9 - Handling XCN DataType Transformations - strip out the 2nd through 6th sub-components of the FamilyName in component 2, as well as removing components 16 through 23.
		//PV1 9.2 - FN DataType
		j = 0;
		while (msg[&apos;PV1&apos;][&apos;PV1.9&apos;][j] != null){
			var pv1_9_2_List = msg[&apos;PV1&apos;][&apos;PV1.9&apos;][j][&apos;PV1.9.2&apos;].toString().split(&quot;&amp;&quot;);
			var count = (msg[&apos;PV1&apos;][&apos;PV1.9&apos;][j][&apos;PV1.9.2&apos;].toString().split(&quot;&amp;&quot;).length - 1);
			msg[&apos;PV1&apos;][&apos;PV1.9&apos;][j][&apos;PV1.9.2&apos;] = &apos;&apos;;
			if (count &gt;= 0){
			  msg[&apos;PV1&apos;][&apos;PV1.9&apos;][j][&apos;PV1.9.2&apos;] = pv1_9_2_List[0] ;
    		}		
			delete msg[&apos;PV1&apos;][&apos;PV1.9&apos;][j][&apos;PV1.9.16&apos;];
			delete msg[&apos;PV1&apos;][&apos;PV1.9&apos;][j][&apos;PV1.9.17&apos;];
			delete msg[&apos;PV1&apos;][&apos;PV1.9&apos;][j][&apos;PV1.9.18&apos;];
			delete msg[&apos;PV1&apos;][&apos;PV1.9&apos;][j][&apos;PV1.9.19&apos;];
			delete msg[&apos;PV1&apos;][&apos;PV1.9&apos;][j][&apos;PV1.9.20&apos;];
			delete msg[&apos;PV1&apos;][&apos;PV1.9&apos;][j][&apos;PV1.9.21&apos;];
			delete msg[&apos;PV1&apos;][&apos;PV1.9&apos;][j][&apos;PV1.9.22&apos;];
			delete msg[&apos;PV1&apos;][&apos;PV1.9&apos;][j][&apos;PV1.9.23&apos;];
			j++;
		}

		//PV1 11 - Handling PL DataType Transformations - 10 and 11 components are not mapped
		delete msg[&apos;PV1&apos;][&apos;PV1.11&apos;][&apos;PV1.11.10&apos;];
		delete msg[&apos;PV1&apos;][&apos;PV1.11&apos;][&apos;PV1.11.11&apos;];

		//PV1 17 - Handling XCN DataType Transformations - strip out the 2nd through 6th sub-components of the FamilyName in component 2, as well as removing components 16 through 23.
		//PV1 17.2 - FN DataType
		j = 0;
		while (msg[&apos;PV1&apos;][&apos;PV1.17&apos;][j] != null){
			var pv1_17_2_List = msg[&apos;PV1&apos;][&apos;PV1.17&apos;][j][&apos;PV1.17.2&apos;].toString().split(&quot;&amp;&quot;);
			var count = (msg[&apos;PV1&apos;][&apos;PV1.17&apos;][j][&apos;PV1.17.2&apos;].toString().split(&quot;&amp;&quot;).length - 1);
			msg[&apos;PV1&apos;][&apos;PV1.17&apos;][j][&apos;PV1.17.2&apos;] = &apos;&apos;;
			if (count &gt;= 0){
			  msg[&apos;PV1&apos;][&apos;PV1.17&apos;][j][&apos;PV1.17.2&apos;] = pv1_17_2_List[0] ;
    		}
			delete msg[&apos;PV1&apos;][&apos;PV1.17&apos;][j][&apos;PV1.17.16&apos;];
			delete msg[&apos;PV1&apos;][&apos;PV1.17&apos;][j][&apos;PV1.17.17&apos;];
			delete msg[&apos;PV1&apos;][&apos;PV1.17&apos;][j][&apos;PV1.17.18&apos;];
			delete msg[&apos;PV1&apos;][&apos;PV1.17&apos;][j][&apos;PV1.17.19&apos;];
			delete msg[&apos;PV1&apos;][&apos;PV1.17&apos;][j][&apos;PV1.17.20&apos;];
			delete msg[&apos;PV1&apos;][&apos;PV1.17&apos;][j][&apos;PV1.17.21&apos;];
			delete msg[&apos;PV1&apos;][&apos;PV1.17&apos;][j][&apos;PV1.17.22&apos;];
			delete msg[&apos;PV1&apos;][&apos;PV1.17&apos;][j][&apos;PV1.17.23&apos;];
			j++;
		}

		//PV1 19 - Handling CX DataType Transformations - 7 through 10 components are not mapped
		delete msg[&apos;PV1&apos;][&apos;PV1.19&apos;][&apos;PV1.19.7&apos;];
		delete msg[&apos;PV1&apos;][&apos;PV1.19&apos;][&apos;PV1.19.8&apos;];
		delete msg[&apos;PV1&apos;][&apos;PV1.19&apos;][&apos;PV1.19.9&apos;];
		delete msg[&apos;PV1&apos;][&apos;PV1.19&apos;][&apos;PV1.19.10&apos;];

		//PV1 38 - Handling CWE DataType Transformations - The first 6 components are mapped to the CE datatype. If all of these fields are empty, meaning there is no coded data, map CWE.9-Original Text to CWE.2
		var pv1_38 = msg[&apos;PV1&apos;][&apos;PV1.38&apos;][&apos;PV1.38.1&apos;] + &quot;^&quot; + 
					 msg[&apos;PV1&apos;][&apos;PV1.38&apos;][&apos;PV1.38.2&apos;] + &quot;^&quot; + 
					 msg[&apos;PV1&apos;][&apos;PV1.38&apos;][&apos;PV1.38.3&apos;] + &quot;^&quot; + 
			         msg[&apos;PV1&apos;][&apos;PV1.38&apos;][&apos;PV1.38.4&apos;] + &quot;^&quot; + 
					 msg[&apos;PV1&apos;][&apos;PV1.38&apos;][&apos;PV1.38.5&apos;] + &quot;^&quot; + 
                     msg[&apos;PV1&apos;][&apos;PV1.38&apos;][&apos;PV1.38.6&apos;];
		var pv1_38_9 = msg[&apos;PV1&apos;][&apos;PV1.38&apos;][&apos;PV1.38.9&apos;];
		msg[&apos;PV1&apos;][&apos;PV1.38&apos;] = &apos;&apos;;
		if (pv1_38 == &apos;^^^^^&apos;){
			pv1_38 = &apos;^&apos; + pv1_38_9 + &apos;^^^^&apos;;
		}
		msg[&apos;PV1&apos;][&apos;PV1.38&apos;] = pv1_38;

		//PV1 42 - Handling PL DataType Transformations - 10 and 11 components are not mapped
		delete msg[&apos;PV1&apos;][&apos;PV1.42&apos;][&apos;PV1.42.10&apos;];
		delete msg[&apos;PV1&apos;][&apos;PV1.42&apos;][&apos;PV1.42.11&apos;];

		//PV1 43 - Handling PL DataType Transformations - 10 and 11 components are not mapped
		delete msg[&apos;PV1&apos;][&apos;PV1.43&apos;][&apos;PV1.43.10&apos;];
		delete msg[&apos;PV1&apos;][&apos;PV1.43&apos;][&apos;PV1.43.11&apos;];		

		//PV1 50 - Handling CX DataType Transformations - 7 through 10 components are not mapped
		delete msg[&apos;PV1&apos;][&apos;PV1.50&apos;][&apos;PV1.50.7&apos;];
		delete msg[&apos;PV1&apos;][&apos;PV1.50&apos;][&apos;PV1.50.8&apos;];
		delete msg[&apos;PV1&apos;][&apos;PV1.50&apos;][&apos;PV1.50.9&apos;];
		delete msg[&apos;PV1&apos;][&apos;PV1.50&apos;][&apos;PV1.50.10&apos;];

		//PV1 52 - Handling XCN DataType Transformations - strip out the 2nd through 6th sub-components of the FamilyName in component 2, as well as removing components 16 through 23.		
		//PV1 52.2 - FN DataType
		var pv1_52_2_List = msg[&apos;PV1&apos;][&apos;PV1.52&apos;][&apos;PV1.52.2&apos;].toString().split(&quot;&amp;&quot;);
		var count = (msg[&apos;PV1&apos;][&apos;PV1.52&apos;][&apos;PV1.52.2&apos;].toString().split(&quot;&amp;&quot;).length - 1);
		msg[&apos;PV1&apos;][&apos;PV1.52&apos;][&apos;PV1.52.2&apos;] = &apos;&apos;;
		if (count &gt;= 0){
		  msg[&apos;PV1&apos;][&apos;PV1.52&apos;][&apos;PV1.52.2&apos;] = pv1_52_2_List[0] ;
    	}
		delete msg[&apos;PV1&apos;][&apos;PV1.52&apos;][&apos;PV1.52.16&apos;];
		delete msg[&apos;PV1&apos;][&apos;PV1.52&apos;][&apos;PV1.52.17&apos;];
		delete msg[&apos;PV1&apos;][&apos;PV1.52&apos;][&apos;PV1.52.18&apos;];
		delete msg[&apos;PV1&apos;][&apos;PV1.52&apos;][&apos;PV1.52.19&apos;];
		delete msg[&apos;PV1&apos;][&apos;PV1.52&apos;][&apos;PV1.52.20&apos;];
		delete msg[&apos;PV1&apos;][&apos;PV1.52&apos;][&apos;PV1.52.21&apos;];
		delete msg[&apos;PV1&apos;][&apos;PV1.52&apos;][&apos;PV1.52.22&apos;];
		delete msg[&apos;PV1&apos;][&apos;PV1.52&apos;][&apos;PV1.52.23&apos;];
	}

	//PV2
	logger.info(&quot;Handling DataType Transformations for PV2 Segment&quot;);
	if (msg[&apos;PV2&apos;].length() &gt; 0){
		//PV2 1 - Handling PL DataType Transformations - 10 and 11 components are not mapped
		delete msg[&apos;PV2&apos;][&apos;PV2.1&apos;][&apos;PV2.1.10&apos;];
		delete msg[&apos;PV2&apos;][&apos;PV2.1&apos;][&apos;PV2.1.11&apos;];

		//PV2 2 - Handling CWE DataType Transformations - The first 6 components are mapped to the CE datatype. If all of these fields are empty, meaning there is no coded data, map CWE.9-Original Text to CWE.2
		var pv2_2 = msg[&apos;PV2&apos;][&apos;PV2.2&apos;][&apos;PV2.2.1&apos;] + &quot;^&quot; + 
                    msg[&apos;PV2&apos;][&apos;PV2.2&apos;][&apos;PV2.2.2&apos;] + &quot;^&quot; + 
					msg[&apos;PV2&apos;][&apos;PV2.2&apos;][&apos;PV2.2.3&apos;] + &quot;^&quot; + 
			        msg[&apos;PV2&apos;][&apos;PV2.2&apos;][&apos;PV2.2.4&apos;] + &quot;^&quot; + 
					msg[&apos;PV2&apos;][&apos;PV2.2&apos;][&apos;PV2.2.5&apos;] + &quot;^&quot; + 
                    msg[&apos;PV2&apos;][&apos;PV2.2&apos;][&apos;PV2.2.6&apos;];
		var pv2_2_9 = msg[&apos;PV2&apos;][&apos;PV2.2&apos;][&apos;PV2.2.9&apos;];
		msg[&apos;PV2&apos;][&apos;PV2.2&apos;] = &apos;&apos;;
		if (pv2_2 == &apos;^^^^^&apos;){
			pv2_2 = &apos;^&apos; + pv2_2_9 + &apos;^^^^&apos;;
		}
		msg[&apos;PV2&apos;][&apos;PV2.2&apos;] = pv2_2;


		//PV2 3 - Handling CWE DataType Transformations - The first 6 components are mapped to the CE datatype. If all of these fields are empty, meaning there is no coded data, map CWE.9-Original Text to CWE.2
		var pv2_3 = msg[&apos;PV2&apos;][&apos;PV2.3&apos;][&apos;PV2.3.1&apos;] + &quot;^&quot; + 
					msg[&apos;PV2&apos;][&apos;PV2.3&apos;][&apos;PV2.3.2&apos;] + &quot;^&quot; + 
					msg[&apos;PV2&apos;][&apos;PV2.3&apos;][&apos;PV2.3.3&apos;] + &quot;^&quot; + 
			        msg[&apos;PV2&apos;][&apos;PV2.3&apos;][&apos;PV2.3.4&apos;] + &quot;^&quot; + 
					msg[&apos;PV2&apos;][&apos;PV2.3&apos;][&apos;PV2.3.5&apos;] + &quot;^&quot; + 
                    msg[&apos;PV2&apos;][&apos;PV2.3&apos;][&apos;PV2.3.6&apos;];
		var pv2_3_9 = msg[&apos;PV2&apos;][&apos;PV2.3&apos;][&apos;PV2.3.9&apos;];
		msg[&apos;PV2&apos;][&apos;PV2.3&apos;] = &apos;&apos;;
		if (pv2_3 == &apos;^^^^^&apos;){
			pv2_3 = &apos;^&apos; + pv2_3_9 + &apos;^^^^&apos;;
		}
		msg[&apos;PV2&apos;][&apos;PV2.3&apos;] = pv2_3;


		//PV2 4 - Handling CWE DataType Transformations - The first 6 components are mapped to the CE datatype. If all of these fields are empty, meaning there is no coded data, map CWE.9-Original Text to CWE.2
		var pv2_4 = msg[&apos;PV2&apos;][&apos;PV2.4&apos;][&apos;PV2.4.1&apos;] + &quot;^&quot; + 
					msg[&apos;PV2&apos;][&apos;PV2.4&apos;][&apos;PV2.4.2&apos;] + &quot;^&quot; + 
					msg[&apos;PV2&apos;][&apos;PV2.4&apos;][&apos;PV2.4.3&apos;] + &quot;^&quot; + 
			        msg[&apos;PV2&apos;][&apos;PV2.4&apos;][&apos;PV2.4.4&apos;] + &quot;^&quot; + 
					msg[&apos;PV2&apos;][&apos;PV2.4&apos;][&apos;PV2.4.5&apos;] + &quot;^&quot; + 
                    msg[&apos;PV2&apos;][&apos;PV2.4&apos;][&apos;PV2.4.6&apos;];
		var pv2_4_9 = msg[&apos;PV2&apos;][&apos;PV2.4&apos;][&apos;PV2.4.9&apos;];
		msg[&apos;PV2&apos;][&apos;PV2.4&apos;] = &apos;&apos;;
		if (pv2_4 == &apos;^^^^^&apos;){
			pv2_4 = &apos;^&apos; + pv2_4_9 + &apos;^^^^&apos;;
		}
		msg[&apos;PV2&apos;][&apos;PV2.4&apos;] = pv2_4;

		//PV2 13 - Handling XCN DataType Transformations - strip out the 2nd through 6th sub-components of the FamilyName in component 2, as well as removing components 16 through 23.
		//PV2 13.2 - FN DataType
		var pv2_13_2_List = msg[&apos;PV2&apos;][&apos;PV2.13&apos;][&apos;PV2.13.2&apos;].toString().split(&quot;&amp;&quot;);
		var count = (msg[&apos;PV2&apos;][&apos;PV2.13&apos;][&apos;PV2.13.2&apos;].toString().split(&quot;&amp;&quot;).length - 1);
		msg[&apos;PV2&apos;][&apos;PV2.13&apos;][&apos;PV2.13.2&apos;] = &apos;&apos;;
		if (count &gt;= 0){
		  msg[&apos;PV2&apos;][&apos;PV2.13&apos;][&apos;PV2.13.2&apos;] = pv2_13_2_List[0] ;
    	}
		delete msg[&apos;PV2&apos;][&apos;PV2.13&apos;][&apos;PV2.13.16&apos;];
		delete msg[&apos;PV2&apos;][&apos;PV2.13&apos;][&apos;PV2.13.17&apos;];
		delete msg[&apos;PV2&apos;][&apos;PV2.13&apos;][&apos;PV2.13.18&apos;];
		delete msg[&apos;PV2&apos;][&apos;PV2.13&apos;][&apos;PV2.13.19&apos;];
		delete msg[&apos;PV2&apos;][&apos;PV2.13&apos;][&apos;PV2.13.20&apos;];
		delete msg[&apos;PV2&apos;][&apos;PV2.13&apos;][&apos;PV2.13.21&apos;];
		delete msg[&apos;PV2&apos;][&apos;PV2.13&apos;][&apos;PV2.13.22&apos;];
		delete msg[&apos;PV2&apos;][&apos;PV2.13&apos;][&apos;PV2.13.23&apos;];

		//PV2 23 - Handling XON DataType Transformations - Removing component 10
		j = 0;
		while ( msg[&apos;PV2&apos;][&apos;PV2.23&apos;][j] != null) {
			delete msg[&apos;PV2&apos;][&apos;PV2.23&apos;][j][&apos;PV2.23.10&apos;];
			j++;			
		}
		
		//PV2 30 - Handling CWE DataType Transformations - The first 6 components are mapped to the CE datatype. If all of these fields are empty, meaning there is no coded data, map CWE.9-Original Text to CWE.2
		var pv2_30 = msg[&apos;PV2&apos;][&apos;PV2.30&apos;][&apos;PV2.30.1&apos;] + &quot;^&quot; + 
					 msg[&apos;PV2&apos;][&apos;PV2.30&apos;][&apos;PV2.30.2&apos;] + &quot;^&quot; + 
					 msg[&apos;PV2&apos;][&apos;PV2.30&apos;][&apos;PV2.30.3&apos;] + &quot;^&quot; + 
			         msg[&apos;PV2&apos;][&apos;PV2.30&apos;][&apos;PV2.30.4&apos;] + &quot;^&quot; + 
					 msg[&apos;PV2&apos;][&apos;PV2.30&apos;][&apos;PV2.30.5&apos;] + &quot;^&quot; + 
                     msg[&apos;PV2&apos;][&apos;PV2.30&apos;][&apos;PV2.30.6&apos;];
		var pv2_30_9 = msg[&apos;PV2&apos;][&apos;PV2.30&apos;][&apos;PV2.30.9&apos;];
		msg[&apos;PV2&apos;][&apos;PV2.30&apos;] = &apos;&apos;;
		if (pv2_30 == &apos;^^^^^&apos;){
			pv2_30 = &apos;^&apos; + pv2_30_9 + &apos;^^^^&apos;;
		}
		msg[&apos;PV2&apos;][&apos;PV2.30&apos;] = pv2_30;
	}

	//NK1
	logger.info(&quot;Handling DataType Transformations for NK1 Segment(s)&quot;); 	
	i = 0;
	while(msg[&apos;NK1&apos;][i] != null) { 
		//NK1 2 - Handling XPN DataType Transformations - strip out the 2nd through 6th sub-components of the FamilyName in component 1, as well as removing components 9 through 14. Fields affected
		j = 0;
		while ( msg[&apos;NK1&apos;][i][&apos;NK1.2&apos;][j] != null) {
			//NK1 2.1 - FN DataType
			var nk1_2_1_List = msg[&apos;NK1&apos;][i][&apos;NK1.2&apos;][j][&apos;NK1.2.1&apos;].toString().split(&quot;&amp;&quot;);
			var count = (msg[&apos;NK1&apos;][i][&apos;NK1.2&apos;][j][&apos;NK1.2.1&apos;].toString().split(&quot;&amp;&quot;).length - 1);
			msg[&apos;NK1&apos;][i][&apos;NK1.2&apos;][j][&apos;NK1.2.1&apos;] = &apos;&apos;;
			if (count &gt;= 0){
			  msg[&apos;NK1&apos;][i][&apos;NK1.2&apos;][j][&apos;NK1.2.1&apos;] = nk1_2_1_List[0] ;
    		}	
			delete msg[&apos;NK1&apos;][i][&apos;NK1.2&apos;][j][&apos;NK1.2.9&apos;];
			delete msg[&apos;NK1&apos;][i][&apos;NK1.2&apos;][j][&apos;NK1.2.10&apos;];
			delete msg[&apos;NK1&apos;][i][&apos;NK1.2&apos;][j][&apos;NK1.2.11&apos;];
			delete msg[&apos;NK1&apos;][i][&apos;NK1.2&apos;][j][&apos;NK1.2.12&apos;];
			delete msg[&apos;NK1&apos;][i][&apos;NK1.2&apos;][j][&apos;NK1.2.13&apos;];
			delete msg[&apos;NK1&apos;][i][&apos;NK1.2&apos;][j][&apos;NK1.2.14&apos;];
			j++;
		}

		//NK1 3 - Handling CWE DataType Transformations - The first 6 components are mapped to the CE datatype. If all of these fields are empty, meaning there is no coded data, map CWE.9-Original Text to CWE.2
		var nk1_3 = msg[&apos;NK1&apos;][i][&apos;NK1.3&apos;][&apos;NK1.3.1&apos;] + &quot;^&quot; + 
					msg[&apos;NK1&apos;][i][&apos;NK1.3&apos;][&apos;NK1.3.2&apos;] + &quot;^&quot; + 
					msg[&apos;NK1&apos;][i][&apos;NK1.3&apos;][&apos;NK1.3.3&apos;] + &quot;^&quot; + 
			        msg[&apos;NK1&apos;][i][&apos;NK1.3&apos;][&apos;NK1.3.4&apos;] + &quot;^&quot; + 
					msg[&apos;NK1&apos;][i][&apos;NK1.3&apos;][&apos;NK1.3.5&apos;] + &quot;^&quot; + 
                    msg[&apos;NK1&apos;][i][&apos;NK1.3&apos;][&apos;NK1.3.6&apos;];
		var nk1_3_9 = msg[&apos;NK1&apos;][i][&apos;NK1.3&apos;][&apos;NK1.3.9&apos;];
		msg[&apos;NK1&apos;][i][&apos;NK1.3&apos;] = &apos;&apos;;
		if (nk1_3 == &apos;^^^^^&apos;){
			nk1_3 = &apos;^&apos; + nk1_3_9 + &apos;^^^^&apos;;
		}
		msg[&apos;NK1&apos;][i][&apos;NK1.3&apos;] = nk1_3;

		//NK1 4 - Handling XAD DataType Transformations - strip out the 2nd through 3rd sub-components of the Street Address in component 1 as well as removing components 12 through 14.
		j = 0;
		while ( msg[&apos;NK1&apos;][i][&apos;NK1.4&apos;][j] != null) {
			//NK1 4.1 - SAD DataType
			var nk1_4_1_List = msg[&apos;NK1&apos;][i][&apos;NK1.4&apos;][j][&apos;NK1.4.1&apos;].toString().split(&quot;&amp;&quot;);
			var count = (msg[&apos;NK1&apos;][i][&apos;NK1.4&apos;][j][&apos;NK1.4.1&apos;].toString().split(&quot;&amp;&quot;).length - 1);
			msg[&apos;NK1&apos;][i][&apos;NK1.4&apos;][j][&apos;NK1.4.1&apos;] = &apos;&apos;;
			if (count &gt;= 0){
			  msg[&apos;NK1&apos;][i][&apos;NK1.4&apos;][j][&apos;NK1.4.1&apos;] = nk1_4_1_List[0] ;
    		}		
			delete msg[&apos;NK1&apos;][i][&apos;NK1.4&apos;][j][&apos;NK1.4.12&apos;];
			delete msg[&apos;NK1&apos;][i][&apos;NK1.4&apos;][j][&apos;NK1.4.13&apos;];
			delete msg[&apos;NK1&apos;][i][&apos;NK1.4&apos;][j][&apos;NK1.4.14&apos;];
			j++;	
		}
		i++;
	}

	//ORC
	logger.info(&quot;Handling DataType Transformations for ORC Segment&quot;);
	if (msg[&apos;ORC&apos;].length() &gt; 0){					
		//ORC 21 - Handling XON DataType Transformations - Removing component 10
		j = 0;
		while ( msg[&apos;ORC&apos;][&apos;ORC.21&apos;][j] != null) {
			delete msg[&apos;ORC&apos;][&apos;ORC.21&apos;][j][&apos;ORC.21.10&apos;];
			j++;
		}

		//ORC 22 - Handling XAD DataType Transformations - strip out the 2nd through 3rd sub-components of the Street Address in component 1 as well as removing components 12 through 14.		
		//ORC 22.1 - SAD DataType
		j = 0;
		while ( msg[&apos;ORC&apos;][&apos;ORC.22&apos;][j] != null) {
			var orc_22_1_List = msg[&apos;ORC&apos;][&apos;ORC.22&apos;][j][&apos;ORC.22.1&apos;].toString().split(&quot;&amp;&quot;);
			var count = (msg[&apos;ORC&apos;][&apos;ORC.22&apos;][j][&apos;ORC.22.1&apos;].toString().split(&quot;&amp;&quot;).length - 1);
			msg[&apos;ORC&apos;][&apos;ORC.22&apos;][j][&apos;ORC.22.1&apos;] = &apos;&apos;;
			if (count &gt;= 0){
			  msg[&apos;ORC&apos;][&apos;ORC.22&apos;][j][&apos;ORC.22.1&apos;]= orc_22_1_List[0] ;
    		}
			delete msg[&apos;ORC&apos;][&apos;ORC.22&apos;][j][&apos;ORC.22.12&apos;];
			delete msg[&apos;ORC&apos;][&apos;ORC.22&apos;][j][&apos;ORC.22.13&apos;];
			delete msg[&apos;ORC&apos;][&apos;ORC.22&apos;][j][&apos;ORC.22.14&apos;];
			j++;
		}

		//ORC 24
		//ORC 24.1 - SAD DataType
		j = 0;
		while ( msg[&apos;ORC&apos;][&apos;ORC.24&apos;][j] != null) {
			var orc_24_1_List = msg[&apos;ORC&apos;][&apos;ORC.24&apos;][j][&apos;ORC.24.1&apos;].toString().split(&quot;&amp;&quot;);
			var count = (msg[&apos;ORC&apos;][&apos;ORC.24&apos;][j][&apos;ORC.24.1&apos;].toString().split(&quot;&amp;&quot;).length - 1);
			msg[&apos;ORC&apos;][&apos;ORC.24&apos;][j][&apos;ORC.24.1&apos;] = &apos;&apos;;
			if (count &gt;= 0){
			  msg[&apos;ORC&apos;][&apos;ORC.24&apos;][j][&apos;ORC.24.1&apos;]= orc_24_1_List[0] ;
	    	}		
			delete msg[&apos;ORC&apos;][&apos;ORC.24&apos;][j][&apos;ORC.24.12&apos;];
			delete msg[&apos;ORC&apos;][&apos;ORC.24&apos;][j][&apos;ORC.24.13&apos;];
			delete msg[&apos;ORC&apos;][&apos;ORC.24&apos;][j][&apos;ORC.24.14&apos;];
			j++;
		}

	}
 
	//OBR
	logger.info(&quot;Handling DataType Transformations for OBR Segment(s)&quot;);
	i=0;
	while(msg[&apos;OBR&apos;][i] != null) { 
		//OBR 4 - Handling CWE DataType Transformations - The first 6 components are mapped to the CE datatype. If all of these fields are empty, meaning there is no coded data, map CWE.9-Original Text to CWE.2
		var obr_4 = msg[&apos;OBR&apos;][i][&apos;OBR.4&apos;][&apos;OBR.4.1&apos;] + &quot;^&quot; + 
					msg[&apos;OBR&apos;][i][&apos;OBR.4&apos;][&apos;OBR.4.2&apos;] + &quot;^&quot; + 
					msg[&apos;OBR&apos;][i][&apos;OBR.4&apos;][&apos;OBR.4.3&apos;] + &quot;^&quot; + 
			        msg[&apos;OBR&apos;][i][&apos;OBR.4&apos;][&apos;OBR.4.4&apos;] + &quot;^&quot; + 
					msg[&apos;OBR&apos;][i][&apos;OBR.4&apos;][&apos;OBR.4.5&apos;] + &quot;^&quot; + 
                    msg[&apos;OBR&apos;][i][&apos;OBR.4&apos;][&apos;OBR.4.6&apos;];
		var obr_4_9 = msg[&apos;OBR&apos;][i][&apos;OBR.4&apos;][&apos;OBR.4.9&apos;];
		msg[&apos;OBR&apos;][i][&apos;OBR.4&apos;] = &apos;&apos;;
		if (obr_4 == &apos;^^^^^&apos;){
			obr_4 = &apos;^&apos; + obr_4_9 + &apos;^^^^&apos;;
		}
		msg[&apos;OBR&apos;][i][&apos;OBR.4&apos;] = obr_4;
	
		//OBR 10 - Handling XCN DataType Transformations - strip out the 2nd through 6th sub-components of the FamilyName in component 2, as well as removing components 16 through 23.
		j = 0;
		while (msg[&apos;OBR&apos;][i][&apos;OBR.10&apos;][j] != null){
			//OBR 10.2 - FN DataType
			var obr_10_2_List = msg[&apos;OBR&apos;][i][&apos;OBR.10&apos;][j][&apos;OBR.10.2&apos;].toString().split(&quot;&amp;&quot;);
			var count = (msg[&apos;OBR&apos;][i][&apos;OBR.10&apos;][j][&apos;OBR.10.2&apos;].toString().split(&quot;&amp;&quot;).length - 1);
			msg[&apos;OBR&apos;][i][&apos;OBR.10&apos;][j][&apos;OBR.10.2&apos;] = &apos;&apos;;
			if (count &gt;= 0){
			  msg[&apos;OBR&apos;][i][&apos;OBR.10&apos;][j][&apos;OBR.10.2&apos;] = obr_10_2_List[0] ;
    		}
			delete msg[&apos;OBR&apos;][i][&apos;OBR.10&apos;][j][&apos;OBR.10.16&apos;];
			delete msg[&apos;OBR&apos;][i][&apos;OBR.10&apos;][j][&apos;OBR.10.17&apos;];
			delete msg[&apos;OBR&apos;][i][&apos;OBR.10&apos;][j][&apos;OBR.10.18&apos;];
			delete msg[&apos;OBR&apos;][i][&apos;OBR.10&apos;][j][&apos;OBR.10.19&apos;];
			delete msg[&apos;OBR&apos;][i][&apos;OBR.10&apos;][j][&apos;OBR.10.20&apos;];
			delete msg[&apos;OBR&apos;][i][&apos;OBR.10&apos;][j][&apos;OBR.10.21&apos;];
			delete msg[&apos;OBR&apos;][i][&apos;OBR.10&apos;][j][&apos;OBR.10.22&apos;];
			delete msg[&apos;OBR&apos;][i][&apos;OBR.10&apos;][j][&apos;OBR.10.23&apos;];
			j++;
		}
	
		//OBR 16 - Handling XCN DataType Transformations - strip out the 2nd through 6th sub-components of the FamilyName in component 2, as well as removing components 16 through 23.
		j = 0;
		while (msg[&apos;OBR&apos;][i][&apos;OBR.16&apos;][j] != null){
			//OBR 16.2 - FN DataType
			var obr_16_2_List = msg[&apos;OBR&apos;][i][&apos;OBR.16&apos;][j][&apos;OBR.16.2&apos;].toString().split(&quot;&amp;&quot;);
			var count = (msg[&apos;OBR&apos;][i][&apos;OBR.16&apos;][j][&apos;OBR.16.2&apos;].toString().split(&quot;&amp;&quot;).length - 1);
			msg[&apos;OBR&apos;][i][&apos;OBR.16&apos;][j][&apos;OBR.16.2&apos;] = &apos;&apos;;
			if (count &gt;= 0){
			  msg[&apos;OBR&apos;][i][&apos;OBR.16&apos;][j][&apos;OBR.16.2&apos;] = obr_16_2_List[0] ;
    		}
			delete msg[&apos;OBR&apos;][i][&apos;OBR.16&apos;][j][&apos;OBR.16.16&apos;];
			delete msg[&apos;OBR&apos;][i][&apos;OBR.16&apos;][j][&apos;OBR.16.17&apos;];
			delete msg[&apos;OBR&apos;][i][&apos;OBR.16&apos;][j][&apos;OBR.16.18&apos;];
			delete msg[&apos;OBR&apos;][i][&apos;OBR.16&apos;][j][&apos;OBR.16.19&apos;];
			delete msg[&apos;OBR&apos;][i][&apos;OBR.16&apos;][j][&apos;OBR.16.20&apos;];
			delete msg[&apos;OBR&apos;][i][&apos;OBR.16&apos;][j][&apos;OBR.16.21&apos;];
			delete msg[&apos;OBR&apos;][i][&apos;OBR.16&apos;][j][&apos;OBR.16.22&apos;];
			delete msg[&apos;OBR&apos;][i][&apos;OBR.16&apos;][j][&apos;OBR.16.23&apos;];
			j++;
		}

		//OBR 28 - Handling XCN DataType Transformations - strip out the 2nd through 6th sub-components of the FamilyName in component 2, as well as removing components 16 through 23.
		j = 0;
		while (msg[&apos;OBR&apos;][i][&apos;OBR.28&apos;][j] != null){
			//OBR 28.2 - FN DataType
			var obr_28_2_List = msg[&apos;OBR&apos;][i][&apos;OBR.28&apos;][j][&apos;OBR.28.2&apos;].toString().split(&quot;&amp;&quot;);
			var count = (msg[&apos;OBR&apos;][i][&apos;OBR.28&apos;][j][&apos;OBR.28.2&apos;].toString().split(&quot;&amp;&quot;).length - 1);
			msg[&apos;OBR&apos;][i][&apos;OBR.28&apos;][j][&apos;OBR.28.2&apos;] = &apos;&apos;;
			if (count &gt;= 0){
			  msg[&apos;OBR&apos;][i][&apos;OBR.28&apos;][j][&apos;OBR.28.2&apos;] = obr_28_2_List[0] ;
    		}
			delete msg[&apos;OBR&apos;][i][&apos;OBR.28&apos;][j][&apos;OBR.28.16&apos;];
			delete msg[&apos;OBR&apos;][i][&apos;OBR.28&apos;][j][&apos;OBR.28.17&apos;];
			delete msg[&apos;OBR&apos;][i][&apos;OBR.28&apos;][j][&apos;OBR.28.18&apos;];
			delete msg[&apos;OBR&apos;][i][&apos;OBR.28&apos;][j][&apos;OBR.28.19&apos;];
			delete msg[&apos;OBR&apos;][i][&apos;OBR.28&apos;][j][&apos;OBR.28.20&apos;];
			delete msg[&apos;OBR&apos;][i][&apos;OBR.28&apos;][j][&apos;OBR.28.21&apos;];
			delete msg[&apos;OBR&apos;][i][&apos;OBR.28&apos;][j][&apos;OBR.28.22&apos;];
			delete msg[&apos;OBR&apos;][i][&apos;OBR.28&apos;][j][&apos;OBR.28.23&apos;];
			j++;
		}


		//OBR 31 - Handling CWE DataType Transformations - The first 6 components are mapped to the CE datatype. If all of these fields are empty, meaning there is no coded data, map CWE.9-Original Text to CWE.2
		j = 0;
		while (msg[&apos;OBR&apos;][i][&apos;OBR.31&apos;][j] != null){
			var obr_31 = msg[&apos;OBR&apos;][i][&apos;OBR.31&apos;][j][&apos;OBR.31.1&apos;] + &quot;^&quot; + 
					 msg[&apos;OBR&apos;][i][&apos;OBR.31&apos;][j][&apos;OBR.31.2&apos;] + &quot;^&quot; + 
					 msg[&apos;OBR&apos;][i][&apos;OBR.31&apos;][j][&apos;OBR.31.3&apos;] + &quot;^&quot; + 
			         msg[&apos;OBR&apos;][i][&apos;OBR.31&apos;][j][&apos;OBR.31.4&apos;] + &quot;^&quot; + 
					 msg[&apos;OBR&apos;][i][&apos;OBR.31&apos;][j][&apos;OBR.31.5&apos;] + &quot;^&quot; + 
                     msg[&apos;OBR&apos;][i][&apos;OBR.31&apos;][j][&apos;OBR.31.6&apos;];
			var obr_31_9 = msg[&apos;OBR&apos;][i][&apos;OBR.31&apos;][j][&apos;OBR.31.9&apos;];
			msg[&apos;OBR&apos;][i][&apos;OBR.31&apos;][j] = &apos;&apos;;
			if (obr_31 == &apos;^^^^^&apos;){
				obr_31 = &apos;^&apos; + obr_31_9 + &apos;^^^^&apos;;
			}
			msg[&apos;OBR&apos;][i][&apos;OBR.31&apos;][j] = obr_31;
			j ++;
		}

		i++;
	}

	//OBX
	logger.info(&quot;Handling DataType Transformations for OBX Segment(s)&quot;);
	i = 0;
	while(msg[&apos;OBX&apos;][i] != null) {
		//OBX 3 - Handling CWE DataType Transformations - The first 6 components are mapped to the CE datatype. If all of these fields are empty, meaning there is no coded data, map CWE.9-Original Text to CWE.2
		var obx_3 = msg[&apos;OBX&apos;][i][&apos;OBX.3&apos;][&apos;OBX.3.1&apos;] + &quot;^&quot; + 
					msg[&apos;OBX&apos;][i][&apos;OBX.3&apos;][&apos;OBX.3.2&apos;] + &quot;^&quot; + 
					msg[&apos;OBX&apos;][i][&apos;OBX.3&apos;][&apos;OBX.3.3&apos;] + &quot;^&quot; + 
			        msg[&apos;OBX&apos;][i][&apos;OBX.3&apos;][&apos;OBX.3.4&apos;] + &quot;^&quot; + 
					msg[&apos;OBX&apos;][i][&apos;OBX.3&apos;][&apos;OBX.3.5&apos;] + &quot;^&quot; + 
                    msg[&apos;OBX&apos;][i][&apos;OBX.3&apos;][&apos;OBX.3.6&apos;];
		var obx_3_9 = msg[&apos;OBX&apos;][i][&apos;OBX.3&apos;][&apos;OBX.3.9&apos;];
		msg[&apos;OBX&apos;][i][&apos;OBX.3&apos;] = &apos;&apos;;
		if (obx_3 == &apos;^^^^^&apos;){
			obx_3 = &apos;^&apos; + obx_3_9 + &apos;^^^^&apos;;
		}
		msg[&apos;OBX&apos;][i][&apos;OBX.3&apos;] = obx_3;
		
		//OBX 6 - Handling CWE DataType Transformations - The first 6 components are mapped to the CE datatype. If all of these fields are empty, meaning there is no coded data, map CWE.9-Original Text to CWE.2
		var obx_6 = msg[&apos;OBX&apos;][i][&apos;OBX.6&apos;][&apos;OBX.6.1&apos;] + &quot;^&quot; + 
					msg[&apos;OBX&apos;][i][&apos;OBX.6&apos;][&apos;OBX.6.2&apos;] + &quot;^&quot; + 
					msg[&apos;OBX&apos;][i][&apos;OBX.6&apos;][&apos;OBX.6.3&apos;] + &quot;^&quot; + 
			        msg[&apos;OBX&apos;][i][&apos;OBX.6&apos;][&apos;OBX.6.4&apos;] + &quot;^&quot; + 
					msg[&apos;OBX&apos;][i][&apos;OBX.6&apos;][&apos;OBX.6.5&apos;] + &quot;^&quot; + 
                    msg[&apos;OBX&apos;][i][&apos;OBX.6&apos;][&apos;OBX.6.6&apos;];
		var obx_6_9 = msg[&apos;OBX&apos;][i][&apos;OBX.6&apos;][&apos;OBX.6.9&apos;];
		msg[&apos;OBX&apos;][i][&apos;OBX.6&apos;] = &apos;&apos;;
		if (obx_6 == &apos;^^^^^&apos;){
			obx_6 = &apos;^&apos; + obx_6_9 + &apos;^^^^&apos;;
		}
		msg[&apos;OBX&apos;][i][&apos;OBX.6&apos;] = obx_6;

		
		//OBX 15 - Handling CWE DataType Transformations - The first 6 components are mapped to the CE datatype. If all of these fields are empty, meaning there is no coded data, map CWE.9-Original Text to CWE.2
		var obx_15 = msg[&apos;OBX&apos;][i][&apos;OBX.15&apos;][&apos;OBX.15.1&apos;] + &quot;^&quot; + 
 					 msg[&apos;OBX&apos;][i][&apos;OBX.15&apos;][&apos;OBX.15.2&apos;] + &quot;^&quot; + 
					 msg[&apos;OBX&apos;][i][&apos;OBX.15&apos;][&apos;OBX.15.3&apos;] + &quot;^&quot; + 
			         msg[&apos;OBX&apos;][i][&apos;OBX.15&apos;][&apos;OBX.15.4&apos;] + &quot;^&quot; + 
					 msg[&apos;OBX&apos;][i][&apos;OBX.15&apos;][&apos;OBX.15.5&apos;] + &quot;^&quot; + 
                     msg[&apos;OBX&apos;][i][&apos;OBX.15&apos;][&apos;OBX.15.6&apos;];
		var obx_15_9 = msg[&apos;OBX&apos;][i][&apos;OBX.15&apos;][&apos;OBX.15.9&apos;];
		msg[&apos;OBX&apos;][i][&apos;OBX.15&apos;] = &apos;&apos;;
		if (obx_15 == &apos;^^^^^&apos;){
			obx_15 = &apos;^&apos; + obx_15_9 + &apos;^^^^&apos;;
		}
		msg[&apos;OBX&apos;][i][&apos;OBX.15&apos;] = obx_15;

		//OBX 16 - Handling XCN DataType Transformations - strip out the 2nd through 6th sub-components of the FamilyName in component 2, as well as removing components 16 through 23.
		j = 0;
		while (msg[&apos;OBX&apos;][i][&apos;OBX.16&apos;][j] != null){
			//OBX 16.2 - FN DataType
			var obx_16_2_List = msg[&apos;OBX&apos;][i][&apos;OBX.16&apos;][j][&apos;OBX.16.2&apos;].toString().split(&quot;&amp;&quot;);
			var count = (msg[&apos;OBX&apos;][i][&apos;OBX.16&apos;][j][&apos;OBX.16.2&apos;].toString().split(&quot;&amp;&quot;).length - 1);
			msg[&apos;OBX&apos;][i][&apos;OBX.16&apos;][j][&apos;OBX.16.2&apos;] = &apos;&apos;;
			if (count &gt;= 0){
			  msg[&apos;OBX&apos;][i][&apos;OBX.16&apos;][j][&apos;OBX.16.2&apos;] = obx_16_2_List[0] ;
	    	}
			delete msg[&apos;OBX&apos;][i][&apos;OBX.16&apos;][j][&apos;OBX.16.16&apos;];
			delete msg[&apos;OBX&apos;][i][&apos;OBX.16&apos;][j][&apos;OBX.16.17&apos;];
			delete msg[&apos;OBX&apos;][i][&apos;OBX.16&apos;][j][&apos;OBX.16.18&apos;];
			delete msg[&apos;OBX&apos;][i][&apos;OBX.16&apos;][j][&apos;OBX.16.19&apos;];
			delete msg[&apos;OBX&apos;][i][&apos;OBX.16&apos;][j][&apos;OBX.16.20&apos;];
			delete msg[&apos;OBX&apos;][i][&apos;OBX.16&apos;][j][&apos;OBX.16.21&apos;];
			delete msg[&apos;OBX&apos;][i][&apos;OBX.16&apos;][j][&apos;OBX.16.22&apos;];
			delete msg[&apos;OBX&apos;][i][&apos;OBX.16&apos;][j][&apos;OBX.16.23&apos;];
			j++;
		}

		//OBX 17 - Handling CWE DataType Transformations - The first 6 components are mapped to the CE datatype. If all of these fields are empty, meaning there is no coded data, map CWE.9-Original Text to CWE.2
		j = 0;
		while (msg[&apos;OBX&apos;][i][&apos;OBX.17&apos;][j] != null){
			var obx_17 = msg[&apos;OBX&apos;][i][&apos;OBX.17&apos;][j][&apos;OBX.17.1&apos;] + &quot;^&quot; + 
 						 msg[&apos;OBX&apos;][i][&apos;OBX.17&apos;][j][&apos;OBX.17.2&apos;] + &quot;^&quot; + 
						 msg[&apos;OBX&apos;][i][&apos;OBX.17&apos;][j][&apos;OBX.17.3&apos;] + &quot;^&quot; +
			        	 msg[&apos;OBX&apos;][i][&apos;OBX.17&apos;][j][&apos;OBX.17.4&apos;] + &quot;^&quot; +
						 msg[&apos;OBX&apos;][i][&apos;OBX.17&apos;][j][&apos;OBX.17.5&apos;] + &quot;^&quot; +
            	         msg[&apos;OBX&apos;][i][&apos;OBX.17&apos;][j][&apos;OBX.17.6&apos;];
			var obx_17_9 = msg[&apos;OBX&apos;][i][&apos;OBX.17&apos;][j][&apos;OBX.17.9&apos;];
			msg[&apos;OBX&apos;][i][&apos;OBX.17&apos;][j] = &apos;&apos;;
			if (obx_17 == &apos;^^^^^&apos;){
				obx_17 = &apos;^&apos; + msg[&apos;OBX&apos;][i][&apos;OBX.17&apos;][j][&apos;OBX.17.9&apos;] + &apos;^^^^&apos;;
			}
			msg[&apos;OBX&apos;][i][&apos;OBX.17&apos;][j] = obx_17;
			j++;
		}

		i++;
	}

	//NTE
	logger.info(&quot;Handling DataType Transformations for NTE Segment(s)&quot;);	 
	i = 0;
	while(msg[&apos;NTE&apos;][i] != null) {
		//NTE 4 - Handling CWE DataType Transformations - The first 6 components are mapped to the CE datatype. If all of these fields are empty, meaning there is no coded data, map CWE.9-Original Text to CWE.2
		var nte_4 =  msg[&apos;NTE&apos;][i][&apos;NTE.4&apos;][&apos;NTE.4.1&apos;] + &quot;^&quot; +
					 msg[&apos;NTE&apos;][i][&apos;NTE.4&apos;][&apos;NTE.4.2&apos;] + &quot;^&quot; +	
					 msg[&apos;NTE&apos;][i][&apos;NTE.4&apos;][&apos;NTE.4.3&apos;] + &quot;^&quot; +	
					 msg[&apos;NTE&apos;][i][&apos;NTE.4&apos;][&apos;NTE.4.4&apos;] + &quot;^&quot; +	
					 msg[&apos;NTE&apos;][i][&apos;NTE.4&apos;][&apos;NTE.4.5&apos;] + &quot;^&quot; +	
					 msg[&apos;NTE&apos;][i][&apos;NTE.4&apos;][&apos;NTE.4.6&apos;];	
		var nte_4_9 = msg[&apos;NTE&apos;][i][&apos;NTE.4&apos;][&apos;NTE.4.9&apos;];
		msg[&apos;NTE&apos;][i][&apos;NTE.4&apos;] = &apos;&apos;;
		if (nte_4 == &apos;^^^^^&apos;){
			nte_4 = &apos;^&apos; + nte_4_9 + &apos;^^^^&apos;;
		}
		if (nte_4 == &apos;^^^^^&apos;){
			delete msg[&apos;NTE&apos;][i][&apos;NTE.4&apos;];		 
		}else{
			msg[&apos;NTE&apos;][i][&apos;NTE.4&apos;] = nte_4;
		}
		i++;
	}
  }
}

catch(e)
{
  logger.error(&quot;Error in Store transformed message to file Transformer: ORU R01 2.5.1 to 2.3.1 Transformation: &quot; + e.message);
  channelMap.put(&apos;componentErrors&apos;,  $(&apos;componentErrors&apos;) + &quot;Store transformed message to file Transformer: ORU R01 2.5.1 to 2.3.1 Transformation: \n&quot; + e.message + &quot; |\n&quot;);
}</script>
            <type>JavaScript</type>
            <data class="map">
              <entry>
                <string>Script</string>
                <string>try
{

  // 2.5.1 to 2.3.1 ORU R01-specific MSH transformations
  if ( ($(&apos;translateToVersion&apos;) == &apos;2.3.1&apos;) &amp;&amp;
       ($(&apos;msgType&apos;) == &apos;ORU&apos;) &amp;&amp;
       ($(&apos;msgTriggerEvent&apos;) == &apos;R01&apos;) &amp;&amp;
       ($(&apos;msgHL7VersionID&apos;) == &apos;2.5.1&apos;) )
  {

    logger.info(&quot;Handling DataType Transformations for 2.5.1 to 2.3.1..&quot;);
	
	//MSH
	logger.info(&quot;Handling DataType Transformation for MSH Segment.&quot;);
	if (msg[&apos;MSH&apos;].length() &gt; 0){
		//MSH 19 - Handling CWE DataType Transformations - The first 6 components are mapped to the CE datatype. If all of these fields are empty, meaning there is no coded data, map CWE.9-Original Text to CWE.2
		var msh_19 = msg[&apos;MSH&apos;][&apos;MSH.19&apos;][&apos;MSH.19.1&apos;] + &quot;^&quot; + 
					 msg[&apos;MSH&apos;][&apos;MSH.19&apos;][&apos;MSH.19.2&apos;] + &quot;^&quot; + 
					 msg[&apos;MSH&apos;][&apos;MSH.19&apos;][&apos;MSH.19.3&apos;] + &quot;^&quot; + 
			         msg[&apos;MSH&apos;][&apos;MSH.19&apos;][&apos;MSH.19.4&apos;] + &quot;^&quot; + 
					 msg[&apos;MSH&apos;][&apos;MSH.19&apos;][&apos;MSH.19.5&apos;] + &quot;^&quot; + 
					 msg[&apos;MSH&apos;][&apos;MSH.19&apos;][&apos;MSH.19.6&apos;];	
		var msh_19_9 = msg[&apos;MSH&apos;][&apos;MSH.19&apos;][&apos;MSH.19.9&apos;];
		msg[&apos;MSH&apos;][&apos;MSH.19&apos;] = &apos;&apos;;	
		if (msh_19 == &apos;^^^^^&apos;){
			msh_19 = &apos;^&apos; + msh_19_9 + &apos;^^^^&apos;;
		}
		msg[&apos;MSH&apos;][&apos;MSH.19&apos;] = msh_19;
	} 

	//PID
	logger.info(&quot;Handling DataType Transformations for PID Segment&quot;);
	if (msg[&apos;PID&apos;].length() &gt; 0){
		//PID 2 - Handling CX DataType Transformations - 7 through 10 components are not mapped
		delete msg[&apos;PID&apos;][&apos;PID.2&apos;][&apos;PID.2.7&apos;];
		delete msg[&apos;PID&apos;][&apos;PID.2&apos;][&apos;PID.2.8&apos;];
		delete msg[&apos;PID&apos;][&apos;PID.2&apos;][&apos;PID.2.9&apos;];
		delete msg[&apos;PID&apos;][&apos;PID.2&apos;][&apos;PID.2.10&apos;];
	
		//PID 3 - Handling CX DataType Transformations - 7 through 10 components are not mapped
		j = 0;
		while (msg[&apos;PID&apos;][&apos;PID.3&apos;][j] != null){
			delete msg[&apos;PID&apos;][&apos;PID.3&apos;][j][&apos;PID.3.7&apos;];
			delete msg[&apos;PID&apos;][&apos;PID.3&apos;][j][&apos;PID.3.8&apos;];
			delete msg[&apos;PID&apos;][&apos;PID.3&apos;][j][&apos;PID.3.9&apos;];
			delete msg[&apos;PID&apos;][&apos;PID.3&apos;][j][&apos;PID.3.10&apos;];
			j++;
		}

		//PID 4 - Handling CX DataType Transformations - 7 through 10 components are not mapped
		delete msg[&apos;PID&apos;][&apos;PID.4&apos;][&apos;PID.4.7&apos;];
		delete msg[&apos;PID&apos;][&apos;PID.4&apos;][&apos;PID.4.8&apos;];
		delete msg[&apos;PID&apos;][&apos;PID.4&apos;][&apos;PID.4.9&apos;];
		delete msg[&apos;PID&apos;][&apos;PID.4&apos;][&apos;PID.4.10&apos;];
		
		//PID 5 - Handling XPN DataType Transformations - strip out the 2nd through 6th sub-components of the FamilyName in component 1, as well as removing components 9 through 14. Fields affected
		//PID 5.1 - FN DataType
		j = 0;
		while (msg[&apos;PID&apos;][&apos;PID.5&apos;][j] != null){
			var pid_5_1_List = msg[&apos;PID&apos;][&apos;PID.5&apos;][j][&apos;PID.5.1&apos;].toString().split(&quot;&amp;&quot;);
			var count = (msg[&apos;PID&apos;][&apos;PID.5&apos;][j][&apos;PID.5.1&apos;].toString().split(&quot;&amp;&quot;).length - 1);
			msg[&apos;PID&apos;][&apos;PID.5&apos;][j][&apos;PID.5.1&apos;] = &apos;&apos;;
			if (count &gt;= 0){
			  msg[&apos;PID&apos;][&apos;PID.5&apos;][j][&apos;PID.5.1&apos;] = pid_5_1_List[0] ;
    		}
			delete msg[&apos;PID&apos;][&apos;PID.5&apos;][j][&apos;PID.5.9&apos;];
			delete msg[&apos;PID&apos;][&apos;PID.5&apos;][j][&apos;PID.5.10&apos;];
			delete msg[&apos;PID&apos;][&apos;PID.5&apos;][j][&apos;PID.5.11&apos;];
			delete msg[&apos;PID&apos;][&apos;PID.5&apos;][j][&apos;PID.5.12&apos;];
			delete msg[&apos;PID&apos;][&apos;PID.5&apos;][j][&apos;PID.5.13&apos;];
			delete msg[&apos;PID&apos;][&apos;PID.5&apos;][j][&apos;PID.5.14&apos;];
			j++;
		}
	
		//PID 6 - Handling XPN DataType Transformations - strip out the 2nd through 6th sub-components of the FamilyName in component 1, as well as removing components 9 through 14. Fields affected
		//PID 6.1 - FN DataType
		var pid_6_1_List = msg[&apos;PID&apos;][&apos;PID.6&apos;][&apos;PID.6.1&apos;].toString().split(&quot;&amp;&quot;);
		var count = (msg[&apos;PID&apos;][&apos;PID.6&apos;][&apos;PID.6.1&apos;].toString().split(&quot;&amp;&quot;).length - 1);
		msg[&apos;PID&apos;][&apos;PID.6&apos;][&apos;PID.6.1&apos;] = &apos;&apos;;
		if (count &gt;= 0){
		  msg[&apos;PID&apos;][&apos;PID.6&apos;][&apos;PID.6.1&apos;] = pid_6_1_List[0] ;
    	}
		delete msg[&apos;PID&apos;][&apos;PID.6&apos;][&apos;PID.6.9&apos;];
		delete msg[&apos;PID&apos;][&apos;PID.6&apos;][&apos;PID.6.10&apos;];
		delete msg[&apos;PID&apos;][&apos;PID.6&apos;][&apos;PID.6.11&apos;];
		delete msg[&apos;PID&apos;][&apos;PID.6&apos;][&apos;PID.6.12&apos;];
		delete msg[&apos;PID&apos;][&apos;PID.6&apos;][&apos;PID.6.13&apos;];
		delete msg[&apos;PID&apos;][&apos;PID.6&apos;][&apos;PID.6.14&apos;];

		//PID 9 - Handling XPN DataType Transformations - strip out the 2nd through 6th sub-components of the FamilyName in component 1, as well as removing components 9 through 14. Fields affected
		//PID 9.1 - FN DataType
		var pid_9_1_List = msg[&apos;PID&apos;][&apos;PID.9&apos;][&apos;PID.9.1&apos;].toString().split(&quot;&amp;&quot;);
		var count = (msg[&apos;PID&apos;][&apos;PID.9&apos;][&apos;PID.9.1&apos;].toString().split(&quot;&amp;&quot;).length - 1);
		msg[&apos;PID&apos;][&apos;PID.9&apos;][&apos;PID.9.1&apos;] = &apos;&apos;;
		if (count &gt;= 0){
		  msg[&apos;PID&apos;][&apos;PID.9&apos;][&apos;PID.9.1&apos;] = pid_9_1_List[0] ;
    	}
		delete msg[&apos;PID&apos;][&apos;PID.9&apos;][&apos;PID.9.9&apos;];
		delete msg[&apos;PID&apos;][&apos;PID.9&apos;][&apos;PID.9.10&apos;];
		delete msg[&apos;PID&apos;][&apos;PID.9&apos;][&apos;PID.9.11&apos;];
		delete msg[&apos;PID&apos;][&apos;PID.9&apos;][&apos;PID.9.12&apos;];
		delete msg[&apos;PID&apos;][&apos;PID.9&apos;][&apos;PID.9.13&apos;];
		delete msg[&apos;PID&apos;][&apos;PID.9&apos;][&apos;PID.9.14&apos;];

		//PID 10 - Handling CWE DataType Transformations - The first 6 components are mapped to the CE datatype. If all of these fields are empty, meaning there is no coded data, map CWE.9-Original Text to CWE.2
		j = 0;
		while (msg[&apos;PID&apos;][&apos;PID.10&apos;][j] != null){
			var pid_10 = msg[&apos;PID&apos;][&apos;PID.10&apos;][j][&apos;PID.10.1&apos;] + &quot;^&quot; + 
					 msg[&apos;PID&apos;][&apos;PID.10&apos;][j][&apos;PID.10.2&apos;] + &quot;^&quot; + 
					 msg[&apos;PID&apos;][&apos;PID.10&apos;][j][&apos;PID.10.3&apos;] + &quot;^&quot; + 
			         msg[&apos;PID&apos;][&apos;PID.10&apos;][j][&apos;PID.10.4&apos;] + &quot;^&quot; + 
					 msg[&apos;PID&apos;][&apos;PID.10&apos;][j][&apos;PID.10.5&apos;] + &quot;^&quot; + 
                     msg[&apos;PID&apos;][&apos;PID.10&apos;][j][&apos;PID.10.6&apos;];
			var pid_10_9 = msg[&apos;PID&apos;][&apos;PID.10&apos;][j][&apos;PID.10.9&apos;];
			msg[&apos;PID&apos;][&apos;PID.10&apos;][j] = &apos;&apos;;
			if (pid_10 == &apos;^^^^^&apos;){
				pid_10 = &apos;^&apos; + pid_10_9 + &apos;^^^^&apos;;
			}
			msg[&apos;PID&apos;][&apos;PID.10&apos;][j] = pid_10;
			j ++;
		}

		//PID 11 - Handling XAD DataType Transformations - strip out the 2nd through 3rd sub-components of the Street Address in component 1 as well as removing components 12 through 14.
		//PID 11.1 - SAD DataType
		j = 0;
		while (msg[&apos;PID&apos;][&apos;PID.11&apos;][j] != null){
			var pid_11_1_List = msg[&apos;PID&apos;][&apos;PID.11&apos;][j][&apos;PID.11.1&apos;].toString().split(&quot;&amp;&quot;);
			var count = (msg[&apos;PID&apos;][&apos;PID.11&apos;][j][&apos;PID.11.1&apos;].toString().split(&quot;&amp;&quot;).length - 1);
			msg[&apos;PID&apos;][&apos;PID.11&apos;][j][&apos;PID.11.1&apos;] = &apos;&apos;;
			if (count &gt;= 0){
			  msg[&apos;PID&apos;][&apos;PID.11&apos;][j][&apos;PID.11.1&apos;] = pid_11_1_List[0] ;
    		}
			delete msg[&apos;PID&apos;][&apos;PID.11&apos;][j][&apos;PID.11.12&apos;];
			delete msg[&apos;PID&apos;][&apos;PID.11&apos;][j][&apos;PID.11.13&apos;];
			delete msg[&apos;PID&apos;][&apos;PID.11&apos;][j][&apos;PID.11.14&apos;];
			j++;
		}	

		//PID 15 - Handling CWE DataType Transformations - The first 6 components are mapped to the CE datatype. If all of these fields are empty, meaning there is no coded data, map CWE.9-Original Text to CWE.2
		var pid_15 = msg[&apos;PID&apos;][&apos;PID.15&apos;][&apos;PID.15.1&apos;] + &quot;^&quot; + 
					 msg[&apos;PID&apos;][&apos;PID.15&apos;][&apos;PID.15.2&apos;] + &quot;^&quot; + 
					 msg[&apos;PID&apos;][&apos;PID.15&apos;][&apos;PID.15.3&apos;] + &quot;^&quot; + 
			         msg[&apos;PID&apos;][&apos;PID.15&apos;][&apos;PID.15.4&apos;] + &quot;^&quot; + 
					 msg[&apos;PID&apos;][&apos;PID.15&apos;][&apos;PID.15.5&apos;] + &quot;^&quot; + 
                     msg[&apos;PID&apos;][&apos;PID.15&apos;][&apos;PID.15.6&apos;];
		var pid_15_9 = msg[&apos;PID&apos;][&apos;PID.15&apos;][&apos;PID.15.9&apos;];
		msg[&apos;PID&apos;][&apos;PID.15&apos;] = &apos;&apos;;
		if (pid_15 == &apos;^^^^^&apos;){
			pid_15 = &apos;^&apos; + pid_15_9 + &apos;^^^^&apos;;
		}
		msg[&apos;PID&apos;][&apos;PID.15&apos;] = pid_15;

		//PID 16 - Handling CWE DataType Transformations - The first 6 components are mapped to the CE datatype. If all of these fields are empty, meaning there is no coded data, map CWE.9-Original Text to CWE.2
		var pid_16 = msg[&apos;PID&apos;][&apos;PID.16&apos;][&apos;PID.16.1&apos;] + &quot;^&quot; + 
					 msg[&apos;PID&apos;][&apos;PID.16&apos;][&apos;PID.16.2&apos;] + &quot;^&quot; + 
					 msg[&apos;PID&apos;][&apos;PID.16&apos;][&apos;PID.16.3&apos;] + &quot;^&quot; + 
			         msg[&apos;PID&apos;][&apos;PID.16&apos;][&apos;PID.16.4&apos;] + &quot;^&quot; + 
					 msg[&apos;PID&apos;][&apos;PID.16&apos;][&apos;PID.16.5&apos;] + &quot;^&quot; + 
                     msg[&apos;PID&apos;][&apos;PID.16&apos;][&apos;PID.16.6&apos;];
		var pid_16_9 = msg[&apos;PID&apos;][&apos;PID.16&apos;][&apos;PID.16.9&apos;] ;
		msg[&apos;PID&apos;][&apos;PID.16&apos;] = &apos;&apos;;		
		if (pid_16 == &apos;^^^^^&apos;){
			pid_16 = &apos;^&apos; + pid_16_9 + &apos;^^^^&apos;;
		}
		msg[&apos;PID&apos;][&apos;PID.16&apos;] = pid_16;

		//PID 18- Handling CX DataType Transformations - 7 through 10 components are not mapped
		delete msg[&apos;PID&apos;][&apos;PID.18&apos;][&apos;PID.18.7&apos;];
		delete msg[&apos;PID&apos;][&apos;PID.18&apos;][&apos;PID.18.8&apos;];
		delete msg[&apos;PID&apos;][&apos;PID.18&apos;][&apos;PID.18.9&apos;];
		delete msg[&apos;PID&apos;][&apos;PID.18&apos;][&apos;PID.18.10&apos;];

		//PID 21 - Handling CX DataType Transformations - 7 through 10 components are not mapped
		delete msg[&apos;PID&apos;][&apos;PID.21&apos;][&apos;PID.21.7&apos;];
		delete msg[&apos;PID&apos;][&apos;PID.21&apos;][&apos;PID.21.8&apos;];
		delete msg[&apos;PID&apos;][&apos;PID.21&apos;][&apos;PID.21.9&apos;];
		delete msg[&apos;PID&apos;][&apos;PID.21&apos;][&apos;PID.21.10&apos;];

		//PID 26 - Handling CWE DataType Transformations - The first 6 components are mapped to the CE datatype. If all of these fields are empty, meaning there is no coded data, map CWE.9-Original Text to CWE.2
		j = 0;
		while (msg[&apos;PID&apos;][&apos;PID.26&apos;][j] != null){
			var pid_26 = msg[&apos;PID&apos;][&apos;PID.26&apos;][j][&apos;PID.26.1&apos;] + &quot;^&quot; + 
						 msg[&apos;PID&apos;][&apos;PID.26&apos;][j][&apos;PID.26.2&apos;] + &quot;^&quot; + 
						 msg[&apos;PID&apos;][&apos;PID.26&apos;][j][&apos;PID.26.3&apos;] + &quot;^&quot; + 
			    	     msg[&apos;PID&apos;][&apos;PID.26&apos;][j][&apos;PID.26.4&apos;] + &quot;^&quot; + 
						 msg[&apos;PID&apos;][&apos;PID.26&apos;][j][&apos;PID.26.5&apos;] + &quot;^&quot; + 
	                     msg[&apos;PID&apos;][&apos;PID.26&apos;][j][&apos;PID.26.6&apos;];
			var pid_26_9 = msg[&apos;PID&apos;][&apos;PID.26&apos;][j][&apos;PID.26.9&apos;];
			msg[&apos;PID&apos;][&apos;PID.26&apos;][j] = &apos;&apos;;
			if (pid_26 == &apos;^^^^^&apos;){
				pid_26 = &apos;^&apos; + pid_26_9 + &apos;^^^^&apos;;
			}
			msg[&apos;PID&apos;][&apos;PID.26&apos;][j] = pid_26;
			j++;
		}
		
		//PID 27 - Handling CWE DataType Transformations - The first 6 components are mapped to the CE datatype. If all of these fields are empty, meaning there is no coded data, map CWE.9-Original Text to CWE.2
		var pid_27 = msg[&apos;PID&apos;][&apos;PID.27&apos;][&apos;PID.27.1&apos;] + &quot;^&quot; + 
					 msg[&apos;PID&apos;][&apos;PID.27&apos;][&apos;PID.27.2&apos;] + &quot;^&quot; + 
					 msg[&apos;PID&apos;][&apos;PID.27&apos;][&apos;PID.27.3&apos;] + &quot;^&quot; + 
			         msg[&apos;PID&apos;][&apos;PID.27&apos;][&apos;PID.27.4&apos;] + &quot;^&quot; + 
					 msg[&apos;PID&apos;][&apos;PID.27&apos;][&apos;PID.27.5&apos;] + &quot;^&quot; + 
                     msg[&apos;PID&apos;][&apos;PID.27&apos;][&apos;PID.27.6&apos;];
		var pid_27_9 = msg[&apos;PID&apos;][&apos;PID.27&apos;][&apos;PID.27.9&apos;];
		msg[&apos;PID&apos;][&apos;PID.27&apos;] = &apos;&apos;;
		if (pid_27 == &apos;^^^^^&apos;){
			pid_27 = &apos;^&apos; + pid_27_9 + &apos;^^^^&apos;;
		}
		msg[&apos;PID&apos;][&apos;PID.27&apos;] = pid_27;

		//PID 28 - Handling CWE DataType Transformations - The first 6 components are mapped to the CE datatype. If all of these fields are empty, meaning there is no coded data, map CWE.9-Original Text to CWE.2
		var pid_28 = msg[&apos;PID&apos;][&apos;PID.28&apos;][&apos;PID.28.1&apos;] + &quot;^&quot; + 
					 msg[&apos;PID&apos;][&apos;PID.28&apos;][&apos;PID.28.2&apos;] + &quot;^&quot; + 
					 msg[&apos;PID&apos;][&apos;PID.28&apos;][&apos;PID.28.3&apos;] + &quot;^&quot; + 
			         msg[&apos;PID&apos;][&apos;PID.28&apos;][&apos;PID.28.4&apos;] + &quot;^&quot; + 
					 msg[&apos;PID&apos;][&apos;PID.28&apos;][&apos;PID.28.5&apos;] + &quot;^&quot; + 
                     msg[&apos;PID&apos;][&apos;PID.28&apos;][&apos;PID.28.6&apos;];
		var pid_28_9 = msg[&apos;PID&apos;][&apos;PID.28&apos;][&apos;PID.28.9&apos;];
		msg[&apos;PID&apos;][&apos;PID.28&apos;] =  &apos;&apos;;
		if (pid_28 == &apos;^^^^^&apos;){
			pid_28 = &apos;^&apos; + pid_28_9 + &apos;^^^^&apos;;
		}
		msg[&apos;PID&apos;][&apos;PID.28&apos;] = pid_28;
	}

	//PD1
	logger.info(&quot;Handling DataType Transformations for PD1 Segment&quot;);
	if (msg[&apos;PD1&apos;].length() &gt; 0){
		//PD1 3 - Handling XON DataType Transformations - Removing component 10
		j = 0;
		while (msg[&apos;PD1&apos;][&apos;PD1.3&apos;][j] != null){
			delete msg[&apos;PD1&apos;][&apos;PD1.3&apos;][j][&apos;PD1.3.10&apos;];
			j++;
		}

		//PD1 4 - Handling XCN DataType Transformations - strip out the 2nd through 6th sub-components of the FamilyName in component 2, as well as removing components 16 through 23.
		//PD1 4.2 - FN DataType
		j = 0;
		while (msg[&apos;PD1&apos;][&apos;PD1.4&apos;][j] != null){
			var pd1_4_2_List = msg[&apos;PD1&apos;][&apos;PD1.4&apos;][j][&apos;PD1.4.2&apos;].toString().split(&quot;&amp;&quot;);
			var count = (msg[&apos;PD1&apos;][&apos;PD1.4&apos;][j][&apos;PD1.4.2&apos;].toString().split(&quot;&amp;&quot;).length - 1);
			msg[&apos;PD1&apos;][&apos;PD1.4&apos;][j][&apos;PD1.4.2&apos;] = &apos;&apos;;
			if (count &gt;= 0){
			  msg[&apos;PD1&apos;][&apos;PD1.4&apos;][j][&apos;PD1.4.2&apos;] = pd1_4_2_List[0] ;
    		}		
			delete msg[&apos;PD1&apos;][&apos;PD1.4&apos;][j][&apos;PD1.4.16&apos;];
			delete msg[&apos;PD1&apos;][&apos;PD1.4&apos;][j][&apos;PD1.4.17&apos;];
			delete msg[&apos;PD1&apos;][&apos;PD1.4&apos;][j][&apos;PD1.4.18&apos;];
			delete msg[&apos;PD1&apos;][&apos;PD1.4&apos;][j][&apos;PD1.4.19&apos;];
			delete msg[&apos;PD1&apos;][&apos;PD1.4&apos;][j][&apos;PD1.4.20&apos;];
			delete msg[&apos;PD1&apos;][&apos;PD1.4&apos;][j][&apos;PD1.4.21&apos;];
			delete msg[&apos;PD1&apos;][&apos;PD1.4&apos;][j][&apos;PD1.4.22&apos;];
			delete msg[&apos;PD1&apos;][&apos;PD1.4&apos;][j][&apos;PD1.4.23&apos;];
			j++;
		}

		//PD1 10 - Handling CX DataType Transformations - 7 through 10 components are not mapped
		j = 0;
		while (msg[&apos;PD1&apos;][&apos;PD1.10&apos;][j] != null){
			delete msg[&apos;PD1&apos;][&apos;PD1.10&apos;][j][&apos;PD1.10.7&apos;];
			delete msg[&apos;PD1&apos;][&apos;PD1.10&apos;][j][&apos;PD1.10.8&apos;];
			delete msg[&apos;PD1&apos;][&apos;PD1.10&apos;][j][&apos;PD1.10.9&apos;];
			delete msg[&apos;PD1&apos;][&apos;PD1.10&apos;][j][&apos;PD1.10.10&apos;];
			j++;
		}

		//PD1 11 - Handling CWE DataType Transformations - The first 6 components are mapped to the CE datatype. If all of these fields are empty, meaning there is no coded data, map CWE.9-Original Text to CWE.2
		var pd1_11 = msg[&apos;PD1&apos;][&apos;PD1.11&apos;][&apos;PD1.11.1&apos;] + &quot;^&quot; + 
					 msg[&apos;PD1&apos;][&apos;PD1.11&apos;][&apos;PD1.11.2&apos;] + &quot;^&quot; + 
					 msg[&apos;PD1&apos;][&apos;PD1.11&apos;][&apos;PD1.11.3&apos;] + &quot;^&quot; + 
			         msg[&apos;PD1&apos;][&apos;PD1.11&apos;][&apos;PD1.11.4&apos;] + &quot;^&quot; + 
					 msg[&apos;PD1&apos;][&apos;PD1.11&apos;][&apos;PD1.11.5&apos;] + &quot;^&quot; + 
                     msg[&apos;PD1&apos;][&apos;PD1.11&apos;][&apos;PD1.11.6&apos;];
		var pid_11_9 = msg[&apos;PD1&apos;][&apos;PD1.11&apos;][&apos;PD1.11.9&apos;];
		msg[&apos;PD1&apos;][&apos;PD1.11&apos;] = &apos;&apos;;
		if (pd1_11 == &apos;^^^^^&apos;){
			pd1_11 = &apos;^&apos; + pid_11_9 + &apos;^^^^&apos;;
		}
		msg[&apos;PD1&apos;][&apos;PD1.11&apos;] = pd1_11;		
	}

	//PV1
	logger.info(&quot;Handling DataType Transformations for PV1 Segment&quot;);
	if (msg[&apos;PV1&apos;].length() &gt; 0){
		//PV1 3 - Handling PL DataType Transformations - 10 and 11 components are not mapped
		delete msg[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.10&apos;];
		delete msg[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.11&apos;];

		//PV1 5 - Handling CX DataType Transformations - 7 through 10 components are not mapped
		delete msg[&apos;PV1&apos;][&apos;PV1.5&apos;][&apos;PV1.5.7&apos;];
		delete msg[&apos;PV1&apos;][&apos;PV1.5&apos;][&apos;PV1.5.8&apos;];
		delete msg[&apos;PV1&apos;][&apos;PV1.5&apos;][&apos;PV1.5.9&apos;];
		delete msg[&apos;PV1&apos;][&apos;PV1.5&apos;][&apos;PV1.5.10&apos;];
		
		//PV1 6 - Handling PL DataType Transformations - 10 and 11 components are not mapped
		delete msg[&apos;PV1&apos;][&apos;PV1.6&apos;][&apos;PV1.6.10&apos;];
		delete msg[&apos;PV1&apos;][&apos;PV1.6&apos;][&apos;PV1.6.11&apos;];

		//PV1 7 - Handling XCN DataType Transformations - strip out the 2nd through 6th sub-components of the FamilyName in component 2, as well as removing components 16 through 23.
		//PV1 7.2 - FN DataType
		j = 0;
		while (msg[&apos;PV1&apos;][&apos;PV1.7&apos;][j] != null){
			var pv1_7_2_List = msg[&apos;PV1&apos;][&apos;PV1.7&apos;][j][&apos;PV1.7.2&apos;].toString().split(&quot;&amp;&quot;);
			var count = (msg[&apos;PV1&apos;][&apos;PV1.7&apos;][j][&apos;PV1.7.2&apos;].toString().split(&quot;&amp;&quot;).length - 1);
			msg[&apos;PV1&apos;][&apos;PV1.7&apos;][j][&apos;PV1.7.2&apos;] = &apos;&apos;;
			if (count &gt;= 0){
			  msg[&apos;PV1&apos;][&apos;PV1.7&apos;][j][&apos;PV1.7.2&apos;] = pv1_7_2_List[0] ;
    		}
			delete msg[&apos;PV1&apos;][&apos;PV1.7&apos;][j][&apos;PV1.7.16&apos;];
			delete msg[&apos;PV1&apos;][&apos;PV1.7&apos;][j][&apos;PV1.7.17&apos;];
			delete msg[&apos;PV1&apos;][&apos;PV1.7&apos;][j][&apos;PV1.7.18&apos;];
			delete msg[&apos;PV1&apos;][&apos;PV1.7&apos;][j][&apos;PV1.7.19&apos;];
			delete msg[&apos;PV1&apos;][&apos;PV1.7&apos;][j][&apos;PV1.7.20&apos;];
			delete msg[&apos;PV1&apos;][&apos;PV1.7&apos;][j][&apos;PV1.7.21&apos;];
			delete msg[&apos;PV1&apos;][&apos;PV1.7&apos;][j][&apos;PV1.7.22&apos;];
			delete msg[&apos;PV1&apos;][&apos;PV1.7&apos;][j][&apos;PV1.7.23&apos;];
			j++;
		}

		//PV1 8 - Handling XCN DataType Transformations - strip out the 2nd through 6th sub-components of the FamilyName in component 2, as well as removing components 16 through 23.
		//PV1 8.2 - FN DataType
		j = 0;
		while (msg[&apos;PV1&apos;][&apos;PV1.8&apos;][j] != null){
			var pv1_8_2_List = msg[&apos;PV1&apos;][&apos;PV1.8&apos;][j][&apos;PV1.8.2&apos;].toString().split(&quot;&amp;&quot;);
			var count = (msg[&apos;PV1&apos;][&apos;PV1.8&apos;][j][&apos;PV1.8.2&apos;].toString().split(&quot;&amp;&quot;).length - 1);
			msg[&apos;PV1&apos;][&apos;PV1.8&apos;][j][&apos;PV1.8.2&apos;] = &apos;&apos;;
			if (count &gt;= 0){
			  msg[&apos;PV1&apos;][&apos;PV1.8&apos;][j][&apos;PV1.8.2&apos;] = pv1_8_2_List[0] ;
    		}
			delete msg[&apos;PV1&apos;][&apos;PV1.8&apos;][j][&apos;PV1.8.16&apos;];
			delete msg[&apos;PV1&apos;][&apos;PV1.8&apos;][j][&apos;PV1.8.17&apos;];
			delete msg[&apos;PV1&apos;][&apos;PV1.8&apos;][j][&apos;PV1.8.18&apos;];
			delete msg[&apos;PV1&apos;][&apos;PV1.8&apos;][j][&apos;PV1.8.19&apos;];
			delete msg[&apos;PV1&apos;][&apos;PV1.8&apos;][j][&apos;PV1.8.20&apos;];
			delete msg[&apos;PV1&apos;][&apos;PV1.8&apos;][j][&apos;PV1.8.21&apos;];
			delete msg[&apos;PV1&apos;][&apos;PV1.8&apos;][j][&apos;PV1.8.22&apos;];
			delete msg[&apos;PV1&apos;][&apos;PV1.8&apos;][j][&apos;PV1.8.23&apos;];
			j++;
		}

		//PV1 9 - Handling XCN DataType Transformations - strip out the 2nd through 6th sub-components of the FamilyName in component 2, as well as removing components 16 through 23.
		//PV1 9.2 - FN DataType
		j = 0;
		while (msg[&apos;PV1&apos;][&apos;PV1.9&apos;][j] != null){
			var pv1_9_2_List = msg[&apos;PV1&apos;][&apos;PV1.9&apos;][j][&apos;PV1.9.2&apos;].toString().split(&quot;&amp;&quot;);
			var count = (msg[&apos;PV1&apos;][&apos;PV1.9&apos;][j][&apos;PV1.9.2&apos;].toString().split(&quot;&amp;&quot;).length - 1);
			msg[&apos;PV1&apos;][&apos;PV1.9&apos;][j][&apos;PV1.9.2&apos;] = &apos;&apos;;
			if (count &gt;= 0){
			  msg[&apos;PV1&apos;][&apos;PV1.9&apos;][j][&apos;PV1.9.2&apos;] = pv1_9_2_List[0] ;
    		}		
			delete msg[&apos;PV1&apos;][&apos;PV1.9&apos;][j][&apos;PV1.9.16&apos;];
			delete msg[&apos;PV1&apos;][&apos;PV1.9&apos;][j][&apos;PV1.9.17&apos;];
			delete msg[&apos;PV1&apos;][&apos;PV1.9&apos;][j][&apos;PV1.9.18&apos;];
			delete msg[&apos;PV1&apos;][&apos;PV1.9&apos;][j][&apos;PV1.9.19&apos;];
			delete msg[&apos;PV1&apos;][&apos;PV1.9&apos;][j][&apos;PV1.9.20&apos;];
			delete msg[&apos;PV1&apos;][&apos;PV1.9&apos;][j][&apos;PV1.9.21&apos;];
			delete msg[&apos;PV1&apos;][&apos;PV1.9&apos;][j][&apos;PV1.9.22&apos;];
			delete msg[&apos;PV1&apos;][&apos;PV1.9&apos;][j][&apos;PV1.9.23&apos;];
			j++;
		}

		//PV1 11 - Handling PL DataType Transformations - 10 and 11 components are not mapped
		delete msg[&apos;PV1&apos;][&apos;PV1.11&apos;][&apos;PV1.11.10&apos;];
		delete msg[&apos;PV1&apos;][&apos;PV1.11&apos;][&apos;PV1.11.11&apos;];

		//PV1 17 - Handling XCN DataType Transformations - strip out the 2nd through 6th sub-components of the FamilyName in component 2, as well as removing components 16 through 23.
		//PV1 17.2 - FN DataType
		j = 0;
		while (msg[&apos;PV1&apos;][&apos;PV1.17&apos;][j] != null){
			var pv1_17_2_List = msg[&apos;PV1&apos;][&apos;PV1.17&apos;][j][&apos;PV1.17.2&apos;].toString().split(&quot;&amp;&quot;);
			var count = (msg[&apos;PV1&apos;][&apos;PV1.17&apos;][j][&apos;PV1.17.2&apos;].toString().split(&quot;&amp;&quot;).length - 1);
			msg[&apos;PV1&apos;][&apos;PV1.17&apos;][j][&apos;PV1.17.2&apos;] = &apos;&apos;;
			if (count &gt;= 0){
			  msg[&apos;PV1&apos;][&apos;PV1.17&apos;][j][&apos;PV1.17.2&apos;] = pv1_17_2_List[0] ;
    		}
			delete msg[&apos;PV1&apos;][&apos;PV1.17&apos;][j][&apos;PV1.17.16&apos;];
			delete msg[&apos;PV1&apos;][&apos;PV1.17&apos;][j][&apos;PV1.17.17&apos;];
			delete msg[&apos;PV1&apos;][&apos;PV1.17&apos;][j][&apos;PV1.17.18&apos;];
			delete msg[&apos;PV1&apos;][&apos;PV1.17&apos;][j][&apos;PV1.17.19&apos;];
			delete msg[&apos;PV1&apos;][&apos;PV1.17&apos;][j][&apos;PV1.17.20&apos;];
			delete msg[&apos;PV1&apos;][&apos;PV1.17&apos;][j][&apos;PV1.17.21&apos;];
			delete msg[&apos;PV1&apos;][&apos;PV1.17&apos;][j][&apos;PV1.17.22&apos;];
			delete msg[&apos;PV1&apos;][&apos;PV1.17&apos;][j][&apos;PV1.17.23&apos;];
			j++;
		}

		//PV1 19 - Handling CX DataType Transformations - 7 through 10 components are not mapped
		delete msg[&apos;PV1&apos;][&apos;PV1.19&apos;][&apos;PV1.19.7&apos;];
		delete msg[&apos;PV1&apos;][&apos;PV1.19&apos;][&apos;PV1.19.8&apos;];
		delete msg[&apos;PV1&apos;][&apos;PV1.19&apos;][&apos;PV1.19.9&apos;];
		delete msg[&apos;PV1&apos;][&apos;PV1.19&apos;][&apos;PV1.19.10&apos;];

		//PV1 38 - Handling CWE DataType Transformations - The first 6 components are mapped to the CE datatype. If all of these fields are empty, meaning there is no coded data, map CWE.9-Original Text to CWE.2
		var pv1_38 = msg[&apos;PV1&apos;][&apos;PV1.38&apos;][&apos;PV1.38.1&apos;] + &quot;^&quot; + 
					 msg[&apos;PV1&apos;][&apos;PV1.38&apos;][&apos;PV1.38.2&apos;] + &quot;^&quot; + 
					 msg[&apos;PV1&apos;][&apos;PV1.38&apos;][&apos;PV1.38.3&apos;] + &quot;^&quot; + 
			         msg[&apos;PV1&apos;][&apos;PV1.38&apos;][&apos;PV1.38.4&apos;] + &quot;^&quot; + 
					 msg[&apos;PV1&apos;][&apos;PV1.38&apos;][&apos;PV1.38.5&apos;] + &quot;^&quot; + 
                     msg[&apos;PV1&apos;][&apos;PV1.38&apos;][&apos;PV1.38.6&apos;];
		var pv1_38_9 = msg[&apos;PV1&apos;][&apos;PV1.38&apos;][&apos;PV1.38.9&apos;];
		msg[&apos;PV1&apos;][&apos;PV1.38&apos;] = &apos;&apos;;
		if (pv1_38 == &apos;^^^^^&apos;){
			pv1_38 = &apos;^&apos; + pv1_38_9 + &apos;^^^^&apos;;
		}
		msg[&apos;PV1&apos;][&apos;PV1.38&apos;] = pv1_38;

		//PV1 42 - Handling PL DataType Transformations - 10 and 11 components are not mapped
		delete msg[&apos;PV1&apos;][&apos;PV1.42&apos;][&apos;PV1.42.10&apos;];
		delete msg[&apos;PV1&apos;][&apos;PV1.42&apos;][&apos;PV1.42.11&apos;];

		//PV1 43 - Handling PL DataType Transformations - 10 and 11 components are not mapped
		delete msg[&apos;PV1&apos;][&apos;PV1.43&apos;][&apos;PV1.43.10&apos;];
		delete msg[&apos;PV1&apos;][&apos;PV1.43&apos;][&apos;PV1.43.11&apos;];		

		//PV1 50 - Handling CX DataType Transformations - 7 through 10 components are not mapped
		delete msg[&apos;PV1&apos;][&apos;PV1.50&apos;][&apos;PV1.50.7&apos;];
		delete msg[&apos;PV1&apos;][&apos;PV1.50&apos;][&apos;PV1.50.8&apos;];
		delete msg[&apos;PV1&apos;][&apos;PV1.50&apos;][&apos;PV1.50.9&apos;];
		delete msg[&apos;PV1&apos;][&apos;PV1.50&apos;][&apos;PV1.50.10&apos;];

		//PV1 52 - Handling XCN DataType Transformations - strip out the 2nd through 6th sub-components of the FamilyName in component 2, as well as removing components 16 through 23.		
		//PV1 52.2 - FN DataType
		var pv1_52_2_List = msg[&apos;PV1&apos;][&apos;PV1.52&apos;][&apos;PV1.52.2&apos;].toString().split(&quot;&amp;&quot;);
		var count = (msg[&apos;PV1&apos;][&apos;PV1.52&apos;][&apos;PV1.52.2&apos;].toString().split(&quot;&amp;&quot;).length - 1);
		msg[&apos;PV1&apos;][&apos;PV1.52&apos;][&apos;PV1.52.2&apos;] = &apos;&apos;;
		if (count &gt;= 0){
		  msg[&apos;PV1&apos;][&apos;PV1.52&apos;][&apos;PV1.52.2&apos;] = pv1_52_2_List[0] ;
    	}
		delete msg[&apos;PV1&apos;][&apos;PV1.52&apos;][&apos;PV1.52.16&apos;];
		delete msg[&apos;PV1&apos;][&apos;PV1.52&apos;][&apos;PV1.52.17&apos;];
		delete msg[&apos;PV1&apos;][&apos;PV1.52&apos;][&apos;PV1.52.18&apos;];
		delete msg[&apos;PV1&apos;][&apos;PV1.52&apos;][&apos;PV1.52.19&apos;];
		delete msg[&apos;PV1&apos;][&apos;PV1.52&apos;][&apos;PV1.52.20&apos;];
		delete msg[&apos;PV1&apos;][&apos;PV1.52&apos;][&apos;PV1.52.21&apos;];
		delete msg[&apos;PV1&apos;][&apos;PV1.52&apos;][&apos;PV1.52.22&apos;];
		delete msg[&apos;PV1&apos;][&apos;PV1.52&apos;][&apos;PV1.52.23&apos;];
	}

	//PV2
	logger.info(&quot;Handling DataType Transformations for PV2 Segment&quot;);
	if (msg[&apos;PV2&apos;].length() &gt; 0){
		//PV2 1 - Handling PL DataType Transformations - 10 and 11 components are not mapped
		delete msg[&apos;PV2&apos;][&apos;PV2.1&apos;][&apos;PV2.1.10&apos;];
		delete msg[&apos;PV2&apos;][&apos;PV2.1&apos;][&apos;PV2.1.11&apos;];

		//PV2 2 - Handling CWE DataType Transformations - The first 6 components are mapped to the CE datatype. If all of these fields are empty, meaning there is no coded data, map CWE.9-Original Text to CWE.2
		var pv2_2 = msg[&apos;PV2&apos;][&apos;PV2.2&apos;][&apos;PV2.2.1&apos;] + &quot;^&quot; + 
                    msg[&apos;PV2&apos;][&apos;PV2.2&apos;][&apos;PV2.2.2&apos;] + &quot;^&quot; + 
					msg[&apos;PV2&apos;][&apos;PV2.2&apos;][&apos;PV2.2.3&apos;] + &quot;^&quot; + 
			        msg[&apos;PV2&apos;][&apos;PV2.2&apos;][&apos;PV2.2.4&apos;] + &quot;^&quot; + 
					msg[&apos;PV2&apos;][&apos;PV2.2&apos;][&apos;PV2.2.5&apos;] + &quot;^&quot; + 
                    msg[&apos;PV2&apos;][&apos;PV2.2&apos;][&apos;PV2.2.6&apos;];
		var pv2_2_9 = msg[&apos;PV2&apos;][&apos;PV2.2&apos;][&apos;PV2.2.9&apos;];
		msg[&apos;PV2&apos;][&apos;PV2.2&apos;] = &apos;&apos;;
		if (pv2_2 == &apos;^^^^^&apos;){
			pv2_2 = &apos;^&apos; + pv2_2_9 + &apos;^^^^&apos;;
		}
		msg[&apos;PV2&apos;][&apos;PV2.2&apos;] = pv2_2;


		//PV2 3 - Handling CWE DataType Transformations - The first 6 components are mapped to the CE datatype. If all of these fields are empty, meaning there is no coded data, map CWE.9-Original Text to CWE.2
		var pv2_3 = msg[&apos;PV2&apos;][&apos;PV2.3&apos;][&apos;PV2.3.1&apos;] + &quot;^&quot; + 
					msg[&apos;PV2&apos;][&apos;PV2.3&apos;][&apos;PV2.3.2&apos;] + &quot;^&quot; + 
					msg[&apos;PV2&apos;][&apos;PV2.3&apos;][&apos;PV2.3.3&apos;] + &quot;^&quot; + 
			        msg[&apos;PV2&apos;][&apos;PV2.3&apos;][&apos;PV2.3.4&apos;] + &quot;^&quot; + 
					msg[&apos;PV2&apos;][&apos;PV2.3&apos;][&apos;PV2.3.5&apos;] + &quot;^&quot; + 
                    msg[&apos;PV2&apos;][&apos;PV2.3&apos;][&apos;PV2.3.6&apos;];
		var pv2_3_9 = msg[&apos;PV2&apos;][&apos;PV2.3&apos;][&apos;PV2.3.9&apos;];
		msg[&apos;PV2&apos;][&apos;PV2.3&apos;] = &apos;&apos;;
		if (pv2_3 == &apos;^^^^^&apos;){
			pv2_3 = &apos;^&apos; + pv2_3_9 + &apos;^^^^&apos;;
		}
		msg[&apos;PV2&apos;][&apos;PV2.3&apos;] = pv2_3;


		//PV2 4 - Handling CWE DataType Transformations - The first 6 components are mapped to the CE datatype. If all of these fields are empty, meaning there is no coded data, map CWE.9-Original Text to CWE.2
		var pv2_4 = msg[&apos;PV2&apos;][&apos;PV2.4&apos;][&apos;PV2.4.1&apos;] + &quot;^&quot; + 
					msg[&apos;PV2&apos;][&apos;PV2.4&apos;][&apos;PV2.4.2&apos;] + &quot;^&quot; + 
					msg[&apos;PV2&apos;][&apos;PV2.4&apos;][&apos;PV2.4.3&apos;] + &quot;^&quot; + 
			        msg[&apos;PV2&apos;][&apos;PV2.4&apos;][&apos;PV2.4.4&apos;] + &quot;^&quot; + 
					msg[&apos;PV2&apos;][&apos;PV2.4&apos;][&apos;PV2.4.5&apos;] + &quot;^&quot; + 
                    msg[&apos;PV2&apos;][&apos;PV2.4&apos;][&apos;PV2.4.6&apos;];
		var pv2_4_9 = msg[&apos;PV2&apos;][&apos;PV2.4&apos;][&apos;PV2.4.9&apos;];
		msg[&apos;PV2&apos;][&apos;PV2.4&apos;] = &apos;&apos;;
		if (pv2_4 == &apos;^^^^^&apos;){
			pv2_4 = &apos;^&apos; + pv2_4_9 + &apos;^^^^&apos;;
		}
		msg[&apos;PV2&apos;][&apos;PV2.4&apos;] = pv2_4;

		//PV2 13 - Handling XCN DataType Transformations - strip out the 2nd through 6th sub-components of the FamilyName in component 2, as well as removing components 16 through 23.
		//PV2 13.2 - FN DataType
		var pv2_13_2_List = msg[&apos;PV2&apos;][&apos;PV2.13&apos;][&apos;PV2.13.2&apos;].toString().split(&quot;&amp;&quot;);
		var count = (msg[&apos;PV2&apos;][&apos;PV2.13&apos;][&apos;PV2.13.2&apos;].toString().split(&quot;&amp;&quot;).length - 1);
		msg[&apos;PV2&apos;][&apos;PV2.13&apos;][&apos;PV2.13.2&apos;] = &apos;&apos;;
		if (count &gt;= 0){
		  msg[&apos;PV2&apos;][&apos;PV2.13&apos;][&apos;PV2.13.2&apos;] = pv2_13_2_List[0] ;
    	}
		delete msg[&apos;PV2&apos;][&apos;PV2.13&apos;][&apos;PV2.13.16&apos;];
		delete msg[&apos;PV2&apos;][&apos;PV2.13&apos;][&apos;PV2.13.17&apos;];
		delete msg[&apos;PV2&apos;][&apos;PV2.13&apos;][&apos;PV2.13.18&apos;];
		delete msg[&apos;PV2&apos;][&apos;PV2.13&apos;][&apos;PV2.13.19&apos;];
		delete msg[&apos;PV2&apos;][&apos;PV2.13&apos;][&apos;PV2.13.20&apos;];
		delete msg[&apos;PV2&apos;][&apos;PV2.13&apos;][&apos;PV2.13.21&apos;];
		delete msg[&apos;PV2&apos;][&apos;PV2.13&apos;][&apos;PV2.13.22&apos;];
		delete msg[&apos;PV2&apos;][&apos;PV2.13&apos;][&apos;PV2.13.23&apos;];

		//PV2 23 - Handling XON DataType Transformations - Removing component 10
		j = 0;
		while ( msg[&apos;PV2&apos;][&apos;PV2.23&apos;][j] != null) {
			delete msg[&apos;PV2&apos;][&apos;PV2.23&apos;][j][&apos;PV2.23.10&apos;];
			j++;			
		}
		
		//PV2 30 - Handling CWE DataType Transformations - The first 6 components are mapped to the CE datatype. If all of these fields are empty, meaning there is no coded data, map CWE.9-Original Text to CWE.2
		var pv2_30 = msg[&apos;PV2&apos;][&apos;PV2.30&apos;][&apos;PV2.30.1&apos;] + &quot;^&quot; + 
					 msg[&apos;PV2&apos;][&apos;PV2.30&apos;][&apos;PV2.30.2&apos;] + &quot;^&quot; + 
					 msg[&apos;PV2&apos;][&apos;PV2.30&apos;][&apos;PV2.30.3&apos;] + &quot;^&quot; + 
			         msg[&apos;PV2&apos;][&apos;PV2.30&apos;][&apos;PV2.30.4&apos;] + &quot;^&quot; + 
					 msg[&apos;PV2&apos;][&apos;PV2.30&apos;][&apos;PV2.30.5&apos;] + &quot;^&quot; + 
                     msg[&apos;PV2&apos;][&apos;PV2.30&apos;][&apos;PV2.30.6&apos;];
		var pv2_30_9 = msg[&apos;PV2&apos;][&apos;PV2.30&apos;][&apos;PV2.30.9&apos;];
		msg[&apos;PV2&apos;][&apos;PV2.30&apos;] = &apos;&apos;;
		if (pv2_30 == &apos;^^^^^&apos;){
			pv2_30 = &apos;^&apos; + pv2_30_9 + &apos;^^^^&apos;;
		}
		msg[&apos;PV2&apos;][&apos;PV2.30&apos;] = pv2_30;
	}

	//NK1
	logger.info(&quot;Handling DataType Transformations for NK1 Segment(s)&quot;); 	
	i = 0;
	while(msg[&apos;NK1&apos;][i] != null) { 
		//NK1 2 - Handling XPN DataType Transformations - strip out the 2nd through 6th sub-components of the FamilyName in component 1, as well as removing components 9 through 14. Fields affected
		j = 0;
		while ( msg[&apos;NK1&apos;][i][&apos;NK1.2&apos;][j] != null) {
			//NK1 2.1 - FN DataType
			var nk1_2_1_List = msg[&apos;NK1&apos;][i][&apos;NK1.2&apos;][j][&apos;NK1.2.1&apos;].toString().split(&quot;&amp;&quot;);
			var count = (msg[&apos;NK1&apos;][i][&apos;NK1.2&apos;][j][&apos;NK1.2.1&apos;].toString().split(&quot;&amp;&quot;).length - 1);
			msg[&apos;NK1&apos;][i][&apos;NK1.2&apos;][j][&apos;NK1.2.1&apos;] = &apos;&apos;;
			if (count &gt;= 0){
			  msg[&apos;NK1&apos;][i][&apos;NK1.2&apos;][j][&apos;NK1.2.1&apos;] = nk1_2_1_List[0] ;
    		}	
			delete msg[&apos;NK1&apos;][i][&apos;NK1.2&apos;][j][&apos;NK1.2.9&apos;];
			delete msg[&apos;NK1&apos;][i][&apos;NK1.2&apos;][j][&apos;NK1.2.10&apos;];
			delete msg[&apos;NK1&apos;][i][&apos;NK1.2&apos;][j][&apos;NK1.2.11&apos;];
			delete msg[&apos;NK1&apos;][i][&apos;NK1.2&apos;][j][&apos;NK1.2.12&apos;];
			delete msg[&apos;NK1&apos;][i][&apos;NK1.2&apos;][j][&apos;NK1.2.13&apos;];
			delete msg[&apos;NK1&apos;][i][&apos;NK1.2&apos;][j][&apos;NK1.2.14&apos;];
			j++;
		}

		//NK1 3 - Handling CWE DataType Transformations - The first 6 components are mapped to the CE datatype. If all of these fields are empty, meaning there is no coded data, map CWE.9-Original Text to CWE.2
		var nk1_3 = msg[&apos;NK1&apos;][i][&apos;NK1.3&apos;][&apos;NK1.3.1&apos;] + &quot;^&quot; + 
					msg[&apos;NK1&apos;][i][&apos;NK1.3&apos;][&apos;NK1.3.2&apos;] + &quot;^&quot; + 
					msg[&apos;NK1&apos;][i][&apos;NK1.3&apos;][&apos;NK1.3.3&apos;] + &quot;^&quot; + 
			        msg[&apos;NK1&apos;][i][&apos;NK1.3&apos;][&apos;NK1.3.4&apos;] + &quot;^&quot; + 
					msg[&apos;NK1&apos;][i][&apos;NK1.3&apos;][&apos;NK1.3.5&apos;] + &quot;^&quot; + 
                    msg[&apos;NK1&apos;][i][&apos;NK1.3&apos;][&apos;NK1.3.6&apos;];
		var nk1_3_9 = msg[&apos;NK1&apos;][i][&apos;NK1.3&apos;][&apos;NK1.3.9&apos;];
		msg[&apos;NK1&apos;][i][&apos;NK1.3&apos;] = &apos;&apos;;
		if (nk1_3 == &apos;^^^^^&apos;){
			nk1_3 = &apos;^&apos; + nk1_3_9 + &apos;^^^^&apos;;
		}
		msg[&apos;NK1&apos;][i][&apos;NK1.3&apos;] = nk1_3;

		//NK1 4 - Handling XAD DataType Transformations - strip out the 2nd through 3rd sub-components of the Street Address in component 1 as well as removing components 12 through 14.
		j = 0;
		while ( msg[&apos;NK1&apos;][i][&apos;NK1.4&apos;][j] != null) {
			//NK1 4.1 - SAD DataType
			var nk1_4_1_List = msg[&apos;NK1&apos;][i][&apos;NK1.4&apos;][j][&apos;NK1.4.1&apos;].toString().split(&quot;&amp;&quot;);
			var count = (msg[&apos;NK1&apos;][i][&apos;NK1.4&apos;][j][&apos;NK1.4.1&apos;].toString().split(&quot;&amp;&quot;).length - 1);
			msg[&apos;NK1&apos;][i][&apos;NK1.4&apos;][j][&apos;NK1.4.1&apos;] = &apos;&apos;;
			if (count &gt;= 0){
			  msg[&apos;NK1&apos;][i][&apos;NK1.4&apos;][j][&apos;NK1.4.1&apos;] = nk1_4_1_List[0] ;
    		}		
			delete msg[&apos;NK1&apos;][i][&apos;NK1.4&apos;][j][&apos;NK1.4.12&apos;];
			delete msg[&apos;NK1&apos;][i][&apos;NK1.4&apos;][j][&apos;NK1.4.13&apos;];
			delete msg[&apos;NK1&apos;][i][&apos;NK1.4&apos;][j][&apos;NK1.4.14&apos;];
			j++;	
		}
		i++;
	}

	//ORC
	logger.info(&quot;Handling DataType Transformations for ORC Segment&quot;);
	if (msg[&apos;ORC&apos;].length() &gt; 0){					
		//ORC 21 - Handling XON DataType Transformations - Removing component 10
		j = 0;
		while ( msg[&apos;ORC&apos;][&apos;ORC.21&apos;][j] != null) {
			delete msg[&apos;ORC&apos;][&apos;ORC.21&apos;][j][&apos;ORC.21.10&apos;];
			j++;
		}

		//ORC 22 - Handling XAD DataType Transformations - strip out the 2nd through 3rd sub-components of the Street Address in component 1 as well as removing components 12 through 14.		
		//ORC 22.1 - SAD DataType
		j = 0;
		while ( msg[&apos;ORC&apos;][&apos;ORC.22&apos;][j] != null) {
			var orc_22_1_List = msg[&apos;ORC&apos;][&apos;ORC.22&apos;][j][&apos;ORC.22.1&apos;].toString().split(&quot;&amp;&quot;);
			var count = (msg[&apos;ORC&apos;][&apos;ORC.22&apos;][j][&apos;ORC.22.1&apos;].toString().split(&quot;&amp;&quot;).length - 1);
			msg[&apos;ORC&apos;][&apos;ORC.22&apos;][j][&apos;ORC.22.1&apos;] = &apos;&apos;;
			if (count &gt;= 0){
			  msg[&apos;ORC&apos;][&apos;ORC.22&apos;][j][&apos;ORC.22.1&apos;]= orc_22_1_List[0] ;
    		}
			delete msg[&apos;ORC&apos;][&apos;ORC.22&apos;][j][&apos;ORC.22.12&apos;];
			delete msg[&apos;ORC&apos;][&apos;ORC.22&apos;][j][&apos;ORC.22.13&apos;];
			delete msg[&apos;ORC&apos;][&apos;ORC.22&apos;][j][&apos;ORC.22.14&apos;];
			j++;
		}

		//ORC 24
		//ORC 24.1 - SAD DataType
		j = 0;
		while ( msg[&apos;ORC&apos;][&apos;ORC.24&apos;][j] != null) {
			var orc_24_1_List = msg[&apos;ORC&apos;][&apos;ORC.24&apos;][j][&apos;ORC.24.1&apos;].toString().split(&quot;&amp;&quot;);
			var count = (msg[&apos;ORC&apos;][&apos;ORC.24&apos;][j][&apos;ORC.24.1&apos;].toString().split(&quot;&amp;&quot;).length - 1);
			msg[&apos;ORC&apos;][&apos;ORC.24&apos;][j][&apos;ORC.24.1&apos;] = &apos;&apos;;
			if (count &gt;= 0){
			  msg[&apos;ORC&apos;][&apos;ORC.24&apos;][j][&apos;ORC.24.1&apos;]= orc_24_1_List[0] ;
	    	}		
			delete msg[&apos;ORC&apos;][&apos;ORC.24&apos;][j][&apos;ORC.24.12&apos;];
			delete msg[&apos;ORC&apos;][&apos;ORC.24&apos;][j][&apos;ORC.24.13&apos;];
			delete msg[&apos;ORC&apos;][&apos;ORC.24&apos;][j][&apos;ORC.24.14&apos;];
			j++;
		}

	}
 
	//OBR
	logger.info(&quot;Handling DataType Transformations for OBR Segment(s)&quot;);
	i=0;
	while(msg[&apos;OBR&apos;][i] != null) { 
		//OBR 4 - Handling CWE DataType Transformations - The first 6 components are mapped to the CE datatype. If all of these fields are empty, meaning there is no coded data, map CWE.9-Original Text to CWE.2
		var obr_4 = msg[&apos;OBR&apos;][i][&apos;OBR.4&apos;][&apos;OBR.4.1&apos;] + &quot;^&quot; + 
					msg[&apos;OBR&apos;][i][&apos;OBR.4&apos;][&apos;OBR.4.2&apos;] + &quot;^&quot; + 
					msg[&apos;OBR&apos;][i][&apos;OBR.4&apos;][&apos;OBR.4.3&apos;] + &quot;^&quot; + 
			        msg[&apos;OBR&apos;][i][&apos;OBR.4&apos;][&apos;OBR.4.4&apos;] + &quot;^&quot; + 
					msg[&apos;OBR&apos;][i][&apos;OBR.4&apos;][&apos;OBR.4.5&apos;] + &quot;^&quot; + 
                    msg[&apos;OBR&apos;][i][&apos;OBR.4&apos;][&apos;OBR.4.6&apos;];
		var obr_4_9 = msg[&apos;OBR&apos;][i][&apos;OBR.4&apos;][&apos;OBR.4.9&apos;];
		msg[&apos;OBR&apos;][i][&apos;OBR.4&apos;] = &apos;&apos;;
		if (obr_4 == &apos;^^^^^&apos;){
			obr_4 = &apos;^&apos; + obr_4_9 + &apos;^^^^&apos;;
		}
		msg[&apos;OBR&apos;][i][&apos;OBR.4&apos;] = obr_4;
	
		//OBR 10 - Handling XCN DataType Transformations - strip out the 2nd through 6th sub-components of the FamilyName in component 2, as well as removing components 16 through 23.
		j = 0;
		while (msg[&apos;OBR&apos;][i][&apos;OBR.10&apos;][j] != null){
			//OBR 10.2 - FN DataType
			var obr_10_2_List = msg[&apos;OBR&apos;][i][&apos;OBR.10&apos;][j][&apos;OBR.10.2&apos;].toString().split(&quot;&amp;&quot;);
			var count = (msg[&apos;OBR&apos;][i][&apos;OBR.10&apos;][j][&apos;OBR.10.2&apos;].toString().split(&quot;&amp;&quot;).length - 1);
			msg[&apos;OBR&apos;][i][&apos;OBR.10&apos;][j][&apos;OBR.10.2&apos;] = &apos;&apos;;
			if (count &gt;= 0){
			  msg[&apos;OBR&apos;][i][&apos;OBR.10&apos;][j][&apos;OBR.10.2&apos;] = obr_10_2_List[0] ;
    		}
			delete msg[&apos;OBR&apos;][i][&apos;OBR.10&apos;][j][&apos;OBR.10.16&apos;];
			delete msg[&apos;OBR&apos;][i][&apos;OBR.10&apos;][j][&apos;OBR.10.17&apos;];
			delete msg[&apos;OBR&apos;][i][&apos;OBR.10&apos;][j][&apos;OBR.10.18&apos;];
			delete msg[&apos;OBR&apos;][i][&apos;OBR.10&apos;][j][&apos;OBR.10.19&apos;];
			delete msg[&apos;OBR&apos;][i][&apos;OBR.10&apos;][j][&apos;OBR.10.20&apos;];
			delete msg[&apos;OBR&apos;][i][&apos;OBR.10&apos;][j][&apos;OBR.10.21&apos;];
			delete msg[&apos;OBR&apos;][i][&apos;OBR.10&apos;][j][&apos;OBR.10.22&apos;];
			delete msg[&apos;OBR&apos;][i][&apos;OBR.10&apos;][j][&apos;OBR.10.23&apos;];
			j++;
		}
	
		//OBR 16 - Handling XCN DataType Transformations - strip out the 2nd through 6th sub-components of the FamilyName in component 2, as well as removing components 16 through 23.
		j = 0;
		while (msg[&apos;OBR&apos;][i][&apos;OBR.16&apos;][j] != null){
			//OBR 16.2 - FN DataType
			var obr_16_2_List = msg[&apos;OBR&apos;][i][&apos;OBR.16&apos;][j][&apos;OBR.16.2&apos;].toString().split(&quot;&amp;&quot;);
			var count = (msg[&apos;OBR&apos;][i][&apos;OBR.16&apos;][j][&apos;OBR.16.2&apos;].toString().split(&quot;&amp;&quot;).length - 1);
			msg[&apos;OBR&apos;][i][&apos;OBR.16&apos;][j][&apos;OBR.16.2&apos;] = &apos;&apos;;
			if (count &gt;= 0){
			  msg[&apos;OBR&apos;][i][&apos;OBR.16&apos;][j][&apos;OBR.16.2&apos;] = obr_16_2_List[0] ;
    		}
			delete msg[&apos;OBR&apos;][i][&apos;OBR.16&apos;][j][&apos;OBR.16.16&apos;];
			delete msg[&apos;OBR&apos;][i][&apos;OBR.16&apos;][j][&apos;OBR.16.17&apos;];
			delete msg[&apos;OBR&apos;][i][&apos;OBR.16&apos;][j][&apos;OBR.16.18&apos;];
			delete msg[&apos;OBR&apos;][i][&apos;OBR.16&apos;][j][&apos;OBR.16.19&apos;];
			delete msg[&apos;OBR&apos;][i][&apos;OBR.16&apos;][j][&apos;OBR.16.20&apos;];
			delete msg[&apos;OBR&apos;][i][&apos;OBR.16&apos;][j][&apos;OBR.16.21&apos;];
			delete msg[&apos;OBR&apos;][i][&apos;OBR.16&apos;][j][&apos;OBR.16.22&apos;];
			delete msg[&apos;OBR&apos;][i][&apos;OBR.16&apos;][j][&apos;OBR.16.23&apos;];
			j++;
		}

		//OBR 28 - Handling XCN DataType Transformations - strip out the 2nd through 6th sub-components of the FamilyName in component 2, as well as removing components 16 through 23.
		j = 0;
		while (msg[&apos;OBR&apos;][i][&apos;OBR.28&apos;][j] != null){
			//OBR 28.2 - FN DataType
			var obr_28_2_List = msg[&apos;OBR&apos;][i][&apos;OBR.28&apos;][j][&apos;OBR.28.2&apos;].toString().split(&quot;&amp;&quot;);
			var count = (msg[&apos;OBR&apos;][i][&apos;OBR.28&apos;][j][&apos;OBR.28.2&apos;].toString().split(&quot;&amp;&quot;).length - 1);
			msg[&apos;OBR&apos;][i][&apos;OBR.28&apos;][j][&apos;OBR.28.2&apos;] = &apos;&apos;;
			if (count &gt;= 0){
			  msg[&apos;OBR&apos;][i][&apos;OBR.28&apos;][j][&apos;OBR.28.2&apos;] = obr_28_2_List[0] ;
    		}
			delete msg[&apos;OBR&apos;][i][&apos;OBR.28&apos;][j][&apos;OBR.28.16&apos;];
			delete msg[&apos;OBR&apos;][i][&apos;OBR.28&apos;][j][&apos;OBR.28.17&apos;];
			delete msg[&apos;OBR&apos;][i][&apos;OBR.28&apos;][j][&apos;OBR.28.18&apos;];
			delete msg[&apos;OBR&apos;][i][&apos;OBR.28&apos;][j][&apos;OBR.28.19&apos;];
			delete msg[&apos;OBR&apos;][i][&apos;OBR.28&apos;][j][&apos;OBR.28.20&apos;];
			delete msg[&apos;OBR&apos;][i][&apos;OBR.28&apos;][j][&apos;OBR.28.21&apos;];
			delete msg[&apos;OBR&apos;][i][&apos;OBR.28&apos;][j][&apos;OBR.28.22&apos;];
			delete msg[&apos;OBR&apos;][i][&apos;OBR.28&apos;][j][&apos;OBR.28.23&apos;];
			j++;
		}


		//OBR 31 - Handling CWE DataType Transformations - The first 6 components are mapped to the CE datatype. If all of these fields are empty, meaning there is no coded data, map CWE.9-Original Text to CWE.2
		j = 0;
		while (msg[&apos;OBR&apos;][i][&apos;OBR.31&apos;][j] != null){
			var obr_31 = msg[&apos;OBR&apos;][i][&apos;OBR.31&apos;][j][&apos;OBR.31.1&apos;] + &quot;^&quot; + 
					 msg[&apos;OBR&apos;][i][&apos;OBR.31&apos;][j][&apos;OBR.31.2&apos;] + &quot;^&quot; + 
					 msg[&apos;OBR&apos;][i][&apos;OBR.31&apos;][j][&apos;OBR.31.3&apos;] + &quot;^&quot; + 
			         msg[&apos;OBR&apos;][i][&apos;OBR.31&apos;][j][&apos;OBR.31.4&apos;] + &quot;^&quot; + 
					 msg[&apos;OBR&apos;][i][&apos;OBR.31&apos;][j][&apos;OBR.31.5&apos;] + &quot;^&quot; + 
                     msg[&apos;OBR&apos;][i][&apos;OBR.31&apos;][j][&apos;OBR.31.6&apos;];
			var obr_31_9 = msg[&apos;OBR&apos;][i][&apos;OBR.31&apos;][j][&apos;OBR.31.9&apos;];
			msg[&apos;OBR&apos;][i][&apos;OBR.31&apos;][j] = &apos;&apos;;
			if (obr_31 == &apos;^^^^^&apos;){
				obr_31 = &apos;^&apos; + obr_31_9 + &apos;^^^^&apos;;
			}
			msg[&apos;OBR&apos;][i][&apos;OBR.31&apos;][j] = obr_31;
			j ++;
		}

		i++;
	}

	//OBX
	logger.info(&quot;Handling DataType Transformations for OBX Segment(s)&quot;);
	i = 0;
	while(msg[&apos;OBX&apos;][i] != null) {
		//OBX 3 - Handling CWE DataType Transformations - The first 6 components are mapped to the CE datatype. If all of these fields are empty, meaning there is no coded data, map CWE.9-Original Text to CWE.2
		var obx_3 = msg[&apos;OBX&apos;][i][&apos;OBX.3&apos;][&apos;OBX.3.1&apos;] + &quot;^&quot; + 
					msg[&apos;OBX&apos;][i][&apos;OBX.3&apos;][&apos;OBX.3.2&apos;] + &quot;^&quot; + 
					msg[&apos;OBX&apos;][i][&apos;OBX.3&apos;][&apos;OBX.3.3&apos;] + &quot;^&quot; + 
			        msg[&apos;OBX&apos;][i][&apos;OBX.3&apos;][&apos;OBX.3.4&apos;] + &quot;^&quot; + 
					msg[&apos;OBX&apos;][i][&apos;OBX.3&apos;][&apos;OBX.3.5&apos;] + &quot;^&quot; + 
                    msg[&apos;OBX&apos;][i][&apos;OBX.3&apos;][&apos;OBX.3.6&apos;];
		var obx_3_9 = msg[&apos;OBX&apos;][i][&apos;OBX.3&apos;][&apos;OBX.3.9&apos;];
		msg[&apos;OBX&apos;][i][&apos;OBX.3&apos;] = &apos;&apos;;
		if (obx_3 == &apos;^^^^^&apos;){
			obx_3 = &apos;^&apos; + obx_3_9 + &apos;^^^^&apos;;
		}
		msg[&apos;OBX&apos;][i][&apos;OBX.3&apos;] = obx_3;
		
		//OBX 6 - Handling CWE DataType Transformations - The first 6 components are mapped to the CE datatype. If all of these fields are empty, meaning there is no coded data, map CWE.9-Original Text to CWE.2
		var obx_6 = msg[&apos;OBX&apos;][i][&apos;OBX.6&apos;][&apos;OBX.6.1&apos;] + &quot;^&quot; + 
					msg[&apos;OBX&apos;][i][&apos;OBX.6&apos;][&apos;OBX.6.2&apos;] + &quot;^&quot; + 
					msg[&apos;OBX&apos;][i][&apos;OBX.6&apos;][&apos;OBX.6.3&apos;] + &quot;^&quot; + 
			        msg[&apos;OBX&apos;][i][&apos;OBX.6&apos;][&apos;OBX.6.4&apos;] + &quot;^&quot; + 
					msg[&apos;OBX&apos;][i][&apos;OBX.6&apos;][&apos;OBX.6.5&apos;] + &quot;^&quot; + 
                    msg[&apos;OBX&apos;][i][&apos;OBX.6&apos;][&apos;OBX.6.6&apos;];
		var obx_6_9 = msg[&apos;OBX&apos;][i][&apos;OBX.6&apos;][&apos;OBX.6.9&apos;];
		msg[&apos;OBX&apos;][i][&apos;OBX.6&apos;] = &apos;&apos;;
		if (obx_6 == &apos;^^^^^&apos;){
			obx_6 = &apos;^&apos; + obx_6_9 + &apos;^^^^&apos;;
		}
		msg[&apos;OBX&apos;][i][&apos;OBX.6&apos;] = obx_6;

		
		//OBX 15 - Handling CWE DataType Transformations - The first 6 components are mapped to the CE datatype. If all of these fields are empty, meaning there is no coded data, map CWE.9-Original Text to CWE.2
		var obx_15 = msg[&apos;OBX&apos;][i][&apos;OBX.15&apos;][&apos;OBX.15.1&apos;] + &quot;^&quot; + 
 					 msg[&apos;OBX&apos;][i][&apos;OBX.15&apos;][&apos;OBX.15.2&apos;] + &quot;^&quot; + 
					 msg[&apos;OBX&apos;][i][&apos;OBX.15&apos;][&apos;OBX.15.3&apos;] + &quot;^&quot; + 
			         msg[&apos;OBX&apos;][i][&apos;OBX.15&apos;][&apos;OBX.15.4&apos;] + &quot;^&quot; + 
					 msg[&apos;OBX&apos;][i][&apos;OBX.15&apos;][&apos;OBX.15.5&apos;] + &quot;^&quot; + 
                     msg[&apos;OBX&apos;][i][&apos;OBX.15&apos;][&apos;OBX.15.6&apos;];
		var obx_15_9 = msg[&apos;OBX&apos;][i][&apos;OBX.15&apos;][&apos;OBX.15.9&apos;];
		msg[&apos;OBX&apos;][i][&apos;OBX.15&apos;] = &apos;&apos;;
		if (obx_15 == &apos;^^^^^&apos;){
			obx_15 = &apos;^&apos; + obx_15_9 + &apos;^^^^&apos;;
		}
		msg[&apos;OBX&apos;][i][&apos;OBX.15&apos;] = obx_15;

		//OBX 16 - Handling XCN DataType Transformations - strip out the 2nd through 6th sub-components of the FamilyName in component 2, as well as removing components 16 through 23.
		j = 0;
		while (msg[&apos;OBX&apos;][i][&apos;OBX.16&apos;][j] != null){
			//OBX 16.2 - FN DataType
			var obx_16_2_List = msg[&apos;OBX&apos;][i][&apos;OBX.16&apos;][j][&apos;OBX.16.2&apos;].toString().split(&quot;&amp;&quot;);
			var count = (msg[&apos;OBX&apos;][i][&apos;OBX.16&apos;][j][&apos;OBX.16.2&apos;].toString().split(&quot;&amp;&quot;).length - 1);
			msg[&apos;OBX&apos;][i][&apos;OBX.16&apos;][j][&apos;OBX.16.2&apos;] = &apos;&apos;;
			if (count &gt;= 0){
			  msg[&apos;OBX&apos;][i][&apos;OBX.16&apos;][j][&apos;OBX.16.2&apos;] = obx_16_2_List[0] ;
	    	}
			delete msg[&apos;OBX&apos;][i][&apos;OBX.16&apos;][j][&apos;OBX.16.16&apos;];
			delete msg[&apos;OBX&apos;][i][&apos;OBX.16&apos;][j][&apos;OBX.16.17&apos;];
			delete msg[&apos;OBX&apos;][i][&apos;OBX.16&apos;][j][&apos;OBX.16.18&apos;];
			delete msg[&apos;OBX&apos;][i][&apos;OBX.16&apos;][j][&apos;OBX.16.19&apos;];
			delete msg[&apos;OBX&apos;][i][&apos;OBX.16&apos;][j][&apos;OBX.16.20&apos;];
			delete msg[&apos;OBX&apos;][i][&apos;OBX.16&apos;][j][&apos;OBX.16.21&apos;];
			delete msg[&apos;OBX&apos;][i][&apos;OBX.16&apos;][j][&apos;OBX.16.22&apos;];
			delete msg[&apos;OBX&apos;][i][&apos;OBX.16&apos;][j][&apos;OBX.16.23&apos;];
			j++;
		}

		//OBX 17 - Handling CWE DataType Transformations - The first 6 components are mapped to the CE datatype. If all of these fields are empty, meaning there is no coded data, map CWE.9-Original Text to CWE.2
		j = 0;
		while (msg[&apos;OBX&apos;][i][&apos;OBX.17&apos;][j] != null){
			var obx_17 = msg[&apos;OBX&apos;][i][&apos;OBX.17&apos;][j][&apos;OBX.17.1&apos;] + &quot;^&quot; + 
 						 msg[&apos;OBX&apos;][i][&apos;OBX.17&apos;][j][&apos;OBX.17.2&apos;] + &quot;^&quot; + 
						 msg[&apos;OBX&apos;][i][&apos;OBX.17&apos;][j][&apos;OBX.17.3&apos;] + &quot;^&quot; +
			        	 msg[&apos;OBX&apos;][i][&apos;OBX.17&apos;][j][&apos;OBX.17.4&apos;] + &quot;^&quot; +
						 msg[&apos;OBX&apos;][i][&apos;OBX.17&apos;][j][&apos;OBX.17.5&apos;] + &quot;^&quot; +
            	         msg[&apos;OBX&apos;][i][&apos;OBX.17&apos;][j][&apos;OBX.17.6&apos;];
			var obx_17_9 = msg[&apos;OBX&apos;][i][&apos;OBX.17&apos;][j][&apos;OBX.17.9&apos;];
			msg[&apos;OBX&apos;][i][&apos;OBX.17&apos;][j] = &apos;&apos;;
			if (obx_17 == &apos;^^^^^&apos;){
				obx_17 = &apos;^&apos; + msg[&apos;OBX&apos;][i][&apos;OBX.17&apos;][j][&apos;OBX.17.9&apos;] + &apos;^^^^&apos;;
			}
			msg[&apos;OBX&apos;][i][&apos;OBX.17&apos;][j] = obx_17;
			j++;
		}

		i++;
	}

	//NTE
	logger.info(&quot;Handling DataType Transformations for NTE Segment(s)&quot;);	 
	i = 0;
	while(msg[&apos;NTE&apos;][i] != null) {
		//NTE 4 - Handling CWE DataType Transformations - The first 6 components are mapped to the CE datatype. If all of these fields are empty, meaning there is no coded data, map CWE.9-Original Text to CWE.2
		var nte_4 =  msg[&apos;NTE&apos;][i][&apos;NTE.4&apos;][&apos;NTE.4.1&apos;] + &quot;^&quot; +
					 msg[&apos;NTE&apos;][i][&apos;NTE.4&apos;][&apos;NTE.4.2&apos;] + &quot;^&quot; +	
					 msg[&apos;NTE&apos;][i][&apos;NTE.4&apos;][&apos;NTE.4.3&apos;] + &quot;^&quot; +	
					 msg[&apos;NTE&apos;][i][&apos;NTE.4&apos;][&apos;NTE.4.4&apos;] + &quot;^&quot; +	
					 msg[&apos;NTE&apos;][i][&apos;NTE.4&apos;][&apos;NTE.4.5&apos;] + &quot;^&quot; +	
					 msg[&apos;NTE&apos;][i][&apos;NTE.4&apos;][&apos;NTE.4.6&apos;];	
		var nte_4_9 = msg[&apos;NTE&apos;][i][&apos;NTE.4&apos;][&apos;NTE.4.9&apos;];
		msg[&apos;NTE&apos;][i][&apos;NTE.4&apos;] = &apos;&apos;;
		if (nte_4 == &apos;^^^^^&apos;){
			nte_4 = &apos;^&apos; + nte_4_9 + &apos;^^^^&apos;;
		}
		if (nte_4 == &apos;^^^^^&apos;){
			delete msg[&apos;NTE&apos;][i][&apos;NTE.4&apos;];		 
		}else{
			msg[&apos;NTE&apos;][i][&apos;NTE.4&apos;] = nte_4;
		}
		i++;
	}
  }
}

catch(e)
{
  logger.error(&quot;Error in Store transformed message to file Transformer: ORU R01 2.5.1 to 2.3.1 Transformation: &quot; + e.message);
  channelMap.put(&apos;componentErrors&apos;,  $(&apos;componentErrors&apos;) + &quot;Store transformed message to file Transformer: ORU R01 2.5.1 to 2.3.1 Transformation: \n&quot; + e.message + &quot; |\n&quot;);
}</string>
              </entry>
            </data>
          </step>
        </steps>
        <inboundTemplate encoding="base64">TVNIfF5+XCZ8RUxSXjIuMTYuODQwLjEuMTE0MjIyLjQuMy4yLjUuMi4xMF5JU098TGFiMV4xM0Qz
NDU2N15DTElBfERPSF9BUFBMXjIuMTYuODQwLjEuMTE0MjIyLjQuMy4yLjUuMi41MF5JU098RE9I
MV4yLjE2Ljg0MC4xLjExNDIyMi40LjMuMi41LjIuNzAwMF5JU098MjAxMTA1MTExOTIwNTQtMDQw
MHx8T1JVXlIwMV5PUlVfUjAxfDIwMTEwNTAyNHxQfDIuNS4xfHx8TkV8TkV8VVNBfDEyM3x8fFYy
NTFfSUdfTEJfTEFCUlBUUEhfUjFfSU5GT1JNXzIwMTBGRUJeXjIuMTYuODQwLjEuMTE0MjIyLjQu
My4yLjUuMi41XklTT35WMjUxX0lHX0xCX0xBQlJQVFBIX1IxX0lORk9STV8yMDEwRkVCXl4yLjE2
Ljg0MC4xLjExNDIyMi40LjMuMi41LjIuNV5JU08NClNGVHxNaXJ0aCBDb3JwLnwyLjB8TWlydGgg
Q29ubmVjdHw3ODk2NTR8fDIwMTEwMTAxDQpQSUR8MXx8MjI5MV5eXlBPQzEmMi4xNi44NDAuMS4x
MTQyMjIuNC4zLjIuNS4yLjImSVNPXk1SXkRPSDImMi4xNi44NDAuMS4xMTQyMjIuNC4zLjIuNS4y
LjImSVNPXjIwMTEwMTAxXjIwMTMwMTAxXkNPREUmQXNzaWduaW5nSnVyaXNkaWN0aW9uJkxeQ09E
RSZBc3NpZ25pbmdBZ2VuY3lPckRlcGFydG1lbnQmTH4zMDAwXl5eUE9DMSYyLjE2Ljg0MC4xLjEx
NDIyMi40LjMuMi41LjIuMiZJU09eTVJeRE9IMiYyLjE2Ljg0MC4xLjExNDIyMi40LjMuMi41LjIu
MiZJU09eMjAxMTAxMDFeMjAxMzAxMDFeQ09ERSZBc3NpZ25pbmdKdXJpc2RpY3Rpb24mTF5DT0RF
JkFzc2lnbmluZ0FnZW5jeU9yRGVwYXJ0bWVudCZMfHxORVdNQU4mT3duU05QcmZ4JiYmU05Gcm9t
UGFydG5lcl5FTFNJRV5NXlNVRkZJWF5QUkVGSVheREVHUkVFXkxeXkNPTlRFWFQmJkxeXl4yMDEx
MDEzMV4yMTEzMTIzMV5wcm9mZXNzaW9uYWwgc3VmZml4flBJRDVSZXBlYXQmT3duU05QcmZ4JiYm
U05Gcm9tUGFydG5lcl5FTFNJRV5NXlNVRkZJWF5QUkVGSVheREVHUkVFXkxeXkNPTlRFWFQmJkxe
Xl4yMDExMDEzMV4yMTEzMTIzMV5wcm9mZXNzaW9uYWwgc3VmZml4fE1PVEhFUlNNQUlERU4mT3du
U05QcmZ4JiYmU05Gcm9tUGFydG5lcl5NT01eTUleU1VGRklYXlBSRUZJWF5ERUdSRUVeTF5eQ09O
VEVYVCYmTF5eXjIwMTEwMTMxXjIxMTMxMjMxXnByb2Zlc3Npb25hbCBzdWZmaXh8MTk1MjAzMTR8
Rnx8MjA3Ni04XkFtZXJpY2FuIEluZGlhbiBvciBBbGFza2EgTmF0aXZlXkNEQ1JFQ34yMTA2LTNe
V2hpdGVeQ0RDUkVDfDQwMCBTa3lsYXJrIEF2ZW51ZSZTdHJlZXROYW1lJkR3ZWxsaW5nTm9eXkNp
bmNpbm5hdGleT0heNDUyMDF+MTI2IFJlcGVhdCBBdmVudWUmU3RyZWV0TmFtZSZEd2VsbGluZ05v
Xl5DaW5jaW5uYXRpXk9IXjQ1MjAxfHxeXl5eXjUxM140NDQxMjM0fl5eXl5eNjEzXjYxMzEyMzR8
Xl5eXl41NTVeNTU1MTIzNH5eXl5eXjYwMF42MDAxMjM0fEVeRW5nbGlzaF5DRENSRUN+IFNeU3Bh
bmlzaF5DRENSRUN8bV5tYXJpZWReQ0RDUkVDIHxCXmJhcHRpc3QgXkNEQ1JFQ3wgMTIzNF5eXlBP
QzEmMi4xNi44NDAuMS4xMTQyMjIuNC4zLjIuNS4yLjImSVNPXk1SXkRPSDImMi4xNi44NDAuMS4x
MTQyMjIuNC4zLjIuNS4yLjImSVNPXjIwMTEwMTAxXjIwMTMwMTAxXkNPREUmQXNzaWduaW5nSnVy
aXNkaWN0aW9uJkxeQ09ERSZBc3NpZ25pbmdBZ2VuY3lPckRlcGFydG1lbnQmTCB8fHxNXl5eUE9D
MSYyLjE2Ljg0MC4xLjExNDIyMi40LjMuMi41LjIuMiZJU09eTVJeRE9IMiYyLjE2Ljg0MC4xLjEx
NDIyMi40LjMuMi41LjIuMiZJU09eMjAxMTAxMDFeMjAxMzAxMDFeQ09ERSZBc3NpZ25pbmdKdXJp
c2RpY3Rpb24mTF5DT0RFJkFzc2lnbmluZ0FnZW5jeU9yRGVwYXJ0bWVudCZMfk1PTV5eXlBPQzEm
Mi4xNi44NDAuMS4xMTQyMjIuNC4zLjIuNS4yLjImSVNPXk1SXkRPSDImMi4xNi44NDAuMS4xMTQy
MjIuNC4zLjIuNS4yLjImSVNPXjIwMTEwMTAxXjIwMTMwMTAxXkNPREUmQXNzaWduaW5nSnVyaXNk
aWN0aW9uJkxeQ09ERSZBc3NpZ25pbmdBZ2VuY3lPckRlcGFydG1lbnQmTHwyMTg2LTVeTm9uLUhp
c3BhbmljIG9yIExhdGlub15DRENSRUN+MjEzNS0yXiBIaXNwYW5pYyBvciBMYXRpbm9eQ0RDUkVD
fHx8fDFeQ2l0aXplbnNoaXBeQ0RDUkVDfjJeIFJlcGVhdENpdGl6ZW5zaGlwXkNEQ1JFQ3x8fHx8
fFNeVCB8fHx8fHxQXlByb2R1Y3QgQ2xhc3NeQ0RDUkVDflJeUmVwZWF0UENeQ0RDUkVDfDFeVHJp
YmFsQ2l0aXplbnNoaXBeQ0RDUkVDfjJeUmVwZWF0VENpdGl6ZW5zaGlwXkNEQ1JFQw0KUEQxfFN+
TX5Dfk98SU58UEQxLTMgT1JHQU5JWkFUSU9OIE5BTUVeTF5eMV5NMTBeJkhvc3BpdGFsIE1hc3Rl
ciBDb21tdW5pdHkgSGVhbHRoIGFuZCBIb3NwaXRhbHMmTF5YWF4mQ2VudHJhbCBPZmZpY2VzLkNv
bW11bml0eSBIZWFsdGggYW5kIEhvc3BpdGFscyZMXkFeNEQzNDg5Mzg0flBEMS0zIE9SR0FOSVpB
VElPTiBOQU1FXkxeXjFeTTEwXiZIb3NwaXRhbCBNYXN0ZXIgQ29tbXVuaXR5IEhlYWx0aCBhbmQg
SG9zcGl0YWxzJkxeWFheJkNlbnRyYWwgT2ZmaWNlcy5Db21tdW5pdHkgSGVhbHRoIGFuZCBIb3Nw
aXRhbHMmTF5BXjREMzQ4OTM4NHxQRDEtNF5GYW1pbHlOYW1lJk93blNOUHJmeCYmJlNORnJvbVBh
cnRuZXJeR2l2ZW5uYW1lXlNlY29uZG5hbWVeU3VmZml4XlByZWZpeF5EZWdyZWVeU1JDXkNPREUm
QXNzaWduaW5nQXV0aG9yaXR5Jk9JRF5MXjFeTTEwXk5QSV5DT0RFJkFzc2lnbmluZ0ZhY2lsaXR5
Jk9JRF5BXkNPTlRFWFQmQ29udGV4dCBEZXNjcmlwdGlvbiZMXl5eMjAxMDAxMDFeMjExMjEyMzFe
cHJvZmVzc2lvbmFsIHN1ZmZpeF5DV0UmYXNzaWduaW5nSnVyaXNkaWN0aW9uJkxeQ1dFJmFzc2ln
bkFnY3lPckRlcHQmTH5QRDEtNF5GYW1pbHlOYW1lJk93blNOUHJmeCYmJlNORnJvbVBhcnRuZXJe
R2l2ZW5uYW1lXlNlY29uZG5hbWVeU3VmZml4XlByZWZpeF5EZWdyZWVeU1JDXkNPREUmQXNzaWdu
aW5nQXV0aG9yaXR5Jk9JRF5MXjFeTTEwXk5QSV5DT0RFJkFzc2lnbmluZ0ZhY2lsaXR5Jk9JRF5B
XkNPTlRFWFQmQ29udGV4dCBEZXNjcmlwdGlvbiZMXl5eMjAxMDAxMDFeMjExMjEyMzFecHJvZmVz
c2lvbmFsIHN1ZmZpeF5DV0UmYXNzaWduaW5nSnVyaXNkaWN0aW9uJkxeQ1dFJmFzc2lnbkFnY3lP
ckRlcHQmTHxQfEJMfEZ8WXxOfDIyOTFeXl5QRDEtMTBUZXN0JjIuMTYuODQwLjEuMTE0MjIyLjQu
My4yLjUuMi4yJklTT15NUl5ET0gyJjIuMTYuODQwLjEuMTE0MjIyLjQuMy4yLjUuMi4yJklTT14y
MDExMDEwMV4yMDEzMDEwMV5DT0RFJkFzc2lnbmluZ0p1cmlzZGljdGlvbiZMXkNPREUmQXNzaWdu
aW5nQWdlbmN5T3JEZXBhcnRtZW50Jkx+MjI5MV5eXlBEMS0xMFRlc3QmMi4xNi44NDAuMS4xMTQy
MjIuNC4zLjIuNS4yLjImSVNPXk1SXkRPSDImMi4xNi44NDAuMS4xMTQyMjIuNC4zLjIuNS4yLjIm
SVNPXjIwMTEwMTAxXjIwMTMwMTAxXkNPREUmQXNzaWduaW5nSnVyaXNkaWN0aW9uJkxeQ09ERSZB
c3NpZ25pbmdBZ2VuY3lPckRlcGFydG1lbnQmTHxGfE58fFBEMS0xNCBQTEFDRSBPRiBXT1JTSElQ
XkxeMTIzNDU2Nzg5MF4xXk0xMF4mSG9zcGl0YWwgTWFzdGVyIENvbW11bml0eSBIZWFsdGggYW5k
IEhvc3BpdGFscyZMXlhYXiZDZW50cmFsIE9mZmljZXMuQ29tbXVuaXR5IEhlYWx0aCBhbmQgSG9z
cGl0YWxzJkxeQX5QRDEtMTQgUExBQ0UgT0YgV09SU0hJUF5MXjEyMzQ1Njc4OTBeMV5NMTBeJkhv
c3BpdGFsIE1hc3RlciBDb21tdW5pdHkgSGVhbHRoIGFuZCBIb3NwaXRhbHMmTF5YWF4mQ2VudHJh
bCBPZmZpY2VzLkNvbW11bml0eSBIZWFsdGggYW5kIEhvc3BpdGFscyZMXkF8Q09ERV5BZHZhbmNl
ZCBEaXJlY3RpdmUgQ29kZV5MfkNPREUyXkFkdmFuY2VkIERpcmVjdGl2ZSBDb2RlIDJeTA0KTlRF
fDF8THxwYXRpZW50IGxldmVsIGNvbW1lbnQgIHdpdGggY29tbWVudCBzb3VyY2UgbGFiIGluZGlj
YXRlZHwNCk5LMXwxfE5PS0xBU1ROQU1FJk93blNOUHJmeCYmJlNORnJvbVBhcnRuZXJeR0lWRU5e
U0VDT05EXlNVRkZJWF5QUkVGSVheREVHUkVFXkxeXkNPTlRFWFQmJkxeXl4yMDExMDEzMV4yMTEz
MTIzMV5wcm9mZXNzaW9uYWx+UkVQRUFUTEFTVE5BTUUmT3duU05QcmZ4JiYmU05Gcm9tUGFydG5l
cl5HSVZFTl5TRUNPTkReU1VGRklYXlBSRUZJWF5ERUdSRUVeTF5eQ09OVEVYVCYmTF5eXjIwMTEw
MTMxXjIxMTMxMjMxXnByb2Zlc3Npb25hbCBzdWZmaXggc3VmZml4fE1USF5Nb3RoZXJeSEw3MDA2
M15NT15Nb3RoZXJeTF4yLjUuMV4yMDExMTIxMl5vcmlnaW5hbHRleHQgZmllbGReTF5Mb2NhbF5M
XjIwMDEyMTJeT0lEfDQ0NCBIb21lIFN0cmVldCZTdHJlZXROYW1lJkR3ZWxsaW5nTm9eXk1hY29u
XkdBXjMwMDAxfjU1NSBIb21lIFN0cmVldCZTdHJlZXROYW1lJkR3ZWxsaW5nTm9eXk1hY29uXkdB
XjMwMDAxfF5QUk5eUEheXjFeNTU1XjU1NTIwMDZ+XlBSTl5QSF5eMV42MDBeNjAwMjAwNnx8fHx8
fHwyMjkxXl5eTksxLTEyVGVzdCYyLjE2Ljg0MC4xLjExNDIyMi40LjMuMi41LjIuMiZJU09eTVJe
RE9IMiYyLjE2Ljg0MC4xLjExNDIyMi40LjMuMi41LjIuMiZJU09eMjAxMTAxMDFeMjAxMzAxMDFe
Q09ERSZBc3NpZ25pbmdKdXJpc2RpY3Rpb24mTF5DT0RFJkFzc2lnbmluZ0FnZW5jeU9yRGVwYXJ0
bWVudCZMfHx8fHx8fHx8fHx8fHx8fHx8fHxOSzEtMzIgVGVzdCBIb21lIFN0cmVldCZTdHJlZXRO
YW1lJkR3ZWxsaW5nTm9eXk1hY29uXkdBXjMwMDAxfDIyOTFeXl5OSzEtMzNUZXN0JjIuMTYuODQw
LjEuMTE0MjIyLjQuMy4yLjUuMi4yJklTT15NUl5ET0gyJjIuMTYuODQwLjEuMTE0MjIyLjQuMy4y
LjUuMi4yJklTT14yMDExMDEwMV4yMDEzMDEwMV5DT0RFJkFzc2lnbmluZ0p1cmlzZGljdGlvbiZM
XkNPREUmQXNzaWduaW5nQWdlbmN5T3JEZXBhcnRtZW50JkwNCk5LMXwyfE5PS0xBU1ROQU1FMiZP
d25TTlByZngmJiZTTkZyb21QYXJ0bmVyXkdJVkVOXlNFQ09ORF5TVUZGSVheUFJFRklYXkRFR1JF
RV5MXl5DT05URVhUJiZMXl5eMjAxMTAxMzFeMjExMzEyMzFecHJvZmVzc2lvbmFsIHN1ZmZpeHxN
VEheTW90aGVyXkhMNzAwNjNeTU9eTW90aGVyXkxeMi41LjFeMjAxMTEyMTJeb3JpZ2luYWx0ZXh0
IGZpZWxkXkxeTG9jYWxeTF4yMDAxMjEyXk9JRHw0NDQgSG9tZSBTdHJlZXQmU3RyZWV0TmFtZSZE
d2VsbGluZ05vXl5NYWNvbl5HQV4zMDAwMXxeUFJOXlBIXl4xXjU1NV41NTUyMDA2fHx8fHx8fDIy
OTFeXl5OSzEtMTJUZXN0JjIuMTYuODQwLjEuMTE0MjIyLjQuMy4yLjUuMi4yJklTT15NUl5ET0gy
JjIuMTYuODQwLjEuMTE0MjIyLjQuMy4yLjUuMi4yJklTT14yMDExMDEwMV4yMDEzMDEwMV5DT0RF
JkFzc2lnbmluZ0p1cmlzZGljdGlvbiZMXkNPREUmQXNzaWduaW5nQWdlbmN5T3JEZXBhcnRtZW50
Jkx8TksxLTEzIE9SR0FOSVpBVElPTiBOQU1FXkxeXjFeTTEwXiZIb3NwaXRhbCBNYXN0ZXIgQ29t
bXVuaXR5IEhlYWx0aCBhbmQgSG9zcGl0YWxzJkxeWFheJkNlbnRyYWwgT2ZmaWNlcy5Db21tdW5p
dHkgSGVhbHRoIGFuZCBIb3NwaXRhbHMmTF5BXjEyMzQ1Njc4OTB8fHx8fHx8fHx8fHx8TksxLTI2
TEFTVE5BTUUmT3duU05QcmZ4JiYmU05Gcm9tUGFydG5lcl5HSVZFTl5TRUNPTkReU1VGRklYXlBS
RUZJWF5ERUdSRUVeTF5eQ09OVEVYVCYmTF5eXjIwMTEwMTMxXjIxMTMxMjMxXnByb2Zlc3Npb25h
bCBzdWZmaXh8fHx8TksxLTMwTEFTVE5BTUUmT3duU05QcmZ4JiYmU05Gcm9tUGFydG5lcl5HSVZF
Tl5TRUNPTkReU1VGRklYXlBSRUZJWF5ERUdSRUVeTF5eQ09OVEVYVCYmTF5eXjIwMTEwMTMxXjIx
MTMxMjMxXnByb2Zlc3Npb25hbCBzdWZmaXh+TksxLTMwUmVwZWF0TEFTVE5BTUUmT3duU05QcmZ4
JiYmU05Gcm9tUGFydG5lcl5HSVZFTl5TRUNPTkReU1VGRklYXlBSRUZJWF5ERUdSRUVeTF5eQ09O
VEVYVCYmTF5eXjIwMTEwMTMxXjIxMTMxMjMxXnByb2Zlc3Npb25hbCBzdWZmaXh8XlBSTl5QSF5e
MV41NTVeNTU1MjAwNn5eUFJOXlBIXl4xXjc3N143NzcyMDA2fDQ0NCBIb21lIFN0cmVldCZTdHJl
ZXROYW1lJkR3ZWxsaW5nTm9eXk1hY29uXkdBXjMwMDAxfjU1NSBIb21lIFN0cmVldCZTdHJlZXRO
YW1lJkR3ZWxsaW5nTm9eXk1hY29uXkdBXjMwMDAxfDIyOTFeXl5OSzEtMjJUZXN0JjIuMTYuODQw
LjEuMTE0MjIyLjQuMy4yLjUuMi4yJklTT15NUl5ET0gyJjIuMTYuODQwLjEuMTE0MjIyLjQuMy4y
LjUuMi4yJklTT14yMDExMDEwMV4yMDEzMDEwMV5DT0RFJkFzc2lnbmluZ0p1cmlzZGljdGlvbiZM
XkNPREUmQXNzaWduaW5nQWdlbmN5T3JEZXBhcnRtZW50JkwNClBWMXwxfE98UFYxLTNeMjM0XkFe
R29vZCBIZWFsdGggSG9zcGl0YWwmMi4xNi44NDAuMS4xMTM4ODMuMTkuMy4yLjMmSVNPXk5eTl5C
dWlsZGluZyAxXjReTnVyc2luZyB1bml0IDQgRWFzdF4xMjM0JiYyLjE2Ljg0MC4xLjExMzg4My4x
OS4zLjIuMyZJU09eJjIuMTYuODQwLjEuMTEzODgzLjE5LjMuMi4zJklTT3xSfDIyOTFeXl5QVjEt
NVRlc3QmMi4xNi44NDAuMS4xMTQyMjIuNC4zLjIuNS4yLjImSVNPXk1SXkRPSDImMi4xNi44NDAu
MS4xMTQyMjIuNC4zLjIuNS4yLjImSVNPXjIwMTEwMTAxXjIwMTMwMTAxXkNPREUmQXNzaWduaW5n
SnVyaXNkaWN0aW9uJkxeQ09ERSZBc3NpZ25pbmdBZ2VuY3lPckRlcGFydG1lbnQmTHxQVjEtNl4y
MzReQV5Hb29kIEhlYWx0aCBIb3NwaXRhbCYyLjE2Ljg0MC4xLjExMzg4My4xOS4zLjIuMyZJU09e
Tl5OXkJ1aWxkaW5nIDFeNF5OdXJzaW5nIHVuaXQgNCBFYXN0XjEyMzQmJjIuMTYuODQwLjEuMTEz
ODgzLjE5LjMuMi4zJklTT14mMi4xNi44NDAuMS4xMTM4ODMuMTkuMy4yLjMmSVNPfDEyMzQ1Njc4
OTBeQVRURU5ESU5HJiYmU05Gcm9tUGFydG5lcl5HaXZlbm5hbWVeU2Vjb25kbmFtZV5TdWZmaXhe
UHJlZml4XkRlZ3JlZV5TUkNeQ09ERSZBc3NpZ25pbmdBdXRob3JpdHkmT0lEXkxeMV5NMTBeTlBJ
XkNPREUmQXNzaWduaW5nRmFjaWxpdHkmT0lEXkFeQ09OVEVYVCZDb250ZXh0IERlc2NyaXB0aW9u
JkxeXl4yMDEwMDEwMV4yMTEyMTIzMV5wcm9mZXNzaW9uYWwgc3VmZml4XkNXRSZhc3NpZ25pbmdK
dXJpc2RpY3Rpb24mTF5DV0UmYXNzaWduQWdjeU9yRGVwdCZMfjY4Nzk5OTZeUkVQRUFUJiYmU05G
cm9tUGFydG5lcl5HaXZlbm5hbWVeU2Vjb25kbmFtZV5TdWZmaXheUHJlZml4XkRlZ3JlZV5TUkNe
Q09ERSZBc3NpZ25pbmdBdXRob3JpdHkmT0lEXkxeMV5NMTBeTlBJXkNPREUmQXNzaWduaW5nRmFj
aWxpdHkmT0lEXkFeQ09OVEVYVCZDb250ZXh0IERlc2NyaXB0aW9uJkxeXl4yMDEwMDEwMV4yMTEy
MTIzMV5wcm9mZXNzaW9uYWwgc3VmZml4XkNXRSZhc3NpZ25pbmdKdXJpc2RpY3Rpb24mTF5DV0Um
YXNzaWduQWdjeU9yRGVwdCZMIHwxMjM0NTY3ODkwXlJFRkVSUklORyYmJlNORnJvbVBhcnRuZXJe
R2l2ZW5uYW1lXlNlY29uZG5hbWVeU3VmZml4XlByZWZpeF5EZWdyZWVeU1JDXkNPREUmQXNzaWdu
aW5nQXV0aG9yaXR5Jk9JRF5MXjFeTTEwXk5QSV5DT0RFJkFzc2lnbmluZ0ZhY2lsaXR5Jk9JRF5B
XkNPTlRFWFQmQ29udGV4dCBEZXNjcmlwdGlvbiZMXl5eMjAxMDAxMDFeMjExMjEyMzFecHJvZmVz
c2lvbmFsIHN1ZmZpeF5DV0UmYXNzaWduaW5nSnVyaXNkaWN0aW9uJkxeQ1dFJmFzc2lnbkFnY3lP
ckRlcHQmTH42Nzg5MF5SRVBFQVRHJiYmU05Gcm9tUGFydG5lcl5HaXZlbm5hbWVeU2Vjb25kbmFt
ZV5TdWZmaXheUHJlZml4XkRlZ3JlZV5TUkNeQ09ERSZBc3NpZ25pbmdBdXRob3JpdHkmT0lEXkxe
MV5NMTBeTlBJXkNPREUmQXNzaWduaW5nRmFjaWxpdHkmT0lEXkFeQ09OVEVYVCZDb250ZXh0IERl
c2NyaXB0aW9uJkxeXl4yMDEwMDEwMV4yMTEyMTIzMV5wcm9mZXNzaW9uYWwgc3VmZml4XkNXRSZh
c3NpZ25pbmdKdXJpc2RpY3Rpb24mTF5DV0UmYXNzaWduQWdjeU9yRGVwdCZMIHwxMjM0NTY3ODkw
XkNPTlNVTFRJTkcmJiZTTkZyb21QYXJ0bmVyXkdpdmVubmFtZV5TZWNvbmRuYW1lXlN1ZmZpeF5Q
cmVmaXheRGVncmVlXlNSQ15DT0RFJkFzc2lnbmluZ0F1dGhvcml0eSZPSUReTF4xXk0xMF5OUEle
Q09ERSZBc3NpZ25pbmdGYWNpbGl0eSZPSUReQV5DT05URVhUJkNvbnRleHQgRGVzY3JpcHRpb24m
TF5eXjIwMTAwMTAxXjIxMTIxMjMxXnByb2Zlc3Npb25hbCBzdWZmaXheQ1dFJmFzc2lnbmluZ0p1
cmlzZGljdGlvbiZMXkNXRSZhc3NpZ25BZ2N5T3JEZXB0Jkx+MTIzMzg5MF5SRVBFQVQmJiZTTkZy
b21QYXJ0bmVyXkdpdmVubmFtZV5TZWNvbmRuYW1lXlN1ZmZpeF5QcmVmaXheRGVncmVlXlNSQ15D
T0RFJkFzc2lnbmluZ0F1dGhvcml0eSZPSUReTF4xXk0xMF5OUEleQ09ERSZBc3NpZ25pbmdGYWNp
bGl0eSZPSUReQV5DT05URVhUJkNvbnRleHQgRGVzY3JpcHRpb24mTF5eXjIwMTAwMTAxXjIxMTIx
MjMxXnByb2Zlc3Npb25hbCBzdWZmaXheQ1dFJmFzc2lnbmluZ0p1cmlzZGljdGlvbiZMXkNXRSZh
c3NpZ25BZ2N5T3JEZXB0JkwgfHxQVjEtMTFeMjM0XkFeR29vZCBIZWFsdGggSG9zcGl0YWwmMi4x
Ni44NDAuMS4xMTM4ODMuMTkuMy4yLjMmSVNPXk5eTl5CdWlsZGluZyAxXjReTnVyc2luZyB1bml0
IDQgRWFzdF4xMjM0JiYyLjE2Ljg0MC4xLjExMzg4My4xOS4zLjIuMyZJU09eJjIuMTYuODQwLjEu
MTEzODgzLjE5LjMuMi4zJklTT3x8fHx8fDEyMzQ1Njc4OTBeQURNSVRUSU5HJiYmU05Gcm9tUGFy
dG5lcl5HaXZlbm5hbWVeU2Vjb25kbmFtZV5TdWZmaXheUHJlZml4XkRlZ3JlZV5TUkNeQ09ERSZB
c3NpZ25pbmdBdXRob3JpdHkmT0lEXkxeMV5NMTBeTlBJXkNPREUmQXNzaWduaW5nRmFjaWxpdHkm
T0lEXkFeQ09OVEVYVCZDb250ZXh0IERlc2NyaXB0aW9uJkxeXl4yMDEwMDEwMV4yMTEyMTIzMV5w
cm9mZXNzaW9uYWwgc3VmZml4XkNXRSZhc3NpZ25pbmdKdXJpc2RpY3Rpb24mTF5DV0UmYXNzaWdu
QWdjeU9yRGVwdCZMfjY1NDc4OTNeUkVQRUFUJiYmU05Gcm9tUGFydG5lcl5HaXZlbm5hbWVeU2Vj
b25kbmFtZV5TdWZmaXheUHJlZml4XkRlZ3JlZV5TUkNeQ09ERSZBc3NpZ25pbmdBdXRob3JpdHkm
T0lEXkxeMV5NMTBeTlBJXkNPREUmQXNzaWduaW5nRmFjaWxpdHkmT0lEXkFeQ09OVEVYVCZDb250
ZXh0IERlc2NyaXB0aW9uJkxeXl4yMDEwMDEwMV4yMTEyMTIzMV5wcm9mZXNzaW9uYWwgc3VmZml4
XkNXRSZhc3NpZ25pbmdKdXJpc2RpY3Rpb24mTF5DV0UmYXNzaWduQWdjeU9yRGVwdCZMIHxFfDIy
OTFeXl5QVjEtMTlWaXNpdE51bWJlciYyLjE2Ljg0MC4xLjExNDIyMi40LjMuMi41LjIuMiZJU09e
TVJeRE9IMiYyLjE2Ljg0MC4xLjExNDIyMi40LjMuMi41LjIuMiZJU09eMjAxMTAxMDFeMjAxMzAx
MDFeQ09ERSZBc3NpZ25pbmdKdXJpc2RpY3Rpb24mTF5DT0RFJkFzc2lnbmluZ0FnZW5jeU9yRGVw
YXJ0bWVudCZMfFheMjAwOTA2MDJ8fHx8fHx8fHx8fHx8fHx8fHx8fHx8UFYxNDJeMjM0XkFeR29v
ZCBIZWFsdGggSG9zcGl0YWwmMi4xNi44NDAuMS4xMTM4ODMuMTkuMy4yLjMmSVNPXk5eTl5CdWls
ZGluZyAxXjReTnVyc2luZyB1bml0IDQgRWFzdF4xMjM0JiYyLjE2Ljg0MC4xLjExMzg4My4xOS4z
LjIuMyZJU09eJjIuMTYuODQwLjEuMTEzODgzLjE5LjMuMi4zJklTT3xQVjE0M14yMzReQV5Hb29k
IEhlYWx0aCBIb3NwaXRhbCYyLjE2Ljg0MC4xLjExMzg4My4xOS4zLjIuMyZJU09eTl5OXkJ1aWxk
aW5nIDFeNF5OdXJzaW5nIHVuaXQgNCBFYXN0XjEyMzQmJjIuMTYuODQwLjEuMTEzODgzLjE5LjMu
Mi4zJklTT14mMi4xNi44NDAuMS4xMTM4ODMuMTkuMy4yLjMmSVNPfDIwMDgwODE1MTAwMC0wNzAw
fDIwMDcwOTE1MTIwMC0wNzAwfjIwMDgwODE1MTIwMC0wNzAwfHx8fHwyMjkxXl5eUElEMlRlc3Qm
Mi4xNi44NDAuMS4xMTQyMjIuNC4zLjIuNS4yLjImSVNPXk1SXkRPSDImMi4xNi44NDAuMS4xMTQy
MjIuNC4zLjIuNS4yLjImSVNPXjIwMTEwMTAxXjIwMTMwMTAxXkNPREUmQXNzaWduaW5nSnVyaXNk
aWN0aW9uJkxeQ09ERSZBc3NpZ25pbmdBZ2VuY3lPckRlcGFydG1lbnQmTA0KUFYyfFBWMi0xVGVz
dF4yMzReQV5Hb29kIEhlYWx0aCBIb3NwaXRhbCYyLjE2Ljg0MC4xLjExMzg4My4xOS4zLjIuMyZJ
U09eTl5OXkJ1aWxkaW5nIDFeNF5OdXJzaW5nIHVuaXQgNCBFYXN0XjEyMzQmJjIuMTYuODQwLjEu
MTEzODgzLjE5LjMuMi4zJklTT14mMi4xNi44NDAuMS4xMTM4ODMuMTkuMy4yLjMmSVNPfHwxXlNp
Y2teSTl8fHx8fHx8fHx8MTIzNDU2Nzg5MF5SRUZFUlJBTF9TT1VSQ0UmJiZTTkZyb21QYXJ0bmVy
XkdpdmVubmFtZV5TZWNvbmRuYW1lXlN1ZmZpeF5QcmVmaXheRGVncmVlXlNSQ15DT0RFJkFzc2ln
bmluZ0F1dGhvcml0eSZPSUReTF4xXk0xMF5OUEleQ09ERSZBc3NpZ25pbmdGYWNpbGl0eSZPSURe
QV5DT05URVhUJkNvbnRleHQgRGVzY3JpcHRpb24mTF5eXjIwMTAwMTAxXjIxMTIxMjMxXnByb2Zl
c3Npb25hbCBzdWZmaXheQ1dFJmFzc2lnbmluZ0p1cmlzZGljdGlvbiZMXkNXRSZhc3NpZ25BZ2N5
T3JEZXB0Jkx8fHxOfHx8fHx8fEdlbmVyYWwgSG9zcGl0YWxeTF5eXl5uYW1lU3BhY2VJRCYyLjE2
Ljg0MC4xLjExMzg4My4xOS40LjYmSVNPXlhYXm5hbWVTcGFjZUlEJjIuMTYuODQwLjEuMTEzODgz
LjE5LjQuNiZJU09eQV5PcmdJRDEyMzQ1Njc4OX5SZXBlYXQgSG9zcGl0YWxeTF5eXl5uYW1lU3Bh
Y2VJRCYyLjE2Ljg0MC4xLjExMzg4My4xOS40LjYmSVNPXlhYXm5hbWVTcGFjZUlEJjIuMTYuODQw
LjEuMTEzODgzLjE5LjQuNiZJU09eQV5PcmdJRDEyMzQ1Njc4OXx8fDIwMDEwNjAzfHx8MTk5OTA2
MDN8fHx8fHx8fHx8Q09ERV5SRUNSRUFUSU9OQUwgRFJVRyBVU0VeTH5DT0RFXlJFQ1JFQVRJT05B
TCBEUlVHIFVTRV5MfHxDT0RFXlBSRUNBVVRJT04gQ09ERV5MfkNPREVeUFJFQ0FVVElPTiBDT0RF
Xkx8fHx8Q09ERV5BRFZBTkNFRCBESVJFQ1RJVkUgQ09ERV5MfkNPREVeQURWQU5DRUQgRElSRUNU
SVZFIENPREVeTHx8fHxDTEVSR1kNCk9SQ3xSRXx8Q0hFTTk3MDAxMjJeTWVkaUxhYkNvLVNlYXR0
bGVeNDVEMDQ3MDM4MV5DTElBfHx8fHx8fDEyMzQ1Njc4OTBeRU5URVJFRF9CWSYmJlNORnJvbVBh
cnRuZXJeR2l2ZW5uYW1lXlNlY29uZG5hbWVeU3VmZml4XlByZWZpeF5EZWdyZWVeU1JDXkNPREUm
QXNzaWduaW5nQXV0aG9yaXR5Jk9JRF5MXjFeTTEwXk5QSV5DT0RFJkFzc2lnbmluZ0ZhY2lsaXR5
Jk9JRF5BXkNPTlRFWFQmQ29udGV4dCBEZXNjcmlwdGlvbiZMXl5eMjAxMDAxMDFeMjExMjEyMzFe
cHJvZmVzc2lvbmFsIHN1ZmZpeF5DV0UmYXNzaWduaW5nSnVyaXNkaWN0aW9uJkxeQ1dFJmFzc2ln
bkFnY3lPckRlcHQmTH4wOTg3NjU0M15SZXBlYXQmJiZTTkZyb21QYXJ0bmVyXkdpdmVubmFtZV5T
ZWNvbmRuYW1lXlN1ZmZpeF5QcmVmaXheRGVncmVlXlNSQ15DT0RFJkFzc2lnbmluZ0F1dGhvcml0
eSZPSUReTF4xXk0xMF5OUEleQ09ERSZBc3NpZ25pbmdGYWNpbGl0eSZPSUReQV5DT05URVhUJkNv
bnRleHQgRGVzY3JpcHRpb24mTF5eXjIwMTAwMTAxXjIxMTIxMjMxXnByb2Zlc3Npb25hbCBzdWZm
aXheQ1dFJmFzc2lnbmluZ0p1cmlzZGljdGlvbiZMXkNXRSZhc3NpZ25BZ2N5T3JEZXB0Jkx8MTIz
NDU2Nzg5MF5WRVJJRklFRF9CWSYmJlNORnJvbVBhcnRuZXJeR2l2ZW5uYW1lXlNlY29uZG5hbWVe
U3VmZml4XlByZWZpeF5EZWdyZWVeU1JDXkNPREUmQXNzaWduaW5nQXV0aG9yaXR5Jk9JRF5MXjFe
TTEwXk5QSV5DT0RFJkFzc2lnbmluZ0ZhY2lsaXR5Jk9JRF5BXkNPTlRFWFQmQ29udGV4dCBEZXNj
cmlwdGlvbiZMXl5eMjAxMDAxMDFeMjExMjEyMzFecHJvZmVzc2lvbmFsIHN1ZmZpeF5DV0UmYXNz
aWduaW5nSnVyaXNkaWN0aW9uJkxeQ1dFJmFzc2lnbkFnY3lPckRlcHQmTH41NDYzOTg3XlJlcGVh
dF9CWSYmJlNORnJvbVBhcnRuZXJeR2l2ZW5uYW1lXlNlY29uZG5hbWVeU3VmZml4XlByZWZpeF5E
ZWdyZWVeU1JDXkNPREUmQXNzaWduaW5nQXV0aG9yaXR5Jk9JRF5MXjFeTTEwXk5QSV5DT0RFJkFz
c2lnbmluZ0ZhY2lsaXR5Jk9JRF5BXkNPTlRFWFQmQ29udGV4dCBEZXNjcmlwdGlvbiZMXl5eMjAx
MDAxMDFeMjExMjEyMzFecHJvZmVzc2lvbmFsIHN1ZmZpeF5DV0UmYXNzaWduaW5nSnVyaXNkaWN0
aW9uJkxeQ1dFJmFzc2lnbkFnY3lPckRlcHQmTHwxMjM0Xk9SREVSSU5HX1BST1ZeR2l2ZW5uYW1l
XlNlY29uZG5hbWVeU3VmZml4XlByZWZpeF5EZWdyZWVeU1JDXkNPREUmQXNzaWduaW5nQXV0aG9y
aXR5Jk9JRF5MXjFeTTEwXk5QSV5DT0RFJkFzc2lnbmluZ0ZhY2lsaXR5Jk9JRF5BXkNPTlRFWFQm
Q29udGV4dCBEZXNjcmlwdGlvbiZMXl5eMjAxMDAxMDFeMjExMjEyMzFecHJvZmVzc2lvbmFsIHN1
ZmZpeF5DV0UmYXNzaWduaW5nSnVyaXNkaWN0aW9uJkxeQ1dFJmFzc2lnbkFnY3lPckRlcHQmTH41
Njc4OV5ST1JERVJJTkdfUFJPVl5HaXZlbm5hbWVeU2Vjb25kbmFtZV5TdWZmaXheUHJlZml4XkRl
Z3JlZV5TUkNeQ09ERSZBc3NpZ25pbmdBdXRob3JpdHkmT0lEXkxeMV5NMTBeTlBJXkNPREUmQXNz
aWduaW5nRmFjaWxpdHkmT0lEXkFeQ09OVEVYVCZDb250ZXh0IERlc2NyaXB0aW9uJkxeXl4yMDEw
MDEwMV4yMTEyMTIzMV5wcm9mZXNzaW9uYWwgc3VmZml4XkNXRSZhc3NpZ25pbmdKdXJpc2RpY3Rp
b24mTF5DV0UmYXNzaWduQWdjeU9yRGVwdCZMfE9SQzEzXjIzNF5BXkdvb2QgSGVhbHRoIEhvc3Bp
dGFsJjIuMTYuODQwLjEuMTEzODgzLjE5LjMuMi4zJklTT15OXk5eQnVpbGRpbmcgMV40Xk51cnNp
bmcgdW5pdCA0IEVhc3ReMTIzNCYmMi4xNi44NDAuMS4xMTM4ODMuMTkuMy4yLjMmSVNPXiYyLjE2
Ljg0MC4xLjExMzg4My4xOS4zLjIuMyZJU098XldQTl5QSF5eMV41NTVeNTU1MTAwNX5eV1BOXlBI
Xl4xXjc3N143NzcxMDA1fHx8fHwxMjM0NTY3ODkwXlJFU1VMVF9DT1BJRVNfVE8mJiZTTkZyb21Q
YXJ0bmVyXkdpdmVubmFtZV5TZWNvbmRuYW1lXlN1ZmZpeF5QcmVmaXheRGVncmVlXlNSQ15DT0RF
JkFzc2lnbmluZ0F1dGhvcml0eSZPSUReTF4xXk0xMF5OUEleQ09ERSZBc3NpZ25pbmdGYWNpbGl0
eSZPSUReQV5DT05URVhUJkNvbnRleHQgRGVzY3JpcHRpb24mTF5eXjIwMTAwMTAxXjIxMTIxMjMx
XnByb2Zlc3Npb25hbCBzdWZmaXheQ1dFJmFzc2lnbmluZ0p1cmlzZGljdGlvbiZMXkNXRSZhc3Np
Z25BZ2N5T3JEZXB0Jkx+OTg3NjU0XlJlcGVhdFJFU1VMVF9DT1BJRVNfVE8mJiZTTkZyb21QYXJ0
bmVyXkdpdmVubmFtZV5TZWNvbmRuYW1lXlN1ZmZpeF5QcmVmaXheRGVncmVlXlNSQ15DT0RFJkFz
c2lnbmluZ0F1dGhvcml0eSZPSUReTF4xXk0xMF5OUEleQ09ERSZBc3NpZ25pbmdGYWNpbGl0eSZP
SUReQV5DT05URVhUJkNvbnRleHQgRGVzY3JpcHRpb24mTF5eXjIwMTAwMTAxXjIxMTIxMjMxXnBy
b2Zlc3Npb25hbCBzdWZmaXheQ1dFJmFzc2lnbmluZ0p1cmlzZGljdGlvbiZMXkNXRSZhc3NpZ25B
Z2N5T3JEZXB0Jkx8fEdlbmVyYWwgSG9zcGl0YWxeTF5eXl5uYW1lU3BhY2VJRCYyLjE2Ljg0MC4x
LjExMzg4My4xOS40LjYmSVNPXlhYXm5hbWVTcGFjZUlEJjIuMTYuODQwLjEuMTEzODgzLjE5LjQu
NiZJU09eQV5PcmdJRC0xMjM0flJlcGVhdCBIb3NwaXRhbF5MXl5eXm5hbWVTcGFjZUlEJjIuMTYu
ODQwLjEuMTEzODgzLjE5LjQuNiZJU09eWFhebmFtZVNwYWNlSUQmMi4xNi44NDAuMS4xMTM4ODMu
MTkuNC42JklTT15BXk9yZ0lELTEyMzR8MTAwNSBIZWFsdGhjYXJlIEJsdmQmU3RyZWV0TmFtZSZE
d2VsbGluZ05vXlN1aXRlIDM1MF5BdGxhbnRhXkdBXjk5OTk5XlVTQV5CfjY3ODkgSGVhbHRoY2Fy
ZSBCbHZkJlN0cmVldE5hbWUmRHdlbGxpbmdOb15TdWl0ZSAzNTBeQXRsYW50YV5HQV45OTk5OV5V
U0FeQnxeV1BOXlBIXl4xXjU1NV41NTUzMDAxfl5XUE5eUEheXjFeODg4Xjg4ODMwMDF8NDQ0NCBI
ZWFsdGhjYXJlIEJsdmQmU3RyZWV0TmFtZSZEd2VsbGluZ05vXlN1aXRlIDEyM15BdGxhbnRhXkdB
Xjk5OTk5XlVTQV5CfjU1NTUgSGVhbHRoY2FyZSBCbHZkJlN0cmVldE5hbWUmRHdlbGxpbmdOb15T
dWl0ZSAxMjNeQXRsYW50YV5HQV45OTk5OV5VU0FeQg0KT0JSfDF8MTEwNTAyM15eMi4xNi44NDAu
MS4xMTQyMjIuNC4zLjIuNS4yLjIwMF5JU098MjAxMjNeXjIuMTYuODQwLjEuMTE0MjIyLjQuMy4y
LjUuMi4zMDBeSVNPfF5eXkZMVVZeRkxVViBDdWx0Xkx8fHwyMDExMDUxMTEyMzB8fHwxMjM0NTY3
ODkwXkNPTExFQ1RPUl9JRCYmJlNORnJvbVBhcnRuZXJeR2l2ZW5uYW1lXlNlY29uZG5hbWVeU3Vm
Zml4XlByZWZpeF5EZWdyZWVeU1JDXkNPREUmQXNzaWduaW5nQXV0aG9yaXR5Jk9JRF5MXjFeTTEw
Xk5QSV5DT0RFJkFzc2lnbmluZ0ZhY2lsaXR5Jk9JRF5BXkNPTlRFWFQmQ29udGV4dCBEZXNjcmlw
dGlvbiZMXl5eMjAxMDAxMDFeMjExMjEyMzFecHJvZmVzc2lvbmFsIHN1ZmZpeF5DV0UmYXNzaWdu
aW5nSnVyaXNkaWN0aW9uJkxeQ1dFJmFzc2lnbkFnY3lPckRlcHQmTH45ODc2NTQzMjFeQ09MTEVD
VE9SX0lEJiYmU05Gcm9tUGFydG5lcl5HaXZlbm5hbWVeU2Vjb25kbmFtZV5TdWZmaXheUHJlZml4
XkRlZ3JlZV5TUkNeQ09ERSZBc3NpZ25pbmdBdXRob3JpdHkmT0lEXkxeMV5NMTBeTlBJXkNPREUm
QXNzaWduaW5nRmFjaWxpdHkmT0lEXkFeQ09OVEVYVCZDb250ZXh0IERlc2NyaXB0aW9uJkxeXl4y
MDEwMDEwMV4yMTEyMTIzMV5wcm9mZXNzaW9uYWwgc3VmZml4XkNXRSZhc3NpZ25pbmdKdXJpc2Rp
Y3Rpb24mTF5DV0UmYXNzaWduQWdjeU9yRGVwdCZMfHx8fHx8MTIzOTg3Xk9SREVSSU5HUFJPVkxB
U1ROQU1FJk93blNOUHJmeCYmJlNORnJvbVBhcnRuZXJeR2l2ZW5uYW1lXlNlY29uZG5hbWVeU3Vm
Zml4XlByZWZpeF5EZWdyZWVeU1JDXkNPREUmQXNzaWduaW5nQXV0aG9yaXR5Jk9JRF5MXjFeTTEw
Xk5QSV5DT0RFJkFzc2lnbmluZ0ZhY2lsaXR5Jk9JRF5BXkNPTlRFWFQmQ29udGV4dCBEZXNjcmlw
dGlvbiZMXl5eMjAxMDAxMDFeMjExMjEyMzFecHJvZmVzc2lvbmFsIHN1ZmZpeF5DV0UmYXNzaWdu
aW5nSnVyaXNkaWN0aW9uJkxeQ1dFJmFzc2lnbkFnY3lPckRlcHQmTH43NjU0M15SZXBlYXRPUkRF
UklOR1BST1ZMQVNUTkFNRSZPd25TTlByZngmJiZTTkZyb21QYXJ0bmVyXkdpdmVubmFtZV5TZWNv
bmRuYW1lXlN1ZmZpeF5QcmVmaXheRGVncmVlXlNSQ15DT0RFJkFzc2lnbmluZ0F1dGhvcml0eSZP
SUReTF4xXk0xMF5OUEleQ09ERSZBc3NpZ25pbmdGYWNpbGl0eSZPSUReQV5DT05URVhUJkNvbnRl
eHQgRGVzY3JpcHRpb24mTF5eXjIwMTAwMTAxXjIxMTIxMjMxXnByb2Zlc3Npb25hbCBzdWZmaXhe
Q1dFJmFzc2lnbmluZ0p1cmlzZGljdGlvbiZMXkNXRSZhc3NpZ25BZ2N5T3JEZXB0Jkx8XldQTl5Q
SF5eMV41NTVeNTU1MTAwNX5eV1BOXlBIXl4xXjc3N143NzcxMDA1fHx8fHwyMDExMDUxMTE5MjB8
fHxGfHx8OTk5OTg3Xk9SREVSSU5HX1BST1ZeVFlMRVJeTl5eXl5eXl5eXl5eXl5eXl5eTUR+NTY5
ODc3XlJlcGVhdE9SREVSSU5HX1BST1ZeVFlMRVJeTl5eXl5eXl5eXl5eXl5eXl5eTUR8fHxeXl5G
TFVWXkZMVVYgQ3VsdF5Mfl5eXlJlcGVhdF5SZXBlYXQgQ3VsdF5MfE9CUi0zMiZGTiZHTiZJTklU
JkpSJkRSJk1EfE9CUi0zMyZGTiZHTiZJTklUJkpSJkRSJk1Efk9CUi0zM1JFUEVBVCZGTiZHTiZJ
TklUJkpSJkRSJk1EfE9CUi0zNCZGTiZHTiZJTklUJkpSJkRSJk1Efk9CUi0zNFJFUEVBVCZGTiZH
TiZJTklUJkpSJkRSJk1EfE9CUi0zNSZGTiZHTiZJTklUJkpSJkRSJk1Efk9CUi0zNVJFUEVBVCZG
TiZHTiZJTklUJkpSJkRSJk1EIHwyMDExMDUxMTE5MjB8fHxPQlItMzledGVzdF5MTl5GTFVWXkZM
VVYgQ3VsdF5Mfk9CUjM5UlBUXlRFU1ReTE5eUmVwZWF0XlJlcGVhdCBDdWx0Xkx8fHx8fE9CUi00
NF50ZXN0XkxOXkZMVVZeRkxVViBDdWx0XkwgfE9CUi00NV50ZXN0XkxOXkZMVVZeRkxVViBDdWx0
Xkx+T0JSNDVSUFReVEVTVF5MTl5SZXBlYXReUmVwZWF0IEN1bHReTHxPQlItNDZedGVzdF5MTl5G
TFVWXkZMVVYgQ3VsdF5Mfk9CUjQ2UlBUXlRFU1ReTE5eUmVwZWF0XlJlcGVhdCBDdWx0Xkx8T0JS
LTQ3XnRlc3ReTE5eRkxVVl5GTFVWIEN1bHReTH5PQlI0N1JQVF5URVNUXkxOXlJlcGVhdF5SZXBl
YXQgQ3VsdF5MfCBPQlItNDhedGVzdF5MTl5GTFVWXkZMVVYgQ3VsdF5MfDQ5fE9CUi01MF50ZXN0
XkxOXkZMVVZeRkxVViBDdWx0XkwNCk5URXwxfHxvcmRlcmNvbW1lbnRzIDF+UkVQRUFUQ09NTUVO
VHxDT0RFXkRFU0NSSVBUSU9OIDFeQ1MxXl5eXlZlcjFeXk9SSUdJTkFMIFRFWFQNCk5URXwyfHxv
cmRlcmNvbW1lbnRzIDIsb3JkZXJjb21tZW50cywgb3JkZXJjb21tZW50cyAxb3JkZXJjb21tZW50
cyAxb3JkZXJjb21tZW50cyAxb3JkZXJjb21tZW50cyAxb3JkZXJjb21tZW50cyAxIA0KTlRFfDN8
THxvcmRlcmNvbW1lbnRzIGFkZGl0aW9uYWx8Q09ERTFeREVTQ1JJUFRJT04gMV5ITDcwMzY0XkNP
REVeRGVzY3JpcHRpb24gMl5DUzJeQ1MxVmVyc2lvbl5DUzJWZXJzaW9uXk9SSUdJTkFMIFRFWFRe
Q09ERTNeZGVzYyAzXkNTM15DUzNWZXJzaW9uDQpUUTF8MXwxNTBebV5tZXRlcl5VQ1VNfFExSCZF
dmVyeSAxIEhvdXImSEw3eHh4Xl5eXjFeaH5BQ00mQmVmb3JlIEJyZWFrZmFzdCZITDd4eHheXl5e
Xl5eQUNNfDA2MzAxMn4wODUwMDF8MjAwXm1ebWV0ZXJeVUNVTX41MDBebV5tZXRlcl5VQ1VNfDMw
MF5tXm1ldGVyXlVDVU18MjAwOTA3MjkxMjAwKzA0MDB8MjAwOTA3MjkxMjAwKzA0MDB8Ul5Sb3V0
aW5lXkhMNzA0ODVeQ09ERTJeRGVzY3JpcHRpb24gMl5DUzJeQ1MxVmVyc2lvbl5DUzJWZXJzaW9u
Xk9SSUdJTkFMIFRFWFReQ09ERTNeZGVzYyAzXkNTM15DUzNWZXJzaW9uXk9JRH5SXlJlcGVhdF5I
TDcwNDg1XkNPREUyXkRlc2NyaXB0aW9uIDJeQ1MyXkNTMVZlcnNpb25eQ1MyVmVyc2lvbl5PUklH
SU5BTCBURVhUXkNPREUzXmRlc2MgM15DUzNeQ1MzVmVyc2lvbl5PSUR8VFExLTEwfFRRMS0xMXxD
fDIwMF5tXm1ldGVyXlVDVU18NQ0KT0JYfDF8Q1dFfDY2MDMtNV5GTFVWIFRocm9hdCBDdWx0XkxO
fHw0NDIzNTIwMDReSW5mbHVlbnphIEEgdmlydXMgc3VidHlwZSBIMU4xIChvcmdhbmlzbSleU05P
TUVEfHx8SF5IaWdoXkhMNzAwNzheXl5eXl5BQk5PUk1BTCBURVNUUkVTVUxUfkFeXkhMNzAwNzh8
fFN+QXxGfHx8MjAxMTA1MTExMjMwfHw5OTk5ODdeUkVTUE9OU0lCTEVfT0JTRVJWRVImJiZTTkZy
b21QYXJ0bmVyXkdpdmVubmFtZV5TZWNvbmRuYW1lXlN1ZmZpeF5QcmVmaXheRGVncmVlXlNSQ15D
T0RFJkFzc2lnbmluZ0F1dGhvcml0eSZPSUReTF4xXk0xMF5OUEleQ09ERSZBc3NpZ25pbmdGYWNp
bGl0eSZPSUReQV5DT05URVhUJkNvbnRleHQgRGVzY3JpcHRpb24mTF5eXjIwMTAwMTAxXjIxMTIx
MjMxXnByb2Zlc3Npb25hbCBzdWZmaXheQ1dFJmFzc2lnbmluZ0p1cmlzZGljdGlvbiZMXkNXRSZh
c3NpZ25BZ2N5T3JEZXB0Jkx+NTg5NTQ3XlJFU1BPTlNJQkxFX09CU0VSVkVSJiYmU05Gcm9tUGFy
dG5lcl5HaXZlbm5hbWVeU2Vjb25kbmFtZV5TdWZmaXheUHJlZml4XkRlZ3JlZV5TUkNeQ09ERSZB
c3NpZ25pbmdBdXRob3JpdHkmT0lEXkxeMV5NMTBeTlBJXkNPREUmQXNzaWduaW5nRmFjaWxpdHkm
T0lEXkFeQ09OVEVYVCZDb250ZXh0IERlc2NyaXB0aW9uJkxeXl4yMDEwMDEwMV4yMTEyMTIzMV5w
cm9mZXNzaW9uYWwgc3VmZml4XkNXRSZhc3NpZ25pbmdKdXJpc2RpY3Rpb24mTF5DV0UmYXNzaWdu
QWdjeU9yRGVwdCZMfE9CWC0xN150ZXN0XkxOXkZMVVZeRkxVViBDdWx0Xkx+T0JYMTdSUFReVEVT
VF5MTl5SZXBlYXReUmVwZWF0IEN1bHReTHwxMjM1NjZeT0JYLTE4Xk9JRF5JU09+NTY2NDQ0XlJF
UEVBVE9CWC0xOF5PSUReSVNPfDIwMTEwNTExMTkyMHx8fHxMYWIxXkxeXl5eQ0xJQSYyLjE2Ljg0
MC4xLjExNDIyMi40LjMuMi41LjIuMTAwJklTT15eXl4xMjM0fDEyMzQgQ29ybmVsbCBQYXJrIERy
JnN0cmVldCBuYW1lJmR3ZWxsaW5nXl5CbHVlIEFzaF5PSF40NTI0MXw5ODc2NTQzXkpPTkVTJiYm
U05Gcm9tUGFydG5lcl5HaXZlbm5hbWVeU2Vjb25kbmFtZV5TdWZmaXheUHJlZml4XkRlZ3JlZV5T
UkNeQ09ERSZBc3NpZ25pbmdBdXRob3JpdHkmT0lEXkxeMV5NMTBeTlBJXkNPREUmQXNzaWduaW5n
RmFjaWxpdHkmT0lEXkFeQ09OVEVYVCZDb250ZXh0IERlc2NyaXB0aW9uJkxeXl4yMDEwMDEwMV4y
MTEyMTIzMV5wcm9mZXNzaW9uYWwgc3VmZml4XkNXRSZhc3NpZ25pbmdKdXJpc2RpY3Rpb24mTF5D
V0UmYXNzaWduQWdjeU9yRGVwdCZMDQpOVEV8MXxMfHJlc3VsdCBjb21tZW50IDEgd2l0aCBjb21t
ZW50IHNvdXJjZSBsYWIgaW5kaWNhdGVkfENPREUxXkRFU0NSSVBUSU9OIDFeSEw3MDM2NF5DT0RF
XkRlc2NyaXB0aW9uIDJeQ1MyXkNTMVZlcnNpb25eQ1MyVmVyc2lvbl5PUklHSU5BTCBURVhUXkNP
REUzXmRlc2MgM15DUzNeQ1MzVmVyc2lvbg0KTlRFfDJ8THxyZXN1bHQgY29tbWVudCAyIHdpdGgg
Y29tbWVudCBzb3VyY2UgbGFiIGluZGljYXRlZHxDT0RFXkRFU0NSSVBUSU9OIDFeQ1MxXl5eXlZl
cjFeXk9SSUdJTkFMIFRFWFQNCk5URXwzfHxyZXN1bHQgY29tbWVudCAzIHdpdGggbm8gY29tbWVu
dCBzb3VyY2UgaW5kaWNhdGVkIGZvciBvcHRpb25hbCBOVEUtMiBmaWVsZA0KT0JYfDJ8Tk18NTQz
Mi01XlRFU1QgTkFNRV5MTnx8KzIwMDB8bW0vZExeXlVDVU18fF5eXl5eXl5eQUJOT1JNQUwgVEVT
VFJFU1VMVHx8fEZ8fHwyMDExMDUxMTEyMzB8fHx8fDIwMTEwNTExMTkyMHx8fHxMYWIxXkxeXl5e
Q0xJQSYyLjE2Ljg0MC4xLjExNDIyMi40LjMuMi41LjIuMTAwJklTT15eXl4xMjM0fDEyMzQgQ29y
bmVsbCBQYXJrIERyXl5CbHVlIEFzaF5PSF40NTI0MXw5ODc2NTQzXkpPTkVTXkJPQl5GXl5eXl5e
Xl5eXl5eXl5eXl5NRA0KT0JYfDN8Tk18MTI0NS01XlRFU1QgTkFNRV5MTnx8MTEwMDB8bW0vZExe
XlVDVU18fE5eTm9ybWFsXkhMNzAwNzh+T0teXkx8fFN+QXxGfHx8MjAxMTA1MTExMjMwfHx8fHwy
MDExMDUxMTE5MjB8fHx8TGFiMV5MXl5eXkNMSUEmMi4xNi44NDAuMS4xMTQyMjIuNC4zLjIuNS4y
LjEwMCZJU09eXl5eMTIzNHwxMjM0IENvcm5lbGwgUGFyayBEcl5eQmx1ZSBBc2heT0heNDUyNDF8
OTg3NjU0M15KT05FU15CT0JeRl5eXl5eXl5eXl5eXl5eXl5eTUQNCk5URXwxfEx8cmVzdWx0IGNv
bW1lbnQgMSB3aXRoIGNvbW1lbnQgc291cmNlIGxhYiBpbmRpY2F0ZWR8Q09ERTFeREVTQ1JJUFRJ
T04gMV5ITDcwMzY0XkNPREVeRGVzY3JpcHRpb24gMl5DUzJeQ1MxVmVyc2lvbl5DUzJWZXJzaW9u
Xk9SSUdJTkFMIFRFWFReQ09ERTNeZGVzYyAzXkNTM15DUzNWZXJzaW9uXk9JRA0KTlRFfDJ8THxy
ZXN1bHQgY29tbWVudCAyIHdpdGggY29tbWVudCBzb3VyY2UgbGFiIGluZGljYXRlZHxDT0RFXkRF
U0NSSVBUSU9OIDFeQ1MxXl5eXlZlcjFeXk9SSUdJTkFMIFRFWFQNCk5URXwzfHxyZXN1bHQgY29t
bWVudCAzIHdpdGggbm8gY29tbWVudCBzb3VyY2UgaW5kaWNhdGVkIGZvciBvcHRpb25hbCBOVEUt
MiBmaWVsZA0KU1BNfDF8MjM0NTYmUGxhY2VyTGFiJjIuMTYuODQwLjEuMTE0MjIyLjQuMy4yLjUu
Mi4yMDAmSVNPXjU2Nzg5JkZpbGxlckxhYiYyLjE2Ljg0MC4xLjExNDIyMi40LjMuMi41LjIuMzAw
JklTT3wxMjM1NjYmU1BNLTMmT0lEJklTT143NTYxMjMmU1BNLTMmT0lEJklTT341NjY0NDQmUkVQ
RUFUU1BNLTMmT0lEJklTT142NTMxMjM0JlJFUEVBVFNQTS0zJk9JRCZJU098U1BNNF5URVNUNF5M
Tl5UXlRIUk9BVCBTV0FCXkx8U1BNNV5URVNUNV5MTl5UXlRIUk9BVCBTV0FCXkx+U1BNNV5SRVBF
QVReTE5eVF5USFJPQVQgU1dBQl5MfFNQTTZeVEVTVDZeTE5eVF5USFJPQVQgU1dBQl5MflNQTTZe
UkVQRUFUXkxOXlReVEhST0FUIFNXQUJeTHxTUE03XlRFU1Q3XkxOXlReVEhST0FUIFNXQUJeTHxT
UE04XlRFU1Q4XkxOXlReVEhST0FUIFNXQUJeTHxTUE05XlRFU1Q5XkxOXlReVEhST0FUIFNXQUJe
TH5TUE05XlJFUEVBVF5MTl5UXlRIUk9BVCBTV0FCXkx8U1BNMTBeVEVTVDEwXkxOXlReVEhST0FU
IFNXQUJeTHxTUE0xMV5URVNUMTFeTE5eVF5USFJPQVQgU1dBQl5MflNQTTExXlJFUEVBVF5MTl5U
XlRIUk9BVCBTV0FCXkx8MTUwXm0mbWV0ZXImdWN1bXwxMjM0NTZ8U1BNMTR+U1BNMTRSRVBFQVR8
U1BNMTVeVEVTVDE1XkxOXlReVEhST0FUIFNXQUJeTH5TUE0xNV5SRVBFQVReTE5eVF5USFJPQVQg
U1dBQl5MfCBTUE0xNl5eXlReVEhST0FUIFNXQUJeTH5TUE0xNl5SRVBFQVReXlReVEhST0FUIFNX
QUJeTHwyMDExMDUxMTEyMzB8MjAxMTA1MTExNDAwfHx8U1BNMjFeXl5UXlRIUk9BVCBTV0FCXkx+
U1BNMjFeUkVQRUFUXkxOXlReVEhST0FUIFNXQUJeTCB8fHxTUE0yNF5URVNUMjReTE5eVF5USFJP
QVQgU1dBQl5MflNQTTI0XlJFUEVBVF5MTl5UXlRIUk9BVCBTV0FCXkwNCk9CWHwxfFNUfF5eXl5e
Xl5eU1BFQ0lNRU4gQ09NTUVOVFN8fHRoZXNlIGFyZSBzcGVjaW1lbiBjb21tZW50cyB0aGF0IHlv
dSBoYXZlIHRvIHRyYW5zbGF0ZSB0byBhIE5URSBzZWdtZW50IGFuZCBhcHBlbmQgdW5kZXIgdGhl
IG90aGVyIE5URXMgdW5kZXIgdGhlIGZpcnN0IE9CWHx8fHx8fEZ8fHwyMDExMDUxMTEyMzB8fHx8
fDIwMTEwNTExMTkyMHx8fHx8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=</inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundProtocol>HL7V2</inboundProtocol>
        <outboundProtocol>HL7V2</outboundProtocol>
        <inboundProperties>
          <property name="convertLFtoCR">true</property>
          <property name="handleRepetitions">true</property>
          <property name="handleSubcomponents">false</property>
          <property name="stripNamespaces">true</property>
          <property name="useStrictParser">false</property>
          <property name="useStrictValidation">false</property>
        </inboundProperties>
        <outboundProperties>
          <property name="convertLFtoCR">true</property>
          <property name="handleRepetitions">false</property>
          <property name="handleSubcomponents">false</property>
          <property name="stripNamespaces">true</property>
          <property name="useStrictParser">false</property>
          <property name="useStrictValidation">false</property>
        </outboundProperties>
      </transformer>
      <filter>
        <rules>
          <rule>
            <sequenceNumber>0</sequenceNumber>
            <name>Filter destination based on prior errors</name>
            <data class="map">
              <entry>
                <string>Script</string>
                <string>return ($(&apos;componentErrors&apos;).length() == 0 &amp;&amp;
        $(&apos;hubHost&apos;) == $(&apos;receivingFacilityHubHost&apos;));</string>
              </entry>
            </data>
            <type>JavaScript</type>
            <script>return ($(&apos;componentErrors&apos;).length() == 0 &amp;&amp;
        $(&apos;hubHost&apos;) == $(&apos;receivingFacilityHubHost&apos;));</script>
            <operator>NONE</operator>
          </rule>
        </rules>
      </filter>
      <transportName>File Writer</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <version>2.1.1.5490</version>
    </connector>
    <connector>
      <name>Send msg to Receiving Facility WS (to PHIX1)</name>
      <properties>
        <property name="DataType">Web Service Sender</property>
        <property name="dispatcherAttachmentContents">&lt;list/&gt;</property>
        <property name="dispatcherAttachmentNames">&lt;list/&gt;</property>
        <property name="dispatcherAttachmentTypes">&lt;list/&gt;</property>
        <property name="dispatcherEnvelope">&lt;soapenv:Envelope xmlns:ns=&quot;http://ws.connectors.connect.mirth.com/&quot; xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&#xd;
  &lt;soapenv:Header/&gt;&#xd;
  &lt;soapenv:Body&gt;&#xd;
    &lt;ns:acceptMessage&gt;&#xd;
      &lt;arg0&gt;&lt;![CDATA[${message.encodedData}]]&gt;&lt;/arg0&gt;
    &lt;/ns:acceptMessage&gt;&#xd;
  &lt;/soapenv:Body&gt;
&lt;/soapenv:Envelope&gt;&#xd;
</property>
        <property name="dispatcherOneWay">0</property>
        <property name="dispatcherOperation">acceptMessage</property>
        <property name="dispatcherPassword"></property>
        <property name="dispatcherPort">{http://ws.connectors.connect.mirth.com/}DefaultAcceptMessagePort</property>
        <property name="dispatcherReplyChannelId">sink</property>
        <property name="dispatcherService">{http://ws.connectors.connect.mirth.com/}DefaultAcceptMessageService</property>
        <property name="dispatcherSoapAction"></property>
        <property name="dispatcherUseAuthentication">0</property>
        <property name="dispatcherUseMtom">0</property>
        <property name="dispatcherUsername"></property>
        <property name="dispatcherWsdlOperations">&lt;list&gt;
  &lt;string&gt;acceptMessage&lt;/string&gt;
&lt;/list&gt;</property>
        <property name="dispatcherWsdlUrl">http://phix1.phiresearchlab.org:8081/services/Mirth?wsdl</property>
        <property name="host">phix1.phiresearchlab.org:8081/services/Mirth?wsdl</property>
        <property name="queuePollInterval">200</property>
        <property name="reconnectMillisecs">10000</property>
        <property name="rotateQueue">0</property>
        <property name="usePersistentQueues">0</property>
      </properties>
      <transformer>
        <steps>
          <step>
            <sequenceNumber>0</sequenceNumber>
            <name>Perform anonymization</name>
            <script>try
{
  if ($(&apos;anonymization&apos;) == &apos;true&apos;)
  {
    logger.info(&quot;Performing anonymization&quot;);

    // Insert bioSensePatientId generated by the BioSenseLinker service
    msg[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.1&apos;] = $(&apos;bioSensePatientId&apos;) + &apos;&apos;;

    msg[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.4&apos;] = &quot;&amp;2.16.840.1.114222.4.3.2.5.2.2&amp;ISO&quot;;

    // anonymize all patient name values except PID-5.7: Name Type Code
    msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.1&apos;] = &apos;&apos;;
    msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.2&apos;] = &apos;&apos;;
    msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.3&apos;] = &apos;&apos;;
    msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.4&apos;] = &apos;&apos;;
    msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.5&apos;] = &apos;&apos;;
    msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.6&apos;] = &apos;&apos;;
  
    // remove day from DOB
    var dob = msg[&apos;PID&apos;][&apos;PID.7&apos;][&apos;PID.7.1&apos;].toString();

    if (dob.length &gt;= 6)
    {
      dob = dob.substring(0, 6);
      msg[&apos;PID&apos;][&apos;PID.7&apos;][&apos;PID.7.1&apos;] = dob;
    }

    // anonymize street address
    msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.1&apos;] = &apos;&apos;;

    // anonymize other designation
    msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.2&apos;] = &apos;&apos;;

    // anonymize city
    msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.3&apos;] = &apos;&apos;;

    // anonymize address type
    msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.7&apos;] = &apos;&apos;;

    // anonymize other geographic designation
    msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.8&apos;] = &apos;&apos;;

    // Insert bioSenseVisitId generated by the BioSenseLinker service&#xd;    msg[&apos;PV1&apos;][&apos;PV1.19&apos;][&apos;PV1.19.1&apos;] = $(&apos;bioSenseVisitId&apos;) + &apos;&apos;;

    msg[&apos;PV1&apos;][&apos;PV1.19&apos;][&apos;PV1.19.4&apos;] = &quot;&amp;2.16.840.1.114222.4.3.2.5.2.2&amp;ISO&quot;;
  }
}
catch(e)
{
  logger.error(&quot;Error in Send msg to Receiving Facility Transformer: &quot; + e.message);
  channelMap.put(&apos;componentErrors&apos;,  $(&apos;componentErrors&apos;) + &quot;Send msg to Receiving Facility Transformer: \n&quot; + e.message + &quot; |\n&quot;);
}</script>
            <type>JavaScript</type>
            <data class="map">
              <entry>
                <string>Script</string>
                <string>try
{
  if ($(&apos;anonymization&apos;) == &apos;true&apos;)
  {
    logger.info(&quot;Performing anonymization&quot;);

    // Insert bioSensePatientId generated by the BioSenseLinker service
    msg[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.1&apos;] = $(&apos;bioSensePatientId&apos;) + &apos;&apos;;

    msg[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.4&apos;] = &quot;&amp;2.16.840.1.114222.4.3.2.5.2.2&amp;ISO&quot;;

    // anonymize all patient name values except PID-5.7: Name Type Code
    msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.1&apos;] = &apos;&apos;;
    msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.2&apos;] = &apos;&apos;;
    msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.3&apos;] = &apos;&apos;;
    msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.4&apos;] = &apos;&apos;;
    msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.5&apos;] = &apos;&apos;;
    msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.6&apos;] = &apos;&apos;;
  
    // remove day from DOB
    var dob = msg[&apos;PID&apos;][&apos;PID.7&apos;][&apos;PID.7.1&apos;].toString();

    if (dob.length &gt;= 6)
    {
      dob = dob.substring(0, 6);
      msg[&apos;PID&apos;][&apos;PID.7&apos;][&apos;PID.7.1&apos;] = dob;
    }

    // anonymize street address
    msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.1&apos;] = &apos;&apos;;

    // anonymize other designation
    msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.2&apos;] = &apos;&apos;;

    // anonymize city
    msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.3&apos;] = &apos;&apos;;

    // anonymize address type
    msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.7&apos;] = &apos;&apos;;

    // anonymize other geographic designation
    msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.8&apos;] = &apos;&apos;;

    // Insert bioSenseVisitId generated by the BioSenseLinker service&#xd;    msg[&apos;PV1&apos;][&apos;PV1.19&apos;][&apos;PV1.19.1&apos;] = $(&apos;bioSenseVisitId&apos;) + &apos;&apos;;

    msg[&apos;PV1&apos;][&apos;PV1.19&apos;][&apos;PV1.19.4&apos;] = &quot;&amp;2.16.840.1.114222.4.3.2.5.2.2&amp;ISO&quot;;
  }
}
catch(e)
{
  logger.error(&quot;Error in Send msg to Receiving Facility Transformer: &quot; + e.message);
  channelMap.put(&apos;componentErrors&apos;,  $(&apos;componentErrors&apos;) + &quot;Send msg to Receiving Facility Transformer: \n&quot; + e.message + &quot; |\n&quot;);
}</string>
              </entry>
            </data>
          </step>
        </steps>
        <inboundTemplate encoding="base64"></inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundProtocol>HL7V2</inboundProtocol>
        <outboundProtocol>HL7V2</outboundProtocol>
        <inboundProperties>
          <property name="convertLFtoCR">true</property>
          <property name="handleRepetitions">true</property>
          <property name="handleSubcomponents">false</property>
          <property name="stripNamespaces">true</property>
          <property name="useStrictParser">false</property>
          <property name="useStrictValidation">false</property>
        </inboundProperties>
        <outboundProperties>
          <property name="convertLFtoCR">true</property>
          <property name="handleRepetitions">false</property>
          <property name="handleSubcomponents">false</property>
          <property name="stripNamespaces">true</property>
          <property name="useStrictParser">false</property>
          <property name="useStrictValidation">false</property>
        </outboundProperties>
      </transformer>
      <filter>
        <rules>
          <rule>
            <sequenceNumber>0</sequenceNumber>
            <name>filter to determine if msg needs to be sent to destination facility over Mirth WS</name>
            <data class="map">
              <entry>
                <string>Script</string>
                <string>var retval = false;

// Unfortunately, this version of Mirth does not seem to support variables inside web service endpoint URLs.
// This outermost conditional filters for phix1.phiresearchlab.org:8081 (PHIX 1) specifically (shouldn&apos;t be necessary).
if ($(&apos;receivingFacilityWebSvcHost&apos;) == &apos;phix1.phiresearchlab.org:8081&apos;)
{

  if ($(&apos;receivingFacilityXportType&apos;) == &apos;MIRTH_WS&apos;)
  {
    if ($(&apos;hubHost&apos;) != $(&apos;receivingFacilityHubHost&apos;))
    {
      if ($(&apos;componentErrors&apos;).length() &gt; 0)
      {
        logger.info(&quot;Bypassing Send msg to Receiving Facility because of prior errors: &quot; + $(&apos;componentErrors&apos;));
      }
      else
      {
        logger.info(&quot;Sending msg to Receiving Facility: &quot; + $(&apos;receivingFacilityWebSvcHost&apos;));
        retval = true;
      }
    }
    else
    {
      logger.info(&quot;Msg is currently at Receiving Facility; no need to send.&quot;);
    }
  }
  
}

if (retval)
{
  channelMap.put(&apos;outgoingMsgSentStatus&apos;, &apos;SENT VIA WS&apos;);
}
else
{
  channelMap.put(&apos;outgoingMsgSentStatus&apos;, &apos;BYPASSED&apos;);
}

return retval;</string>
              </entry>
            </data>
            <type>JavaScript</type>
            <script>var retval = false;

// Unfortunately, this version of Mirth does not seem to support variables inside web service endpoint URLs.
// This outermost conditional filters for phix1.phiresearchlab.org:8081 (PHIX 1) specifically (shouldn&apos;t be necessary).
if ($(&apos;receivingFacilityWebSvcHost&apos;) == &apos;phix1.phiresearchlab.org:8081&apos;)
{

  if ($(&apos;receivingFacilityXportType&apos;) == &apos;MIRTH_WS&apos;)
  {
    if ($(&apos;hubHost&apos;) != $(&apos;receivingFacilityHubHost&apos;))
    {
      if ($(&apos;componentErrors&apos;).length() &gt; 0)
      {
        logger.info(&quot;Bypassing Send msg to Receiving Facility because of prior errors: &quot; + $(&apos;componentErrors&apos;));
      }
      else
      {
        logger.info(&quot;Sending msg to Receiving Facility: &quot; + $(&apos;receivingFacilityWebSvcHost&apos;));
        retval = true;
      }
    }
    else
    {
      logger.info(&quot;Msg is currently at Receiving Facility; no need to send.&quot;);
    }
  }
  
}

if (retval)
{
  channelMap.put(&apos;outgoingMsgSentStatus&apos;, &apos;SENT VIA WS&apos;);
}
else
{
  channelMap.put(&apos;outgoingMsgSentStatus&apos;, &apos;BYPASSED&apos;);
}

return retval;</script>
            <operator>NONE</operator>
          </rule>
        </rules>
      </filter>
      <transportName>Web Service Sender</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <version>2.1.1.5490</version>
    </connector>
    <connector>
      <name>Send msg to Receiving Facility WS (to PHIX2)</name>
      <properties>
        <property name="DataType">Web Service Sender</property>
        <property name="dispatcherAttachmentContents">&lt;list/&gt;</property>
        <property name="dispatcherAttachmentNames">&lt;list/&gt;</property>
        <property name="dispatcherAttachmentTypes">&lt;list/&gt;</property>
        <property name="dispatcherEnvelope">&lt;soapenv:Envelope xmlns:ns=&quot;http://ws.connectors.connect.mirth.com/&quot; xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&#xd;
  &lt;soapenv:Header/&gt;&#xd;
  &lt;soapenv:Body&gt;&#xd;
    &lt;ns:acceptMessage&gt;&#xd;
      &lt;arg0&gt;&lt;![CDATA[${message.encodedData}]]&gt;&lt;/arg0&gt;
    &lt;/ns:acceptMessage&gt;&#xd;
  &lt;/soapenv:Body&gt;
&lt;/soapenv:Envelope&gt;&#xd;
</property>
        <property name="dispatcherOneWay">0</property>
        <property name="dispatcherOperation">acceptMessage</property>
        <property name="dispatcherPassword"></property>
        <property name="dispatcherPort">{http://ws.connectors.connect.mirth.com/}DefaultAcceptMessagePort</property>
        <property name="dispatcherReplyChannelId">sink</property>
        <property name="dispatcherService">{http://ws.connectors.connect.mirth.com/}DefaultAcceptMessageService</property>
        <property name="dispatcherSoapAction"></property>
        <property name="dispatcherUseAuthentication">0</property>
        <property name="dispatcherUseMtom">0</property>
        <property name="dispatcherUsername"></property>
        <property name="dispatcherWsdlCacheId"></property>
        <property name="dispatcherWsdlOperations">&lt;list&gt;
  &lt;string&gt;acceptMessage&lt;/string&gt;
&lt;/list&gt;</property>
        <property name="dispatcherWsdlUrl">http://phix2.phiresearchlab.org:8081/services/Mirth?wsdl</property>
        <property name="host">phix2.phiresearchlab.org:8081/services/Mirth?wsdl</property>
        <property name="queuePollInterval">200</property>
        <property name="reconnectMillisecs">10000</property>
        <property name="rotateQueue">0</property>
        <property name="usePersistentQueues">0</property>
      </properties>
      <transformer>
        <steps>
          <step>
            <sequenceNumber>0</sequenceNumber>
            <name>Perform anonymization</name>
            <script>try
{
  if ($(&apos;anonymization&apos;) == &apos;true&apos;)
  {
    logger.info(&quot;Performing anonymization&quot;);

    // Insert bioSensePatientId generated by the BioSenseLinker service
    msg[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.1&apos;] = $(&apos;bioSensePatientId&apos;) + &apos;&apos;;

    msg[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.4&apos;] = &quot;&amp;2.16.840.1.114222.4.3.2.5.2.2&amp;ISO&quot;;

    // anonymize all patient name values except PID-5.7: Name Type Code
    msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.1&apos;] = &apos;&apos;;
    msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.2&apos;] = &apos;&apos;;
    msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.3&apos;] = &apos;&apos;;
    msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.4&apos;] = &apos;&apos;;
    msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.5&apos;] = &apos;&apos;;
    msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.6&apos;] = &apos;&apos;;
  
    // remove day from DOB
    var dob = msg[&apos;PID&apos;][&apos;PID.7&apos;][&apos;PID.7.1&apos;].toString();

    if (dob.length &gt;= 6)
    {
      dob = dob.substring(0, 6);
      msg[&apos;PID&apos;][&apos;PID.7&apos;][&apos;PID.7.1&apos;] = dob;
    }

    // anonymize street address
    msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.1&apos;] = &apos;&apos;;

    // anonymize other designation
    msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.2&apos;] = &apos;&apos;;

    // anonymize city
    msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.3&apos;] = &apos;&apos;;

    // anonymize address type
    msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.7&apos;] = &apos;&apos;;

    // anonymize other geographic designation
    msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.8&apos;] = &apos;&apos;;

    // Insert bioSenseVisitId generated by the BioSenseLinker service&#xd;    msg[&apos;PV1&apos;][&apos;PV1.19&apos;][&apos;PV1.19.1&apos;] = $(&apos;bioSenseVisitId&apos;) + &apos;&apos;;

    msg[&apos;PV1&apos;][&apos;PV1.19&apos;][&apos;PV1.19.4&apos;] = &quot;&amp;2.16.840.1.114222.4.3.2.5.2.2&amp;ISO&quot;;
  }
}
catch(e)
{
  logger.error(&quot;Error in Send msg to Receiving Facility Transformer: &quot; + e.message);
  channelMap.put(&apos;componentErrors&apos;,  $(&apos;componentErrors&apos;) + &quot;Send msg to Receiving Facility Transformer: \n&quot; + e.message + &quot; |\n&quot;);
}</script>
            <type>JavaScript</type>
            <data class="map">
              <entry>
                <string>Script</string>
                <string>try
{
  if ($(&apos;anonymization&apos;) == &apos;true&apos;)
  {
    logger.info(&quot;Performing anonymization&quot;);

    // Insert bioSensePatientId generated by the BioSenseLinker service
    msg[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.1&apos;] = $(&apos;bioSensePatientId&apos;) + &apos;&apos;;

    msg[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.4&apos;] = &quot;&amp;2.16.840.1.114222.4.3.2.5.2.2&amp;ISO&quot;;

    // anonymize all patient name values except PID-5.7: Name Type Code
    msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.1&apos;] = &apos;&apos;;
    msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.2&apos;] = &apos;&apos;;
    msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.3&apos;] = &apos;&apos;;
    msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.4&apos;] = &apos;&apos;;
    msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.5&apos;] = &apos;&apos;;
    msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.6&apos;] = &apos;&apos;;
  
    // remove day from DOB
    var dob = msg[&apos;PID&apos;][&apos;PID.7&apos;][&apos;PID.7.1&apos;].toString();

    if (dob.length &gt;= 6)
    {
      dob = dob.substring(0, 6);
      msg[&apos;PID&apos;][&apos;PID.7&apos;][&apos;PID.7.1&apos;] = dob;
    }

    // anonymize street address
    msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.1&apos;] = &apos;&apos;;

    // anonymize other designation
    msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.2&apos;] = &apos;&apos;;

    // anonymize city
    msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.3&apos;] = &apos;&apos;;

    // anonymize address type
    msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.7&apos;] = &apos;&apos;;

    // anonymize other geographic designation
    msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.8&apos;] = &apos;&apos;;

    // Insert bioSenseVisitId generated by the BioSenseLinker service&#xd;    msg[&apos;PV1&apos;][&apos;PV1.19&apos;][&apos;PV1.19.1&apos;] = $(&apos;bioSenseVisitId&apos;) + &apos;&apos;;

    msg[&apos;PV1&apos;][&apos;PV1.19&apos;][&apos;PV1.19.4&apos;] = &quot;&amp;2.16.840.1.114222.4.3.2.5.2.2&amp;ISO&quot;;
  }
}
catch(e)
{
  logger.error(&quot;Error in Send msg to Receiving Facility Transformer: &quot; + e.message);
  channelMap.put(&apos;componentErrors&apos;,  $(&apos;componentErrors&apos;) + &quot;Send msg to Receiving Facility Transformer: \n&quot; + e.message + &quot; |\n&quot;);
}</string>
              </entry>
            </data>
          </step>
        </steps>
        <inboundTemplate encoding="base64"></inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundProtocol>HL7V2</inboundProtocol>
        <outboundProtocol>HL7V2</outboundProtocol>
        <inboundProperties>
          <property name="convertLFtoCR">true</property>
          <property name="handleRepetitions">true</property>
          <property name="handleSubcomponents">false</property>
          <property name="stripNamespaces">true</property>
          <property name="useStrictParser">false</property>
          <property name="useStrictValidation">false</property>
        </inboundProperties>
        <outboundProperties>
          <property name="convertLFtoCR">true</property>
          <property name="handleRepetitions">false</property>
          <property name="handleSubcomponents">false</property>
          <property name="stripNamespaces">true</property>
          <property name="useStrictParser">false</property>
          <property name="useStrictValidation">false</property>
        </outboundProperties>
      </transformer>
      <filter>
        <rules>
          <rule>
            <sequenceNumber>0</sequenceNumber>
            <name>filter to determine if msg needs to be sent to destination facility over Mirth WS</name>
            <data class="map">
              <entry>
                <string>Script</string>
                <string>var retval = false;

// Unfortunately, this version of Mirth does not seem to support variables inside web service endpoint URLs.
// This outermost conditional filters for phix2.phiresearchlab.org:8081 (PHIX 2) specifically (shouldn&apos;t be necessary).
if ($(&apos;receivingFacilityWebSvcHost&apos;) == &apos;phix2.phiresearchlab.org:8081&apos;)
{

  if ($(&apos;receivingFacilityXportType&apos;) == &apos;MIRTH_WS&apos;)
  {
    if ($(&apos;hubHost&apos;) != $(&apos;receivingFacilityHubHost&apos;))
    {
      if ($(&apos;componentErrors&apos;).length() &gt; 0)
      {
        logger.info(&quot;Bypassing Send msg to Receiving Facility because of prior errors: &quot; + $(&apos;componentErrors&apos;));
      }
      else
      {
        logger.info(&quot;Sending msg to Receiving Facility: &quot; + $(&apos;receivingFacilityWebSvcHost&apos;));
        retval = true;
      }
    }
    else
    {
      logger.info(&quot;Msg is currently at Receiving Facility; no need to send.&quot;);
    }
  }

}

if (retval)
{
  channelMap.put(&apos;outgoingMsgSentStatus&apos;, &apos;SENT VIA WS&apos;);
}
else
{
  channelMap.put(&apos;outgoingMsgSentStatus&apos;, &apos;BYPASSED&apos;);
}

return retval;</string>
              </entry>
            </data>
            <type>JavaScript</type>
            <script>var retval = false;

// Unfortunately, this version of Mirth does not seem to support variables inside web service endpoint URLs.
// This outermost conditional filters for phix2.phiresearchlab.org:8081 (PHIX 2) specifically (shouldn&apos;t be necessary).
if ($(&apos;receivingFacilityWebSvcHost&apos;) == &apos;phix2.phiresearchlab.org:8081&apos;)
{

  if ($(&apos;receivingFacilityXportType&apos;) == &apos;MIRTH_WS&apos;)
  {
    if ($(&apos;hubHost&apos;) != $(&apos;receivingFacilityHubHost&apos;))
    {
      if ($(&apos;componentErrors&apos;).length() &gt; 0)
      {
        logger.info(&quot;Bypassing Send msg to Receiving Facility because of prior errors: &quot; + $(&apos;componentErrors&apos;));
      }
      else
      {
        logger.info(&quot;Sending msg to Receiving Facility: &quot; + $(&apos;receivingFacilityWebSvcHost&apos;));
        retval = true;
      }
    }
    else
    {
      logger.info(&quot;Msg is currently at Receiving Facility; no need to send.&quot;);
    }
  }

}

if (retval)
{
  channelMap.put(&apos;outgoingMsgSentStatus&apos;, &apos;SENT VIA WS&apos;);
}
else
{
  channelMap.put(&apos;outgoingMsgSentStatus&apos;, &apos;BYPASSED&apos;);
}

return retval;</script>
            <operator>NONE</operator>
          </rule>
        </rules>
      </filter>
      <transportName>Web Service Sender</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <version>2.1.1.5490</version>
    </connector>
    <connector>
      <name>Send msg to Receiving Facility (NHIN DIRECT REST)</name>
      <properties>
        <property name="DataType">JavaScript Writer</property>
        <property name="host">sink</property>
        <property name="script">var sndr = new Packages.gov.cdc.phlissa.hub.direct.HubDirectSender();
var subject = &quot;HL7 Message - &quot; + messageObject.getSource().toString();
var toAddress = $(&apos;receivingFacilityDirectEmailAddress&apos;);

var lname = sndr.getLogName();

logger.info(lname + &quot; - Host: &quot; + sndr.getHost() );
logger.info(lname + &quot; - Port: &quot; + sndr.getPort() );
logger.info(lname + &quot; - From: &quot; + sndr.getFromAddress() );
logger.info(lname + &quot; - To: &quot; + toAddress);
logger.info(lname + &quot; - Subject: &quot; + subject);
//logger.info(lname + &quot; - Trust store: &quot; + sndr.getTrustStorePath() );
//logger.info(lname + &quot; - Trust store password: &quot; + sndr.getTrustStorePassword() );

try
{
  sndr.sendDirectMessage(toAddress, subject, messageObject.getEncodedData().toString(), true);&#xd;

  logger.info(lname + &quot; - Message Location: &quot; + sndr.getLocation() );
  logger.info(lname + &quot; - Direct Response: &quot; + sndr.getResponse() );
}
catch(e)
{
  logger.info(lname + &quot; - Runtime exception: &quot; + e.message );
  channelMap.put(&apos;componentErrors&apos;,  $(&apos;componentErrors&apos;) + &quot;DIRECT Sender:\n&quot; + e.message + &quot;\n&quot;);

  var hasError = sndr.hasError();

  if (hasError) 
  {
    logger.info(lname + &quot; - Error Message: &quot; + sndr.getErrorMessage() );
    channelMap.put(&apos;componentErrors&apos;,  $(&apos;componentErrors&apos;) + &quot;DIRECT Sender:\n&quot; + sndr.getErrorMessage() + &quot;\n&quot;);
  }

}
</property>
      </properties>
      <transformer>
        <steps>
          <step>
            <sequenceNumber>0</sequenceNumber>
            <name>Perform anonymization</name>
            <script>try
{
  if ($(&apos;anonymization&apos;) == &apos;true&apos;)
  {
    logger.info(&quot;Performing anonymization&quot;);

    // Insert bioSensePatientId generated by the BioSenseLinker service
    msg[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.1&apos;] = $(&apos;bioSensePatientId&apos;) + &apos;&apos;;

    msg[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.4&apos;] = &quot;&amp;2.16.840.1.114222.4.3.2.5.2.2&amp;ISO&quot;;

    // anonymize all patient name values except PID-5.7: Name Type Code
    msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.1&apos;] = &apos;&apos;;
    msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.2&apos;] = &apos;&apos;;
    msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.3&apos;] = &apos;&apos;;
    msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.4&apos;] = &apos;&apos;;
    msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.5&apos;] = &apos;&apos;;
    msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.6&apos;] = &apos;&apos;;
  
    // remove day from DOB
    var dob = msg[&apos;PID&apos;][&apos;PID.7&apos;][&apos;PID.7.1&apos;].toString();

    if (dob.length &gt;= 6)
    {
      dob = dob.substring(0, 6);
      msg[&apos;PID&apos;][&apos;PID.7&apos;][&apos;PID.7.1&apos;] = dob;
    }

    // anonymize street address
    msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.1&apos;] = &apos;&apos;;

    // anonymize other designation
    msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.2&apos;] = &apos;&apos;;

    // anonymize city
    msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.3&apos;] = &apos;&apos;;

    // anonymize address type
    msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.7&apos;] = &apos;&apos;;

    // anonymize other geographic designation
    msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.8&apos;] = &apos;&apos;;

    // Insert bioSenseVisitId generated by the BioSenseLinker service&#xd;    msg[&apos;PV1&apos;][&apos;PV1.19&apos;][&apos;PV1.19.1&apos;] = $(&apos;bioSenseVisitId&apos;) + &apos;&apos;;

    msg[&apos;PV1&apos;][&apos;PV1.19&apos;][&apos;PV1.19.4&apos;] = &quot;&amp;2.16.840.1.114222.4.3.2.5.2.2&amp;ISO&quot;;
  }
}
catch(e)
{
  logger.error(&quot;Error in Send msg to Receiving Facility Transformer: &quot; + e.message);
  channelMap.put(&apos;componentErrors&apos;,  $(&apos;componentErrors&apos;) + &quot;Send msg to Receiving Facility Transformer: \n&quot; + e.message + &quot; |\n&quot;);
}</script>
            <type>JavaScript</type>
            <data class="map">
              <entry>
                <string>Script</string>
                <string>try
{
  if ($(&apos;anonymization&apos;) == &apos;true&apos;)
  {
    logger.info(&quot;Performing anonymization&quot;);

    // Insert bioSensePatientId generated by the BioSenseLinker service
    msg[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.1&apos;] = $(&apos;bioSensePatientId&apos;) + &apos;&apos;;

    msg[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.4&apos;] = &quot;&amp;2.16.840.1.114222.4.3.2.5.2.2&amp;ISO&quot;;

    // anonymize all patient name values except PID-5.7: Name Type Code
    msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.1&apos;] = &apos;&apos;;
    msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.2&apos;] = &apos;&apos;;
    msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.3&apos;] = &apos;&apos;;
    msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.4&apos;] = &apos;&apos;;
    msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.5&apos;] = &apos;&apos;;
    msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.6&apos;] = &apos;&apos;;
  
    // remove day from DOB
    var dob = msg[&apos;PID&apos;][&apos;PID.7&apos;][&apos;PID.7.1&apos;].toString();

    if (dob.length &gt;= 6)
    {
      dob = dob.substring(0, 6);
      msg[&apos;PID&apos;][&apos;PID.7&apos;][&apos;PID.7.1&apos;] = dob;
    }

    // anonymize street address
    msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.1&apos;] = &apos;&apos;;

    // anonymize other designation
    msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.2&apos;] = &apos;&apos;;

    // anonymize city
    msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.3&apos;] = &apos;&apos;;

    // anonymize address type
    msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.7&apos;] = &apos;&apos;;

    // anonymize other geographic designation
    msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.8&apos;] = &apos;&apos;;

    // Insert bioSenseVisitId generated by the BioSenseLinker service&#xd;    msg[&apos;PV1&apos;][&apos;PV1.19&apos;][&apos;PV1.19.1&apos;] = $(&apos;bioSenseVisitId&apos;) + &apos;&apos;;

    msg[&apos;PV1&apos;][&apos;PV1.19&apos;][&apos;PV1.19.4&apos;] = &quot;&amp;2.16.840.1.114222.4.3.2.5.2.2&amp;ISO&quot;;
  }
}
catch(e)
{
  logger.error(&quot;Error in Send msg to Receiving Facility Transformer: &quot; + e.message);
  channelMap.put(&apos;componentErrors&apos;,  $(&apos;componentErrors&apos;) + &quot;Send msg to Receiving Facility Transformer: \n&quot; + e.message + &quot; |\n&quot;);
}</string>
              </entry>
            </data>
          </step>
        </steps>
        <inboundTemplate encoding="base64"></inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundProtocol>HL7V2</inboundProtocol>
        <outboundProtocol>HL7V2</outboundProtocol>
        <inboundProperties>
          <property name="convertLFtoCR">true</property>
          <property name="handleRepetitions">true</property>
          <property name="handleSubcomponents">false</property>
          <property name="stripNamespaces">true</property>
          <property name="useStrictParser">false</property>
          <property name="useStrictValidation">false</property>
        </inboundProperties>
        <outboundProperties>
          <property name="convertLFtoCR">true</property>
          <property name="handleRepetitions">false</property>
          <property name="handleSubcomponents">false</property>
          <property name="stripNamespaces">true</property>
          <property name="useStrictParser">false</property>
          <property name="useStrictValidation">false</property>
        </outboundProperties>
      </transformer>
      <filter>
        <rules>
          <rule>
            <sequenceNumber>0</sequenceNumber>
            <name>filter to determine if msg needs to be sent to destination facility over DIRECT REST</name>
            <data class="map">
              <entry>
                <string>Script</string>
                <string>var retval = false;

if ($(&apos;receivingFacilityXportType&apos;) == &apos;DIRECT&apos;)
{
  if ($(&apos;hubHost&apos;) != $(&apos;receivingFacilityHubHost&apos;))
  {
    if ($(&apos;componentErrors&apos;).length() &gt; 0)
    {
      logger.info(&quot;Bypassing Send msg via DIRECT REST to Receiving Facility because of prior errors: &quot; + $(&apos;componentErrors&apos;));
    }
    else
    {
      logger.info(&quot;Sending msg via DIRECT REST to Receiving Facility: &quot; + $(&apos;receivingFacilityDirectEmailAddress&apos;));
      retval = true;
    }
  }
  else
  {
    logger.info(&quot;Msg is currently at Receiving Facility; no need to send via DIRECT REST.&quot;);
  }
}

if (retval)
{
  channelMap.put(&apos;outgoingMsgSentStatus&apos;, &apos;SENT VIA DIRECT&apos;);
}
else
{
  channelMap.put(&apos;outgoingMsgSentStatus&apos;, &apos;BYPASSED&apos;);
}

return retval;</string>
              </entry>
            </data>
            <type>JavaScript</type>
            <script>var retval = false;

if ($(&apos;receivingFacilityXportType&apos;) == &apos;DIRECT&apos;)
{
  if ($(&apos;hubHost&apos;) != $(&apos;receivingFacilityHubHost&apos;))
  {
    if ($(&apos;componentErrors&apos;).length() &gt; 0)
    {
      logger.info(&quot;Bypassing Send msg via DIRECT REST to Receiving Facility because of prior errors: &quot; + $(&apos;componentErrors&apos;));
    }
    else
    {
      logger.info(&quot;Sending msg via DIRECT REST to Receiving Facility: &quot; + $(&apos;receivingFacilityDirectEmailAddress&apos;));
      retval = true;
    }
  }
  else
  {
    logger.info(&quot;Msg is currently at Receiving Facility; no need to send via DIRECT REST.&quot;);
  }
}

if (retval)
{
  channelMap.put(&apos;outgoingMsgSentStatus&apos;, &apos;SENT VIA DIRECT&apos;);
}
else
{
  channelMap.put(&apos;outgoingMsgSentStatus&apos;, &apos;BYPASSED&apos;);
}

return retval;</script>
            <operator>NONE</operator>
          </rule>
        </rules>
      </filter>
      <transportName>JavaScript Writer</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <version>2.1.1.5490</version>
    </connector>
    <connector>
      <name>Send result to PHIXConnectorService</name>
      <properties>
        <property name="DataType">Web Service Sender</property>
        <property name="dispatcherAttachmentContents">&lt;list/&gt;</property>
        <property name="dispatcherAttachmentNames">&lt;list/&gt;</property>
        <property name="dispatcherAttachmentTypes">&lt;list/&gt;</property>
        <property name="dispatcherEnvelope">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-16&quot;?&gt;
&lt;soap:Envelope xmlns:soap=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;&gt;
  &lt;soap:Body&gt;
    &lt;postResult xmlns=&quot;http://phix.cdc.gov/&quot;&gt;
      &lt;hl7Result xmlns=&quot;&quot;&gt;&lt;![CDATA[${message.encodedData}]]&gt;&lt;/hl7Result&gt;
      &lt;errors xmlns=&quot;&quot;&gt;&lt;![CDATA[${componentErrors}]]&gt;&lt;/errors&gt;
    &lt;/postResult&gt;
  &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</property>
        <property name="dispatcherOneWay">0</property>
        <property name="dispatcherOperation">postResult</property>
        <property name="dispatcherPassword"></property>
        <property name="dispatcherPort">{http://phix.cdc.gov/}PHIXConnectorServicePort</property>
        <property name="dispatcherReplyChannelId">sink</property>
        <property name="dispatcherService">{http://phix.cdc.gov/}PHIXConnectorService</property>
        <property name="dispatcherSoapAction"></property>
        <property name="dispatcherUseAuthentication">0</property>
        <property name="dispatcherUseMtom">0</property>
        <property name="dispatcherUsername"></property>
        <property name="dispatcherWsdlCacheId"></property>
        <property name="dispatcherWsdlOperations">&lt;list&gt;
  &lt;string&gt;postMessage&lt;/string&gt;
  &lt;string&gt;postResult&lt;/string&gt;
&lt;/list&gt;</property>
        <property name="dispatcherWsdlUrl">http://phix1.phiresearchlab.org:8080/PHIXConnectorService/PHIXConnectorService?wsdl</property>
        <property name="host">phix1.phiresearchlab.org:8080/PHIXConnectorService/PHIXConnectorService?wsdl</property>
        <property name="queuePollInterval">200</property>
        <property name="reconnectMillisecs">10000</property>
        <property name="rotateQueue">0</property>
        <property name="usePersistentQueues">0</property>
      </properties>
      <transformer>
        <steps>
          <step>
            <sequenceNumber>0</sequenceNumber>
            <name>Apply Vocab Translation</name>
            <script>try
{
  // -- vocab translation --
  if ( $(&apos;stdObx31&apos;) != &apos;&apos; )
  {
    logger.info(&quot;Applying OBX.3 vocab translation to msg...&quot;);

    msg[&apos;OBX&apos;][&apos;OBX.3&apos;][&apos;OBX.3.1&apos;] = $(&apos;stdObx31&apos;);
    msg[&apos;OBX&apos;][&apos;OBX.3&apos;][&apos;OBX.3.2&apos;] = $(&apos;stdObx32&apos;);
    msg[&apos;OBX&apos;][&apos;OBX.3&apos;][&apos;OBX.3.3&apos;] = $(&apos;stdObx33&apos;);
  }

  if ( $(&apos;stdRxa51&apos;) != &apos;&apos; )
  {
    logger.info(&quot;Applying RXA.5 vocab translation to msg...&quot;);

    msg[&apos;RXA&apos;][&apos;RXA.5&apos;][&apos;RXA.5.1&apos;] = $(&apos;stdRxa51&apos;);
    msg[&apos;RXA&apos;][&apos;RXA.5&apos;][&apos;RXA.5.2&apos;] = $(&apos;stdRxa52&apos;);
    msg[&apos;RXA&apos;][&apos;RXA.5&apos;][&apos;RXA.5.3&apos;] = $(&apos;stdRxa53&apos;);
  }
}
catch(e)
{
  logger.error(&quot;Error in Send result to PHIXConnectorService Transformer: Apply Vocal Translation: &quot; + e.message);
  channelMap.put(&apos;componentErrors&apos;,  $(&apos;componentErrors&apos;) + &quot;Send result to PHIXConnectorService Transformer: Apply Vocal Translation: \n&quot; + e.message + &quot; |\n&quot;);
}</script>
            <type>JavaScript</type>
            <data class="map">
              <entry>
                <string>Script</string>
                <string>try
{
  // -- vocab translation --
  if ( $(&apos;stdObx31&apos;) != &apos;&apos; )
  {
    logger.info(&quot;Applying OBX.3 vocab translation to msg...&quot;);

    msg[&apos;OBX&apos;][&apos;OBX.3&apos;][&apos;OBX.3.1&apos;] = $(&apos;stdObx31&apos;);
    msg[&apos;OBX&apos;][&apos;OBX.3&apos;][&apos;OBX.3.2&apos;] = $(&apos;stdObx32&apos;);
    msg[&apos;OBX&apos;][&apos;OBX.3&apos;][&apos;OBX.3.3&apos;] = $(&apos;stdObx33&apos;);
  }

  if ( $(&apos;stdRxa51&apos;) != &apos;&apos; )
  {
    logger.info(&quot;Applying RXA.5 vocab translation to msg...&quot;);

    msg[&apos;RXA&apos;][&apos;RXA.5&apos;][&apos;RXA.5.1&apos;] = $(&apos;stdRxa51&apos;);
    msg[&apos;RXA&apos;][&apos;RXA.5&apos;][&apos;RXA.5.2&apos;] = $(&apos;stdRxa52&apos;);
    msg[&apos;RXA&apos;][&apos;RXA.5&apos;][&apos;RXA.5.3&apos;] = $(&apos;stdRxa53&apos;);
  }
}
catch(e)
{
  logger.error(&quot;Error in Send result to PHIXConnectorService Transformer: Apply Vocal Translation: &quot; + e.message);
  channelMap.put(&apos;componentErrors&apos;,  $(&apos;componentErrors&apos;) + &quot;Send result to PHIXConnectorService Transformer: Apply Vocal Translation: \n&quot; + e.message + &quot; |\n&quot;);
}</string>
              </entry>
            </data>
          </step>
          <step>
            <sequenceNumber>1</sequenceNumber>
            <name>Add SFT Segment</name>
            <script>try
{
  if ($(&apos;addSFTSegment&apos;) == &apos;true&apos;)
  {
    logger.info(&quot;Adding SFT Segment&quot;);

    // determine how many SFT segements already exist
    var i = 0;
  
    while(msg[&apos;SFT&apos;][i] != null) 
    {  
      ++i;
    }

    // create SFT segment, per requirements in &quot;Message Processing Flow&quot; spreadsheet
    var newSFT = createSegment(&apos;SFT&apos;);

    // workaround to put the new segment after the existing SFT, if another exists, otherwise after MSH
    if (i == 0)
    {
      msg[&apos;MSH&apos;] += newSFT;
    }
    else
    {
      msg[&apos;SFT&apos;] += newSFT;
    }

    msg[&apos;SFT&apos;][i][&apos;SFT.1&apos;][&apos;SFT.1.1&apos;] = &apos;PHIX&apos;;
    msg[&apos;SFT&apos;][i][&apos;SFT.1&apos;][&apos;SFT.1.2&apos;] = &apos;L&apos;;
    msg[&apos;SFT&apos;][i][&apos;SFT.1&apos;][&apos;SFT.1.6&apos;][&apos;SFT.1.6.1&apos;] = &apos;&apos;;
    msg[&apos;SFT&apos;][i][&apos;SFT.1&apos;][&apos;SFT.1.6&apos;][&apos;SFT.1.6.2&apos;] = &apos;2.16.840.1.114222.4.3.2.5.2.4000&apos;;
    msg[&apos;SFT&apos;][i][&apos;SFT.1&apos;][&apos;SFT.1.6&apos;][&apos;SFT.1.6.3&apos;] = &apos;ISO&apos;;
    msg[&apos;SFT&apos;][i][&apos;SFT.1&apos;][&apos;SFT.1.7&apos;] = &apos;XX&apos;;
    msg[&apos;SFT&apos;][i][&apos;SFT.1&apos;][&apos;SFT.1.10&apos;] = &apos;PHIX&apos;;

    msg[&apos;SFT&apos;][i][&apos;SFT.2&apos;] = &apos;1.3&apos;;
    msg[&apos;SFT&apos;][i][&apos;SFT.3&apos;] = &apos;PHIX&apos;;
    msg[&apos;SFT&apos;][i][&apos;SFT.4&apos;] = &apos;1.3&apos;;

    msg[&apos;SFT&apos;][i][&apos;SFT.6&apos;] = &apos;&apos;;
  }
}
catch(e)
{
  logger.error(&quot;Error in Send result to PHIXConnectorService Transformer: Add SFT Segment: &quot; + e.message);
  channelMap.put(&apos;componentErrors&apos;,  $(&apos;componentErrors&apos;) + &quot;Send result to PHIXConnectorService Transformer: Add SFT Segment: \n&quot; + e.message + &quot; |\n&quot;);
}</script>
            <type>JavaScript</type>
            <data class="map">
              <entry>
                <string>Script</string>
                <string>try
{
  if ($(&apos;addSFTSegment&apos;) == &apos;true&apos;)
  {
    logger.info(&quot;Adding SFT Segment&quot;);

    // determine how many SFT segements already exist
    var i = 0;
  
    while(msg[&apos;SFT&apos;][i] != null) 
    {  
      ++i;
    }

    // create SFT segment, per requirements in &quot;Message Processing Flow&quot; spreadsheet
    var newSFT = createSegment(&apos;SFT&apos;);

    // workaround to put the new segment after the existing SFT, if another exists, otherwise after MSH
    if (i == 0)
    {
      msg[&apos;MSH&apos;] += newSFT;
    }
    else
    {
      msg[&apos;SFT&apos;] += newSFT;
    }

    msg[&apos;SFT&apos;][i][&apos;SFT.1&apos;][&apos;SFT.1.1&apos;] = &apos;PHIX&apos;;
    msg[&apos;SFT&apos;][i][&apos;SFT.1&apos;][&apos;SFT.1.2&apos;] = &apos;L&apos;;
    msg[&apos;SFT&apos;][i][&apos;SFT.1&apos;][&apos;SFT.1.6&apos;][&apos;SFT.1.6.1&apos;] = &apos;&apos;;
    msg[&apos;SFT&apos;][i][&apos;SFT.1&apos;][&apos;SFT.1.6&apos;][&apos;SFT.1.6.2&apos;] = &apos;2.16.840.1.114222.4.3.2.5.2.4000&apos;;
    msg[&apos;SFT&apos;][i][&apos;SFT.1&apos;][&apos;SFT.1.6&apos;][&apos;SFT.1.6.3&apos;] = &apos;ISO&apos;;
    msg[&apos;SFT&apos;][i][&apos;SFT.1&apos;][&apos;SFT.1.7&apos;] = &apos;XX&apos;;
    msg[&apos;SFT&apos;][i][&apos;SFT.1&apos;][&apos;SFT.1.10&apos;] = &apos;PHIX&apos;;

    msg[&apos;SFT&apos;][i][&apos;SFT.2&apos;] = &apos;1.3&apos;;
    msg[&apos;SFT&apos;][i][&apos;SFT.3&apos;] = &apos;PHIX&apos;;
    msg[&apos;SFT&apos;][i][&apos;SFT.4&apos;] = &apos;1.3&apos;;

    msg[&apos;SFT&apos;][i][&apos;SFT.6&apos;] = &apos;&apos;;
  }
}
catch(e)
{
  logger.error(&quot;Error in Send result to PHIXConnectorService Transformer: Add SFT Segment: &quot; + e.message);
  channelMap.put(&apos;componentErrors&apos;,  $(&apos;componentErrors&apos;) + &quot;Send result to PHIXConnectorService Transformer: Add SFT Segment: \n&quot; + e.message + &quot; |\n&quot;);
}</string>
              </entry>
            </data>
          </step>
          <step>
            <sequenceNumber>2</sequenceNumber>
            <name>Add SPM Segment</name>
            <script>try
{
  if ($(&apos;addSPMSegment&apos;) == &apos;true&apos;)
  {
    logger.info(&quot;Adding SPM Segment&quot;);

    //var newSPM = createSegment(&apos;SPM&apos;);
    //msg[&apos;OBR&apos;] += newSPM;

    // Create SPM segment, per requirements in &quot;Message Processing Flow&quot; spreadsheet
    // (Not specifying a location should place it last, which is where it belongs)
  
    msg[&apos;SPM&apos;][&apos;SPM.1&apos;] = &apos;1&apos;;
    //msg[&apos;SPM&apos;][&apos;SPM.2&apos;][&apos;SPM.2.2&apos;][&apos;SPM.2.2.1&apos;] = msg[&apos;OBR&apos;][&apos;OBR.3&apos;][&apos;OBR.3.1&apos;];
    //msg[&apos;SPM&apos;][&apos;SPM.2&apos;][&apos;SPM.2.2&apos;][&apos;SPM.2.2.2&apos;] = msg[&apos;OBR&apos;][&apos;OBR.3&apos;][&apos;OBR.3.2&apos;];
    //msg[&apos;SPM&apos;][&apos;SPM.2&apos;][&apos;SPM.2.2&apos;][&apos;SPM.2.2.3&apos;] = msg[&apos;OBR&apos;][&apos;OBR.3&apos;][&apos;OBR.3.3&apos;];
    //msg[&apos;SPM&apos;][&apos;SPM.2&apos;][&apos;SPM.2.2&apos;][&apos;SPM.2.2.4&apos;] = msg[&apos;OBR&apos;][&apos;OBR.3&apos;][&apos;OBR.3.4&apos;];

    msg[&apos;SPM&apos;][&apos;SPM.2&apos;][&apos;SPM.2.2&apos;] = msg[&apos;OBR&apos;][&apos;OBR.3&apos;][&apos;OBR.3.1&apos;].toString() + &quot;&amp;&quot; +
                                     msg[&apos;OBR&apos;][&apos;OBR.3&apos;][&apos;OBR.3.2&apos;].toString() + &quot;&amp;&quot; +
                                     msg[&apos;OBR&apos;][&apos;OBR.3&apos;][&apos;OBR.3.3&apos;].toString() + &quot;&amp;&quot; +
                                     msg[&apos;OBR&apos;][&apos;OBR.3&apos;][&apos;OBR.3.4&apos;].toString();


    // Mirth apparently cannot support deeper than seg.x.y, so it&apos;s necessary to 
    // handle the subdivisions of the fields beyond this using split().
    var specSrcList = msg[&apos;OBR&apos;][&apos;OBR.15&apos;][&apos;OBR.15.1&apos;].toString().split(&quot;&amp;&quot;);
    if (specSrcList.length &gt;= 3)
    {
      msg[&apos;SPM&apos;][&apos;SPM.4&apos;][&apos;SPM.4.1&apos;] = specSrcList[0]; // OBR.15.1.1
      msg[&apos;SPM&apos;][&apos;SPM.4&apos;][&apos;SPM.4.2&apos;] = specSrcList[1]; // OBR.15.1.2
      msg[&apos;SPM&apos;][&apos;SPM.4&apos;][&apos;SPM.4.3&apos;] = specSrcList[2]; // OBR.15.1.3
    }

    var bodySiteList = msg[&apos;OBR&apos;][&apos;OBR.15&apos;][&apos;OBR.15.4&apos;].toString().split(&quot;&amp;&quot;);
    if (bodySiteList.length &gt;= 3)
    {
      msg[&apos;SPM&apos;][&apos;SPM.8&apos;][&apos;SPM.8.1&apos;] = bodySiteList[0]; // OBR.15.4.1
      msg[&apos;SPM&apos;][&apos;SPM.8&apos;][&apos;SPM.8.2&apos;] = bodySiteList[1]; // OBR.15.4.2
      msg[&apos;SPM&apos;][&apos;SPM.8&apos;][&apos;SPM.8.3&apos;] = bodySiteList[2]; // OBR.15.4.3
    }

    msg[&apos;SPM&apos;][&apos;SPM.17&apos;][&apos;SPM.17.1&apos;] = msg[&apos;OBR&apos;][&apos;OBR.7&apos;][&apos;OBR.7.1&apos;].toString();
    msg[&apos;SPM&apos;][&apos;SPM.18&apos;] = msg[&apos;OBR&apos;][&apos;OBR.14&apos;][&apos;OBR.14.1&apos;].toString();

    msg[&apos;SPM&apos;][&apos;SPM.26&apos;] = &apos;&apos;;
  

    // Remove OBX, re-add OBX.  This should re-order the msg correctly so that OBX is last.
    //var obx = msg[&apos;OBX&apos;];
    //delete msg[&apos;OBX&apos;];
    //msg[&apos;OBX&apos;] = obx;
  }
}
catch(e)
{
  logger.error(&quot;Error in Send result to PHIXConnectorService Transformer: Add SPM Segment: &quot; + e.message);
  channelMap.put(&apos;componentErrors&apos;,  $(&apos;componentErrors&apos;) + &quot;Send result to PHIXConnectorService Transformer: Add SPM Segment: \n&quot; + e.message + &quot; |\n&quot;);
}</script>
            <type>JavaScript</type>
            <data class="map">
              <entry>
                <string>Script</string>
                <string>try
{
  if ($(&apos;addSPMSegment&apos;) == &apos;true&apos;)
  {
    logger.info(&quot;Adding SPM Segment&quot;);

    //var newSPM = createSegment(&apos;SPM&apos;);
    //msg[&apos;OBR&apos;] += newSPM;

    // Create SPM segment, per requirements in &quot;Message Processing Flow&quot; spreadsheet
    // (Not specifying a location should place it last, which is where it belongs)
  
    msg[&apos;SPM&apos;][&apos;SPM.1&apos;] = &apos;1&apos;;
    //msg[&apos;SPM&apos;][&apos;SPM.2&apos;][&apos;SPM.2.2&apos;][&apos;SPM.2.2.1&apos;] = msg[&apos;OBR&apos;][&apos;OBR.3&apos;][&apos;OBR.3.1&apos;];
    //msg[&apos;SPM&apos;][&apos;SPM.2&apos;][&apos;SPM.2.2&apos;][&apos;SPM.2.2.2&apos;] = msg[&apos;OBR&apos;][&apos;OBR.3&apos;][&apos;OBR.3.2&apos;];
    //msg[&apos;SPM&apos;][&apos;SPM.2&apos;][&apos;SPM.2.2&apos;][&apos;SPM.2.2.3&apos;] = msg[&apos;OBR&apos;][&apos;OBR.3&apos;][&apos;OBR.3.3&apos;];
    //msg[&apos;SPM&apos;][&apos;SPM.2&apos;][&apos;SPM.2.2&apos;][&apos;SPM.2.2.4&apos;] = msg[&apos;OBR&apos;][&apos;OBR.3&apos;][&apos;OBR.3.4&apos;];

    msg[&apos;SPM&apos;][&apos;SPM.2&apos;][&apos;SPM.2.2&apos;] = msg[&apos;OBR&apos;][&apos;OBR.3&apos;][&apos;OBR.3.1&apos;].toString() + &quot;&amp;&quot; +
                                     msg[&apos;OBR&apos;][&apos;OBR.3&apos;][&apos;OBR.3.2&apos;].toString() + &quot;&amp;&quot; +
                                     msg[&apos;OBR&apos;][&apos;OBR.3&apos;][&apos;OBR.3.3&apos;].toString() + &quot;&amp;&quot; +
                                     msg[&apos;OBR&apos;][&apos;OBR.3&apos;][&apos;OBR.3.4&apos;].toString();


    // Mirth apparently cannot support deeper than seg.x.y, so it&apos;s necessary to 
    // handle the subdivisions of the fields beyond this using split().
    var specSrcList = msg[&apos;OBR&apos;][&apos;OBR.15&apos;][&apos;OBR.15.1&apos;].toString().split(&quot;&amp;&quot;);
    if (specSrcList.length &gt;= 3)
    {
      msg[&apos;SPM&apos;][&apos;SPM.4&apos;][&apos;SPM.4.1&apos;] = specSrcList[0]; // OBR.15.1.1
      msg[&apos;SPM&apos;][&apos;SPM.4&apos;][&apos;SPM.4.2&apos;] = specSrcList[1]; // OBR.15.1.2
      msg[&apos;SPM&apos;][&apos;SPM.4&apos;][&apos;SPM.4.3&apos;] = specSrcList[2]; // OBR.15.1.3
    }

    var bodySiteList = msg[&apos;OBR&apos;][&apos;OBR.15&apos;][&apos;OBR.15.4&apos;].toString().split(&quot;&amp;&quot;);
    if (bodySiteList.length &gt;= 3)
    {
      msg[&apos;SPM&apos;][&apos;SPM.8&apos;][&apos;SPM.8.1&apos;] = bodySiteList[0]; // OBR.15.4.1
      msg[&apos;SPM&apos;][&apos;SPM.8&apos;][&apos;SPM.8.2&apos;] = bodySiteList[1]; // OBR.15.4.2
      msg[&apos;SPM&apos;][&apos;SPM.8&apos;][&apos;SPM.8.3&apos;] = bodySiteList[2]; // OBR.15.4.3
    }

    msg[&apos;SPM&apos;][&apos;SPM.17&apos;][&apos;SPM.17.1&apos;] = msg[&apos;OBR&apos;][&apos;OBR.7&apos;][&apos;OBR.7.1&apos;].toString();
    msg[&apos;SPM&apos;][&apos;SPM.18&apos;] = msg[&apos;OBR&apos;][&apos;OBR.14&apos;][&apos;OBR.14.1&apos;].toString();

    msg[&apos;SPM&apos;][&apos;SPM.26&apos;] = &apos;&apos;;
  

    // Remove OBX, re-add OBX.  This should re-order the msg correctly so that OBX is last.
    //var obx = msg[&apos;OBX&apos;];
    //delete msg[&apos;OBX&apos;];
    //msg[&apos;OBX&apos;] = obx;
  }
}
catch(e)
{
  logger.error(&quot;Error in Send result to PHIXConnectorService Transformer: Add SPM Segment: &quot; + e.message);
  channelMap.put(&apos;componentErrors&apos;,  $(&apos;componentErrors&apos;) + &quot;Send result to PHIXConnectorService Transformer: Add SPM Segment: \n&quot; + e.message + &quot; |\n&quot;);
}</string>
              </entry>
            </data>
          </step>
          <step>
            <sequenceNumber>3</sequenceNumber>
            <name>ORU R01 2.3.1 to 2.5.1 Transformation</name>
            <script>try
{
  // 2.3.1 to 2.5.1 ORU R01-specific MSH transformations
  if ( ($(&apos;translateToVersion&apos;) == &apos;2.5.1&apos;) &amp;&amp;
       ($(&apos;msgType&apos;) == &apos;ORU&apos;) &amp;&amp;
       ($(&apos;msgTriggerEvent&apos;) == &apos;R01&apos;) &amp;&amp;
       ($(&apos;msgHL7VersionID&apos;) == &apos;2.3.1&apos;) )
  {
    logger.info(&quot;Transforming ORU R01 2.3.1 message to 2.5.1&quot;);

    // MSH additions
    msg[&apos;MSH&apos;][&apos;MSH.12&apos;] = &apos;2.5.1&apos;;&#xd;
    msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.3&apos;] = &apos;ORU_R01&apos;;&#xd;
    msg[&apos;MSH&apos;][&apos;MSH.21&apos;][&apos;MSH.21.1&apos;] = &apos;V251_IG_LB_LABRPTPH_R1_INFORM_2010FEB&apos;;
    msg[&apos;MSH&apos;][&apos;MSH.21&apos;][&apos;MSH.21.2&apos;] = &apos;&apos;;
    msg[&apos;MSH&apos;][&apos;MSH.21&apos;][&apos;MSH.21.3&apos;] = &apos;2.16.840.1.114222.4.3.2.5.2.5&apos;;
    msg[&apos;MSH&apos;][&apos;MSH.21&apos;][&apos;MSH.21.4&apos;] = &apos;ISO&apos;;

    // OBR deletions
    msg[&apos;OBR&apos;][&apos;OBR.14&apos;] = &apos;&apos;;
    msg[&apos;OBR&apos;][&apos;OBR.15&apos;] = &apos;&apos;;

    // OBX additions
    msg[&apos;OBX&apos;][&apos;OBX.23&apos;] = &quot;INFORMATION NOT AVAILABLE&quot;;
    msg[&apos;OBX&apos;][&apos;OBX.24&apos;][&apos;OBX.24.1&apos;] = &quot;INFORMATION NOT AVAILABLE&quot;;
    msg[&apos;OBX&apos;][&apos;OBX.24&apos;][&apos;OBX.24.2&apos;] = &apos;&apos;;
    msg[&apos;OBX&apos;][&apos;OBX.24&apos;][&apos;OBX.24.3&apos;] = &apos;&apos;;
    msg[&apos;OBX&apos;][&apos;OBX.24&apos;][&apos;OBX.24.4&apos;] = &apos;&apos;;
    msg[&apos;OBX&apos;][&apos;OBX.24&apos;][&apos;OBX.24.5&apos;] = &apos;&apos;;
  }
}
catch(e)
{
  logger.error(&quot;Error in Send result to PHIXConnectorService Transformer: ORU R01 2.3.1 to 2.5.1 Transformation: &quot; + e.message);
  channelMap.put(&apos;componentErrors&apos;,  $(&apos;componentErrors&apos;) + &quot;Send result to PHIXConnectorService Transformer: ORU R01 2.3.1 to 2.5.1 Transformation: \n&quot; + e.message + &quot; |\n&quot;);
}</script>
            <type>JavaScript</type>
            <data class="map">
              <entry>
                <string>Script</string>
                <string>try
{
  // 2.3.1 to 2.5.1 ORU R01-specific MSH transformations
  if ( ($(&apos;translateToVersion&apos;) == &apos;2.5.1&apos;) &amp;&amp;
       ($(&apos;msgType&apos;) == &apos;ORU&apos;) &amp;&amp;
       ($(&apos;msgTriggerEvent&apos;) == &apos;R01&apos;) &amp;&amp;
       ($(&apos;msgHL7VersionID&apos;) == &apos;2.3.1&apos;) )
  {
    logger.info(&quot;Transforming ORU R01 2.3.1 message to 2.5.1&quot;);

    // MSH additions
    msg[&apos;MSH&apos;][&apos;MSH.12&apos;] = &apos;2.5.1&apos;;&#xd;
    msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.3&apos;] = &apos;ORU_R01&apos;;&#xd;
    msg[&apos;MSH&apos;][&apos;MSH.21&apos;][&apos;MSH.21.1&apos;] = &apos;V251_IG_LB_LABRPTPH_R1_INFORM_2010FEB&apos;;
    msg[&apos;MSH&apos;][&apos;MSH.21&apos;][&apos;MSH.21.2&apos;] = &apos;&apos;;
    msg[&apos;MSH&apos;][&apos;MSH.21&apos;][&apos;MSH.21.3&apos;] = &apos;2.16.840.1.114222.4.3.2.5.2.5&apos;;
    msg[&apos;MSH&apos;][&apos;MSH.21&apos;][&apos;MSH.21.4&apos;] = &apos;ISO&apos;;

    // OBR deletions
    msg[&apos;OBR&apos;][&apos;OBR.14&apos;] = &apos;&apos;;
    msg[&apos;OBR&apos;][&apos;OBR.15&apos;] = &apos;&apos;;

    // OBX additions
    msg[&apos;OBX&apos;][&apos;OBX.23&apos;] = &quot;INFORMATION NOT AVAILABLE&quot;;
    msg[&apos;OBX&apos;][&apos;OBX.24&apos;][&apos;OBX.24.1&apos;] = &quot;INFORMATION NOT AVAILABLE&quot;;
    msg[&apos;OBX&apos;][&apos;OBX.24&apos;][&apos;OBX.24.2&apos;] = &apos;&apos;;
    msg[&apos;OBX&apos;][&apos;OBX.24&apos;][&apos;OBX.24.3&apos;] = &apos;&apos;;
    msg[&apos;OBX&apos;][&apos;OBX.24&apos;][&apos;OBX.24.4&apos;] = &apos;&apos;;
    msg[&apos;OBX&apos;][&apos;OBX.24&apos;][&apos;OBX.24.5&apos;] = &apos;&apos;;
  }
}
catch(e)
{
  logger.error(&quot;Error in Send result to PHIXConnectorService Transformer: ORU R01 2.3.1 to 2.5.1 Transformation: &quot; + e.message);
  channelMap.put(&apos;componentErrors&apos;,  $(&apos;componentErrors&apos;) + &quot;Send result to PHIXConnectorService Transformer: ORU R01 2.3.1 to 2.5.1 Transformation: \n&quot; + e.message + &quot; |\n&quot;);
}</string>
              </entry>
            </data>
          </step>
        </steps>
        <inboundTemplate encoding="base64"></inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundProtocol>HL7V2</inboundProtocol>
        <outboundProtocol>HL7V2</outboundProtocol>
        <inboundProperties>
          <property name="convertLFtoCR">true</property>
          <property name="handleRepetitions">true</property>
          <property name="handleSubcomponents">false</property>
          <property name="stripNamespaces">true</property>
          <property name="useStrictParser">false</property>
          <property name="useStrictValidation">false</property>
        </inboundProperties>
        <outboundProperties>
          <property name="convertLFtoCR">true</property>
          <property name="handleRepetitions">false</property>
          <property name="handleSubcomponents">false</property>
          <property name="stripNamespaces">true</property>
          <property name="useStrictParser">false</property>
          <property name="useStrictValidation">false</property>
        </outboundProperties>
      </transformer>
      <filter>
        <rules>
          <rule>
            <sequenceNumber>0</sequenceNumber>
            <name>filter to determine if msg needs to be sent to PHIXConnectorService</name>
            <data class="map">
              <entry>
                <string>Script</string>
                <string>var retval = false;

if ($(&apos;enablePHIXPortalConnector&apos;) != &apos;true&apos;)
{
  logger.info(&quot;Bypassing PHIXConnectorService call based on PHIX configuration&quot;);
}
else
{
  logger.info(&quot;Calling PHIXConnectorService&quot;);
  retval = true;
}

if (retval)
{
  channelMap.put(&apos;phixConnectorServiceCallStatus&apos;, &apos;CALLED&apos;);
}
else
{
  channelMap.put(&apos;phixConnectorServiceCallStatus&apos;, &apos;BYPASSED&apos;);
}

return retval;</string>
              </entry>
            </data>
            <type>JavaScript</type>
            <script>var retval = false;

if ($(&apos;enablePHIXPortalConnector&apos;) != &apos;true&apos;)
{
  logger.info(&quot;Bypassing PHIXConnectorService call based on PHIX configuration&quot;);
}
else
{
  logger.info(&quot;Calling PHIXConnectorService&quot;);
  retval = true;
}

if (retval)
{
  channelMap.put(&apos;phixConnectorServiceCallStatus&apos;, &apos;CALLED&apos;);
}
else
{
  channelMap.put(&apos;phixConnectorServiceCallStatus&apos;, &apos;BYPASSED&apos;);
}

return retval;</script>
            <operator>NONE</operator>
          </rule>
        </rules>
      </filter>
      <transportName>Web Service Sender</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <version>2.1.1.5490</version>
    </connector>
    <connector>
      <name>Send email alert for detected notifiable condition</name>
      <properties>
        <property name="DataType">Email Sender</property>
        <property name="attachmentContents">&lt;list/&gt;</property>
        <property name="attachmentNames">&lt;list/&gt;</property>
        <property name="attachmentTypes">&lt;list/&gt;</property>
        <property name="body">This email notification is being sent to alert you that laboratory test results were received that have met Notifiable Disease Condition criteria and to inform you of the need to initiate Public Case Reporting.

Notification Program: ${subscriptionDesc}

Test Code: ${stdObx31}
Test Description: ${stdObx32}
Result Code: ${obx51}
Result Description: ${obx52}

Placer Order Number (Entity ID): ${placerOrderNumberEntityID}


Please do not respond to this automated email notification.
</property>
        <property name="contentType">text/plain</property>
        <property name="emailSecure">none</property>
        <property name="fromAddress">${hubInstanceEmailFromAddr}</property>
        <property name="hostname">localhost</property>
        <property name="password"></property>
        <property name="smtpPort">25</property>
        <property name="subject">PHIX- notifiable condition alert</property>
        <property name="toAddresses">${sendingFacilityNotificationEmail}</property>
        <property name="useAuthentication">0</property>
        <property name="useServerSettings">0</property>
        <property name="username"></property>
      </properties>
      <transformer>
        <steps/>
        <inboundTemplate encoding="base64"></inboundTemplate>
        <inboundProtocol>HL7V2</inboundProtocol>
        <outboundProtocol>HL7V2</outboundProtocol>
        <inboundProperties>
          <property name="convertLFtoCR">true</property>
          <property name="handleRepetitions">true</property>
          <property name="handleSubcomponents">false</property>
          <property name="stripNamespaces">true</property>
          <property name="useStrictParser">false</property>
          <property name="useStrictValidation">false</property>
        </inboundProperties>
        <outboundProperties>
          <property name="convertLFtoCR">true</property>
          <property name="handleRepetitions">false</property>
          <property name="handleSubcomponents">false</property>
          <property name="stripNamespaces">true</property>
          <property name="useStrictParser">false</property>
          <property name="useStrictValidation">false</property>
        </outboundProperties>
      </transformer>
      <filter>
        <rules>
          <rule>
            <sequenceNumber>0</sequenceNumber>
            <name>Filter for subscription matches</name>
            <data class="map">
              <entry>
                <string>Script</string>
                <string>var retval = ($(&apos;subscription&apos;) == &apos;true&apos; &amp;&amp; 
              $(&apos;subscriptionName&apos;).length() &gt; 0 &amp;&amp;
              $(&apos;hubHost&apos;) == $(&apos;receivingFacilityHubHost&apos;) &amp;&amp;
              !($(&apos;componentErrors&apos;).length() &gt; 0) );

if (retval)
{
  channelMap.put(&apos;emailAlertStatus&apos;, &apos;SENT&apos;);
}
else
{
  channelMap.put(&apos;emailAlertStatus&apos;, &apos;BYPASSED&apos;);
}

return retval;</string>
              </entry>
            </data>
            <type>JavaScript</type>
            <script>var retval = ($(&apos;subscription&apos;) == &apos;true&apos; &amp;&amp; 
              $(&apos;subscriptionName&apos;).length() &gt; 0 &amp;&amp;
              $(&apos;hubHost&apos;) == $(&apos;receivingFacilityHubHost&apos;) &amp;&amp;
              !($(&apos;componentErrors&apos;).length() &gt; 0) );

if (retval)
{
  channelMap.put(&apos;emailAlertStatus&apos;, &apos;SENT&apos;);
}
else
{
  channelMap.put(&apos;emailAlertStatus&apos;, &apos;BYPASSED&apos;);
}

return retval;</script>
            <operator>NONE</operator>
          </rule>
        </rules>
      </filter>
      <transportName>Email Sender</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <version>2.1.1.5490</version>
    </connector>
    <connector>
      <name>Log events</name>
      <properties>
        <property name="DataType">File Writer</property>
        <property name="FTPAnonymous">1</property>
        <property name="binary">0</property>
        <property name="charsetEncoding">DEFAULT_ENCODING</property>
        <property name="directory"></property>
        <property name="host">C:/phixdata/logs</property>
        <property name="outputAppend">1</property>
        <property name="outputPattern">phix_events.log</property>
        <property name="passive">1</property>
        <property name="password">anonymous</property>
        <property name="scheme">file</property>
        <property name="secure">1</property>
        <property name="template">-----------------------------------------------------------------------------
Date: ${date.get(&apos;MM/dd/yyyy HH:mm:ss&apos;)}
Message DateTime: ${msgDateTime}
Message Control ID: ${msgCtrlID}
HL7 version: ${msgHL7VersionID}  Type: ${msgType}  Event: ${msgTriggerEvent}  
Sending Facility ID: ${msgSendingFacilityID},  Receiving Facility ID: ${msgReceivingFacilityID}
Incoming Filename: ${timestamp}_IN.txt  Transformed Filename: ${timestamp}_XFORMED.txt

Site Configuration:
  hubInstanceName: ${hubInstanceName}
  hubHost: ${hubHost}
  hubInstanceEmailFromAddr: ${hubInstanceEmailFromAddr}
  hubInstanceWebSvcHost: ${hubInstanceWebSvcHost}

Msg Configuration:
  structural validation: ${structuralValidation}
  vocabTranslation: ${vocabTranslation}
  codeValidation: ${codeValidation}
  subscription: ${subscription}
  anonymization: ${anonymization}
  addSFTSegment: ${addSFTSegment}
  addSPMSegment: ${addSPMSegment}
  translateToVersion: ${translateToVersion}
  vocabTranslationMSSProfile: ${vocabTranslationMSSProfile}
  codeValidationMSSProfile: ${codeValidationMSSProfile}
  customProfileName: ${customProfileName}
  sendingFacilityDirectEmailAddress: ${sendingFacilityDirectEmailAddress}
  sendingFacilityNotificationEmail: ${sendingFacilityNotificationEmail}
  sendingFacilityErrorNotificationEmail: ${sendingFacilityErrorNotificationEmail}
  sendingFacilityWebSvcHost: ${receivingFacilityWebSvcHost}
  sendingFacilityXportType: ${receivingFacilityXportType}
  sendingFacilityHubHost: ${receivingFacilityHubHost}
  receivingFacilityDirectEmailAddress: ${sendingFacilityDirectEmailAddress}
  receivingFacilityWebSvcHost: ${sendingFacilityWebSvcHost}
  receivingFacilityXportType: ${sendingFacilityXportType}
  receivingFacilityHubHost: ${receivingFacilityHubHost}

Services:
  Component Routing Service: CALLED
  Dynamic Msg Sender: ${dynamicMsgSendingFacStatus}
  Dynamic Msg Receiver: ${dynamicMsgReceivingFacStatus}
  Structural Validation Service: ${strucutralValidationCallStatus}
  Vocabulary Translation Service: ${vocabTranslationCallStatus}
  Code Validation Service: ${codeValidationCallStatus}
  Subscription Service: ${subscriptionCallStatus}
  Linker/Anonymizer Service: ${anonymizationCallStatus}
  ACK Message: ${ackSentStatus}
  Outgoing Message: ${outgoingMsgSentStatus}
  PHIX Connector Service: ${phixConnectorServiceCallStatus}
  Notifiable Condition Email Alert: ${emailAlertStatus}

Errors:
${componentErrors}
</property>
        <property name="timeout">10000</property>
        <property name="username">anonymous</property>
        <property name="validateConnections">1</property>
      </properties>
      <transformer>
        <steps/>
        <inboundTemplate encoding="base64"></inboundTemplate>
        <inboundProtocol>HL7V2</inboundProtocol>
        <outboundProtocol>HL7V2</outboundProtocol>
        <inboundProperties>
          <property name="convertLFtoCR">true</property>
          <property name="handleRepetitions">true</property>
          <property name="handleSubcomponents">false</property>
          <property name="stripNamespaces">true</property>
          <property name="useStrictParser">false</property>
          <property name="useStrictValidation">false</property>
        </inboundProperties>
        <outboundProperties>
          <property name="convertLFtoCR">true</property>
          <property name="handleRepetitions">false</property>
          <property name="handleSubcomponents">false</property>
          <property name="stripNamespaces">true</property>
          <property name="useStrictParser">false</property>
          <property name="useStrictValidation">false</property>
        </outboundProperties>
      </transformer>
      <filter>
        <rules/>
      </filter>
      <transportName>File Writer</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <version>2.1.1.5490</version>
    </connector>
    <connector>
      <name>Log errors</name>
      <properties>
        <property name="DataType">File Writer</property>
        <property name="FTPAnonymous">1</property>
        <property name="binary">0</property>
        <property name="charsetEncoding">DEFAULT_ENCODING</property>
        <property name="directory"></property>
        <property name="host">C:/phixdata/logs</property>
        <property name="outputAppend">1</property>
        <property name="outputPattern">phix_errors.log</property>
        <property name="passive">1</property>
        <property name="password">anonymous</property>
        <property name="scheme">file</property>
        <property name="secure">1</property>
        <property name="template">-----------------------------------------------------------------------------
Date: ${date.get(&apos;MM/dd/yyyy HH:mm:ss&apos;)}
Message DateTime: ${msgDateTime}
Message Control ID: ${msgCtrlID}
HL7 version: ${msgHL7VersionID}  Type: ${msgType}  Event: ${msgTriggerEvent}  
Sending Facility ID: ${msgSendingFacilityID},  Receiving Facility ID: ${msgReceivingFacilityID}
Incoming Filename: ${timestamp}_IN.txt  Transformed Filename: ${timestamp}_XFORMED.txt
Errors:
${componentErrors}

</property>
        <property name="timeout">10000</property>
        <property name="username">anonymous</property>
        <property name="validateConnections">1</property>
      </properties>
      <transformer>
        <steps/>
        <inboundTemplate encoding="base64"></inboundTemplate>
        <inboundProtocol>HL7V2</inboundProtocol>
        <outboundProtocol>HL7V2</outboundProtocol>
        <inboundProperties>
          <property name="convertLFtoCR">true</property>
          <property name="handleRepetitions">true</property>
          <property name="handleSubcomponents">false</property>
          <property name="stripNamespaces">true</property>
          <property name="useStrictParser">false</property>
          <property name="useStrictValidation">false</property>
        </inboundProperties>
        <outboundProperties>
          <property name="convertLFtoCR">true</property>
          <property name="handleRepetitions">false</property>
          <property name="handleSubcomponents">false</property>
          <property name="stripNamespaces">true</property>
          <property name="useStrictParser">false</property>
          <property name="useStrictValidation">false</property>
        </outboundProperties>
      </transformer>
      <filter>
        <rules>
          <rule>
            <sequenceNumber>0</sequenceNumber>
            <name>Filter destination based on component errors being present</name>
            <data class="map">
              <entry>
                <string>Script</string>
                <string>return $(&apos;componentErrors&apos;).length() &gt; 0;</string>
              </entry>
            </data>
            <type>JavaScript</type>
            <script>return $(&apos;componentErrors&apos;).length() &gt; 0;</script>
            <operator>NONE</operator>
          </rule>
        </rules>
      </filter>
      <transportName>File Writer</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <version>2.1.1.5490</version>
    </connector>
    <connector>
      <name>Email errors</name>
      <properties>
        <property name="DataType">Email Sender</property>
        <property name="attachmentContents">&lt;list/&gt;</property>
        <property name="attachmentNames">&lt;list/&gt;</property>
        <property name="attachmentTypes">&lt;list/&gt;</property>
        <property name="body">This email notification is being sent to alert you that a message sent by your organization failed to process correctly.

Message DateTime: ${msgDateTime}
Message Control ID: ${msgCtrlID}
HL7 version: ${msgHL7VersionID}  Type: ${msgType}  Event: ${msgTriggerEvent}
Incoming Filename: ${timestamp}_IN.txt  Transformed Filename: ${timestamp}_XFORMED.txt
Errors:
${componentErrors}

Please do not respond to this automated email notification.
</property>
        <property name="contentType">text/plain</property>
        <property name="emailSecure">none</property>
        <property name="fromAddress">${hubInstanceEmailFromAddr}</property>
        <property name="hostname">localhost</property>
        <property name="password"></property>
        <property name="smtpPort">25</property>
        <property name="subject">PHIX- error processing message</property>
        <property name="toAddresses">${sendingFacilityErrorNotificationEmail}</property>
        <property name="useAuthentication">0</property>
        <property name="useServerSettings">0</property>
        <property name="username"></property>
      </properties>
      <transformer>
        <steps/>
        <inboundTemplate encoding="base64"></inboundTemplate>
        <inboundProtocol>HL7V2</inboundProtocol>
        <outboundProtocol>HL7V2</outboundProtocol>
        <inboundProperties>
          <property name="convertLFtoCR">true</property>
          <property name="handleRepetitions">true</property>
          <property name="handleSubcomponents">false</property>
          <property name="stripNamespaces">true</property>
          <property name="useStrictParser">false</property>
          <property name="useStrictValidation">false</property>
        </inboundProperties>
        <outboundProperties>
          <property name="convertLFtoCR">true</property>
          <property name="handleRepetitions">false</property>
          <property name="handleSubcomponents">false</property>
          <property name="stripNamespaces">true</property>
          <property name="useStrictParser">false</property>
          <property name="useStrictValidation">false</property>
        </outboundProperties>
      </transformer>
      <filter>
        <rules>
          <rule>
            <sequenceNumber>0</sequenceNumber>
            <name>Filter for presence of errors and an email address</name>
            <data class="map">
              <entry>
                <string>Script</string>
                <string>return ($(&apos;componentErrors&apos;).length() &gt; 0 &amp;&amp;
        $(&apos;sendingFacilityErrorNotificationEmail&apos;) != &quot;NONE&quot;);</string>
              </entry>
            </data>
            <type>JavaScript</type>
            <script>return ($(&apos;componentErrors&apos;).length() &gt; 0 &amp;&amp;
        $(&apos;sendingFacilityErrorNotificationEmail&apos;) != &quot;NONE&quot;);</script>
            <operator>NONE</operator>
          </rule>
        </rules>
      </filter>
      <transportName>Email Sender</transportName>
      <mode>DESTINATION</mode>
      <enabled>false</enabled>
      <version>2.1.1.5490</version>
    </connector>
    <connector>
      <name>Processing complete</name>
      <properties>
        <property name="DataType">Channel Writer</property>
        <property name="host">sink</property>
        <property name="synchronised">0</property>
        <property name="template">${message.encodedData}</property>
      </properties>
      <transformer>
        <steps>
          <step>
            <sequenceNumber>0</sequenceNumber>
            <name>Log processing complete</name>
            <script>logger.info(&quot;Message processing complete.&quot;);</script>
            <type>JavaScript</type>
            <data class="map">
              <entry>
                <string>Script</string>
                <string>logger.info(&quot;Message processing complete.&quot;);</string>
              </entry>
            </data>
          </step>
        </steps>
        <inboundTemplate encoding="base64"></inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundProtocol>HL7V2</inboundProtocol>
        <outboundProtocol>HL7V2</outboundProtocol>
        <inboundProperties>
          <property name="convertLFtoCR">true</property>
          <property name="handleRepetitions">true</property>
          <property name="handleSubcomponents">false</property>
          <property name="stripNamespaces">true</property>
          <property name="useStrictParser">false</property>
          <property name="useStrictValidation">false</property>
        </inboundProperties>
        <outboundProperties>
          <property name="convertLFtoCR">true</property>
          <property name="handleRepetitions">false</property>
          <property name="handleSubcomponents">false</property>
          <property name="stripNamespaces">true</property>
          <property name="useStrictParser">false</property>
          <property name="useStrictValidation">false</property>
        </outboundProperties>
      </transformer>
      <filter>
        <rules/>
      </filter>
      <transportName>Channel Writer</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <version>2.1.1.5490</version>
    </connector>
  </destinationConnectors>
  <properties>
    <property name="clearGlobalChannelMap">true</property>
    <property name="dont_store_filtered">false</property>
    <property name="encryptData">false</property>
    <property name="error_messages_only">false</property>
    <property name="initialState">started</property>
    <property name="max_message_age">-1</property>
    <property name="store_messages">true</property>
    <property name="synchronous">true</property>
    <property name="transactional">false</property>
  </properties>
  <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
  <postprocessingScript>// This script executes once after a message has been processed
return;</postprocessingScript>
  <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</deployScript>
  <shutdownScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</shutdownScript>
</channel>name>Send msg to Receiving Facility WS (to PHIX2)</name>
      <properties>
        <property name="DataType">Web Service Sender</property>
        <property name="dispatcherAttachmentContents">&lt;list/&gt;</property>
        <property name="dispatcherAttachmentNames">&lt;list/&gt;</property>
        <property name="dispatcherAttachmentTypes">&lt;list/&gt;</property>
        <property name="dispatcherEnvelope">&lt;soapenv:Envelope xmlns:ns=&quot;http://ws.connectors.connect.mirth.com/&quot; xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&#xd;
  &lt;soapenv:Header/&gt;&#xd;
  &lt;soapenv:Body&gt;&#xd;
    &lt;ns:acceptMessage&gt;&#xd;
      &lt;arg0&gt;&lt;![CDATA[${message.encodedData}]]&gt;&lt;/arg0&gt;
    &lt;/ns:acceptMessage&gt;&#xd;
  &lt;/soapenv:Body&gt;
&lt;/soapenv:Envelope&gt;&#xd;
</property>
        <property name="dispatcherOneWay">0</property>
        <property name="dispatcherOperation">acceptMessage</property>
        <property name="dispatcherPassword"></property>
        <property name="dispatcherPort">{http://ws.connectors.connect.mirth.com/}DefaultAcceptMessagePort</property>
        <property name="dispatcherReplyChannelId">sink</property>
        <property name="dispatcherService">{http://ws.connectors.connect.mirth.com/}DefaultAcceptMessageService</property>
        <property name="dispatcherSoapAction"></property>
        <property name="dispatcherUseAuthentication">0</property>
        <property name="dispatcherUseMtom">0</property>
        <property name="dispatcherUsername"></property>
        <property name="dispatcherWsdlCacheId"></property>
        <property name="dispatcherWsdlOperations">&lt;list&gt;
  &lt;string&gt;acceptMessage&lt;/string&gt;
&lt;/list&gt;</property>
        <property name="dispatcherWsdlUrl">http://phix2.phiresearchlab.org:8081/services/Mirth?wsdl</property>
        <property name="host">phix2.phiresearchlab.org:8081/services/Mirth?wsdl</property>
        <property name="queuePollInterval">200</property>
        <property name="reconnectMillisecs">10000</property>
        <property name="rotateQueue">0</property>
        <property name="usePersistentQueues">0</property>
      </properties>
      <transformer>
        <steps>
          <step>
            <sequenceNumber>0</sequenceNumber>
            <name>Perform anonymization</name>
            <script>try
{
  if ($(&apos;anonymization&apos;) == &apos;true&apos;)
  {
    logger.info(&quot;Performing anonymization&quot;);

    // Insert bioSensePatientId generated by the BioSenseLinker service
    msg[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.1&apos;] = $(&apos;bioSensePatientId&apos;) + &apos;&apos;;

    msg[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.4&apos;] = &quot;&amp;2.16.840.1.114222.4.3.2.5.2.2&amp;ISO&quot;;

    // anonymize all patient name values except PID-5.7: Name Type Code
    msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.1&apos;] = &apos;&apos;;
    msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.2&apos;] = &apos;&apos;;
    msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.3&apos;] = &apos;&apos;;
    msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.4&apos;] = &apos;&apos;;
    msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.5&apos;] = &apos;&apos;;
    msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.6&apos;] = &apos;&a
